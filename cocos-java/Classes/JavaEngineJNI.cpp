// Generated by JavaCPP version 0.8-SNAPSHOT


#ifdef __APPLE__
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))   __attribute__ ((used))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif
#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif
#include <jni.h>
#ifdef ANDROID
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif
#if defined(ANDROID) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline))
    #define JavaCPP_hidden   __attribute__((visibility("hidden")))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif

#include "CCApplication.h"
#include "SimpleAudioEngine.h"
#include "ccTypes.h"
#include "CCTypes.h"
#include "CCFileUtils.h"
#include <map>
#include "CCActionCatmullRom.h"
#include "CCRef.h"
#include <vector>
#include <string>
#include "CCTouch.h"
#include "CCUserDefault.h"
#include "CCValue.h"
#include "ZipUtils.h"
#include "CCComponent.h"
#include "CCConfiguration.h"
#include "CCConsole.h"
#include "CCActionGrid.h"
#include "CCAction.h"
#include "CCActionCamera.h"
#include "CCActionInstant.h"
#include "CCActionInterval.h"
#include "CCActionProgressTimer.h"
#include "JavaCallFunc.h"
#include "CCActionEase.h"
#include "CCActionGrid3d.h"
#include "CCActionPageTurn3D.h"
#include "CCAnimation.h"
#include "CCAnimationCache.h"
#include "CCAtlasNode.h"
#include "CCLight.h"
#include "CCCamera.h"
#include "CCClippingNode.h"
#include "CCDrawNode.h"
#include "CCDrawingPrimitives.h"
#include "CCGrid.h"
#include "CCLabel.h"
#include "CCLabelTTF.h"
#include "CCLayer.h"
#include "CCMenu.h"
#include "CCMenuItem.h"
#include "CCMotionStreak.h"
#include "CCNode.h"
#include "CCParallaxNode.h"
#include "CCSprite.h"
#include "CCSpriteBatchNode.h"
#include "CCSpriteFrame.h"
#include "CCSpriteFrameCache.h"
#include "CCTexture2D.h"
#include "CCTextureCache.h"
#include "CCTileMapAtlas.h"
#include "CCTMXLayer.h"
#include "CCTMXObjectGroup.h"
#include "CCTMXTiledMap.h"
#include "CCAABB.h"
#include "CCSprite3d.h"
#include "CCBundle3DData.h"
#include "CCAttachNode.h"
#include "CCBillBoard.h"
#include "CCSkeleton3D.h"
#include "CCBundle3D.h"
#include "CCVertexIndexBuffer.h"
#include "CCBundle3dData.h"
#include "CCMesh.h"
#include "CCMeshVertexIndexData.h"
#include "CCMeshSkin.h"
#include "CCOBB.h"
#include "CCRay.h"
#include "CCDevice.h"
#include "CCDirector.h"
#include "CCEAnimation.h"
#include "CCEController.h"
#include "CCEReader.h"
#include "CCEventDispatcher.h"
#include "CCEventAcceleration.h"
#include "CCEventCustom.h"
#include "CCEventFocus.h"
#include "CCEventKeyboard.h"
#include "CCEventListener.h"
#include "JavaEventListener.h"
#include "JavaEventListenerTouchAllAtOnce.h"
#include "JavaEventListenerTouchOneByOne.h"
#include "CCEventMouse.h"
#include "CCEventTouch.h"
#include "cocos2d.h"
#include "Mat4.h"
#include "CCGeometry.h"
#include "Vec2.h"
#include "Vec3.h"
#include "network/HttpClient.h"
#include "network/HttpRequest.h"
#include "network/HttpResponse.h"
#include "network/WebSocket.h"
#include "JavaWebSocketDelegate.h"
#include "CCParticleExamples.h"
#include "CCParticleSystem.h"
#include "CCPhysicsBody.h"
#include "CCPhysicsContact.h"
#include "JavaPhysicsContactListener.h"
#include "CCPhysicsJoint.h"
#include "CCPhysicsShape.h"
#include "CCScene.h"
#include "CCPhysicsWorld.h"
#include "CCGLProgram.h"
#include "CCGLProgramState.h"
#include "CCScheduler.h"
#include "JavaStorageClass.h"
#include "CCTransition.h"
#include "ui/UIButton.h"
#include "ui/UICheckBox.h"
#include "ui/UIHelper.h"
#include "ui/UIImageView.h"
#include "ui/UILayout.h"
#include "ui/UILayoutParameter.h"
#include "ui/UIListView.h"
#include "ui/UILoadingBar.h"
#include "ui/UIPageView.h"
#include "ui/UIRichText.h"
#include "ui/UIScrollView.h"
#include "ui/UISlider.h"
#include "ui/UIText.h"
#include "ui/UITextAtlas.h"
#include "ui/UITextBMFont.h"
#include "ui/UITextField.h"
#include "ui/UIWidget.h"

#if CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID
#include "platform/android/jni/JniHelper.h"
#endif

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[300] = {
        "com/googlecode/javacpp/Pointer",
        "com/googlecode/javacpp/Loader",
        "java/lang/Object",
        "java/lang/NullPointerException",
        "java/lang/RuntimeException",
        "org/ccj/Application",
        "org/ccj/audio/SimpleAudioEngine",
        "org/ccj/base/FileUtils",
        "org/ccj/base/VectorString",
        "org/ccj/base/PointArray",
        "org/ccj/math/Vec2",
        "org/ccj/base/Ref",
        "org/ccj/base/UserDefault",
        "org/ccj/math/Mat4",
        "org/ccj/d3/Mesh",
        "org/ccj/d2/Node",
        "org/ccj/d2/Sprite",
        "org/ccj/d2/Layer",
        "org/ccj/d2/Menu",
        "org/ccj/d2/MenuItem",
        "org/ccj/d3/NodeData",
        "org/ccj/physics/PhysicsBody",
        "org/ccj/physics/PhysicsShape",
        "org/ccj/base/Touch",
        "org/ccj/base/Value",
        "org/ccj/Configuration",
        "org/ccj/d2/action/AccelAmplitude",
        "org/ccj/d2/action/AccelDeccelAmplitude",
        "org/ccj/d2/action/Action",
        "org/ccj/d2/action/ActionCamera",
        "org/ccj/math/Vec3",
        "org/ccj/d2/action/ActionEase",
        "org/ccj/d2/action/ActionInstant",
        "org/ccj/d2/action/ActionInterval",
        "org/ccj/d2/action/ActionTween",
        "org/ccj/d2/action/Animate",
        "org/ccj/d2/Animation",
        "org/ccj/d2/action/BezierBy",
        "org/ccj/d2/action/BezierTo",
        "org/ccj/d2/action/Blink",
        "org/ccj/d2/action/CardinalSplineTo",
        "org/ccj/d2/action/DeccelAmplitude",
        "org/ccj/d2/action/DelayTime",
        "org/ccj/d2/action/EaseBackIn",
        "org/ccj/d2/action/EaseBackInOut",
        "org/ccj/d2/action/EaseBackOut",
        "org/ccj/d2/action/EaseBezierAction",
        "org/ccj/d2/action/EaseBounce",
        "org/ccj/d2/action/EaseBounceIn",
        "org/ccj/d2/action/EaseBounceInOut",
        "org/ccj/d2/action/EaseBounceOut",
        "org/ccj/d2/action/EaseElastic",
        "org/ccj/d2/action/EaseElasticIn",
        "org/ccj/d2/action/EaseElasticInOut",
        "org/ccj/d2/action/EaseElasticOut",
        "org/ccj/d2/action/EaseExponentialIn",
        "org/ccj/d2/action/EaseExponentialInOut",
        "org/ccj/d2/action/EaseExponentialOut",
        "org/ccj/d2/action/EaseIn",
        "org/ccj/d2/action/EaseInOut",
        "org/ccj/d2/action/EaseOut",
        "org/ccj/d2/action/EaseRateAction",
        "org/ccj/d2/action/EaseSineIn",
        "org/ccj/d2/action/EaseSineInOut",
        "org/ccj/d2/action/EaseSineOut",
        "org/ccj/d2/action/FadeIn",
        "org/ccj/d2/action/FadeOut",
        "org/ccj/d2/action/FadeOutBLTiles",
        "org/ccj/d2/action/FadeOutDownTiles",
        "org/ccj/d2/action/FadeOutTRTiles",
        "org/ccj/d2/action/FadeOutUpTiles",
        "org/ccj/d2/action/FadeTo",
        "org/ccj/d2/action/FiniteTimeAction",
        "org/ccj/d2/action/FlipX",
        "org/ccj/d2/action/FlipX3D",
        "org/ccj/d2/action/FlipY",
        "org/ccj/d2/action/FlipY3D",
        "org/ccj/d2/action/Follow",
        "org/ccj/d2/action/Grid3DAction",
        "org/ccj/d2/action/GridAction",
        "org/ccj/base/Vertex3F",
        "org/ccj/d2/GridBase",
        "org/ccj/d2/action/Hide",
        "org/ccj/d2/action/JumpBy",
        "org/ccj/d2/action/JumpTiles3D",
        "org/ccj/d2/action/JumpTo",
        "org/ccj/d2/action/Lens3D",
        "org/ccj/d2/action/Liquid",
        "org/ccj/d2/action/MoveBy",
        "org/ccj/d2/action/MoveTo",
        "org/ccj/d2/action/PageTurn3D",
        "org/ccj/d2/action/Place",
        "org/ccj/d2/action/ProgressFromTo",
        "org/ccj/d2/action/ProgressTo",
        "org/ccj/d2/action/RemoveSelf",
        "org/ccj/d2/action/Repeat",
        "org/ccj/d2/action/RepeatForever",
        "org/ccj/d2/action/ReuseGrid",
        "org/ccj/d2/action/ReverseTime",
        "org/ccj/d2/action/Ripple3D",
        "org/ccj/d2/action/RotateBy",
        "org/ccj/d2/action/RotateTo",
        "org/ccj/d2/action/ScaleBy",
        "org/ccj/d2/action/ScaleTo",
        "org/ccj/d2/action/Sequence",
        "org/ccj/d2/action/Shaky3D",
        "org/ccj/d2/action/ShakyTiles3D",
        "org/ccj/d2/action/ShatteredTiles3D",
        "org/ccj/d2/action/Show",
        "org/ccj/d2/action/ShuffleTiles",
        "org/ccj/math/Size",
        "org/ccj/d2/action/SkewBy",
        "org/ccj/d2/action/SkewTo",
        "org/ccj/d2/action/Spawn",
        "org/ccj/d2/action/Speed",
        "org/ccj/d2/action/SplitCols",
        "org/ccj/d2/action/SplitRows",
        "org/ccj/d2/action/StopGrid",
        "org/ccj/d2/action/TiledGrid3DAction",
        "org/ccj/base/Quad3",
        "org/ccj/d2/action/TintBy",
        "org/ccj/d2/action/TintTo",
        "org/ccj/d2/action/ToggleVisibility",
        "org/ccj/d2/action/TurnOffTiles",
        "org/ccj/d2/action/Twirl",
        "org/ccj/d2/action/Waves",
        "org/ccj/d2/action/Waves3D",
        "org/ccj/d2/action/WavesTiles3D",
        "org/ccj/d2/AnimationCache",
        "org/ccj/d2/AtlasNode",
        "org/ccj/d2/Texture2D",
        "org/ccj/d2/Camera",
        "org/ccj/d2/ClippingNode",
        "org/ccj/d2/DrawNode",
        "org/ccj/d2/Label",
        "org/ccj/base/Color4B",
        "org/ccj/d2/LabelAtlas",
        "org/ccj/d2/LayerColor",
        "org/ccj/d2/LayerGradient",
        "org/ccj/base/Color3B",
        "org/ccj/d2/LayerMultiplex",
        "org/ccj/d2/LayerRGBA",
        "org/ccj/math/Rect",
        "org/ccj/d2/MenuItemAtlasFont",
        "org/ccj/d2/MenuItemFont",
        "org/ccj/d2/MenuItemImage",
        "org/ccj/d2/MenuItemLabel",
        "org/ccj/d2/MenuItemSprite",
        "org/ccj/d2/MenuItemToggle",
        "org/ccj/d2/MotionStreak",
        "org/ccj/base/VectorNode",
        "org/ccj/Component",
        "org/ccj/d2/action/ActionManager",
        "org/ccj/Scene",
        "org/ccj/Scheduler",
        "org/ccj/renderer/GLProgram",
        "org/ccj/renderer/GLProgramState",
        "org/ccj/d2/ParallaxNode",
        "org/ccj/d2/ProgressTimer",
        "org/ccj/d2/SpriteBatchNode",
        "org/ccj/d2/SpriteFrame",
        "org/ccj/d2/SpriteFrameCache",
        "org/ccj/d2/TextFieldTTF",
        "org/ccj/d2/TextureCache",
        "org/ccj/d2/TileMapAtlas",
        "org/ccj/base/ValueMap",
        "org/ccj/base/VectorValue",
        "org/ccj/d2/TMXTiledMap",
        "org/ccj/base/VectorTMXObjectGroup",
        "org/ccj/d2/TMXLayer",
        "org/ccj/d2/TMXObjectGroup",
        "org/ccj/d3/Animate3D",
        "org/ccj/d3/Animation3D",
        "org/ccj/d3/AttachNode",
        "org/ccj/d3/BillBoard",
        "org/ccj/d3/Bone3D",
        "org/ccj/d3/Bundle3D",
        "org/ccj/d3/IndexBuffer",
        "org/ccj/d3/AABB",
        "org/ccj/d3/MeshSkin",
        "org/ccj/d3/MeshIndexData",
        "org/ccj/d3/MeshVertexData",
        "org/ccj/math/Vec4",
        "org/ccj/d3/Skeleton3D",
        "org/ccj/d3/Sprite3D",
        "org/ccj/base/VectorMesh",
        "org/ccj/Director",
        "org/ccj/event/EventDispatcher",
        "org/ccj/GLView",
        "org/ccj/Console",
        "org/ccj/editor/cce/CCEReader",
        "org/ccj/physics/PhysicsJointGear",
        "org/ccj/physics/PhysicsJointGroove",
        "org/ccj/physics/PhysicsJointLimit",
        "org/ccj/physics/PhysicsJointPin",
        "org/ccj/physics/PhysicsJointDistance",
        "org/ccj/physics/PhysicsJointRotaryLimit",
        "org/ccj/physics/PhysicsJointRotarySpring",
        "org/ccj/physics/PhysicsJointSpring",
        "org/ccj/physics/PhysicsShapeBox",
        "org/ccj/physics/PhysicsShapeCircle",
        "org/ccj/physics/PhysicsJointRatchet",
        "org/ccj/physics/PhysicsShapeEdgeBox",
        "org/ccj/physics/PhysicsJointMotor",
        "org/ccj/physics/PhysicsJointFixed",
        "org/ccj/physics/PhysicsShapeEdgeChain",
        "org/ccj/physics/PhysicsShapePolygon",
        "org/ccj/physics/PhysicsShapeEdgeSegment",
        "org/ccj/physics/PhysicsShapeEdgePolygon",
        "org/ccj/editor/cce/CCEAnimation",
        "org/ccj/ui/Widget",
        "org/ccj/physics/PhysicsJoint",
        "org/ccj/base/Acceleration",
        "org/ccj/event/EventListenerTouchAllAtOnce",
        "org/ccj/event/EventListenerTouchOneByOne",
        "org/ccj/base/VectorTouch",
        "org/ccj/net/HttpClient",
        "org/ccj/net/HttpResponse",
        "org/ccj/net/HttpRequest$HttpResponseCallback",
        "org/ccj/base/VectorChar",
        "org/ccj/net/HttpRequest",
        "org/ccj/particle/ParticleExplosion",
        "org/ccj/particle/ParticleFire",
        "org/ccj/particle/ParticleFireworks",
        "org/ccj/particle/ParticleFlower",
        "org/ccj/particle/ParticleGalaxy",
        "org/ccj/particle/ParticleMeteor",
        "org/ccj/particle/ParticleRain",
        "org/ccj/particle/ParticleSmoke",
        "org/ccj/particle/ParticleSnow",
        "org/ccj/particle/ParticleSpiral",
        "org/ccj/particle/ParticleSun",
        "org/ccj/particle/ParticleSystem",
        "org/ccj/base/Color4F",
        "org/ccj/base/BlendFunc",
        "org/ccj/particle/ParticleSystemQuad",
        "org/ccj/physics/PhysicsWorld",
        "org/ccj/physics/PhysicsContactData",
        "org/ccj/physics/PhysicsScene",
        "org/ccj/physics/PhysicsMaterial",
        "org/ccj/base/VectorPhysicsShape",
        "org/ccj/base/VectorPhysicsBody",
        "org/ccj/Scheduler$SchedulerCallback",
        "org/ccj/storage/Storage",
        "org/ccj/transition/TransitionCrossFade",
        "org/ccj/transition/TransitionFade",
        "org/ccj/transition/TransitionFadeBL",
        "org/ccj/transition/TransitionFadeDown",
        "org/ccj/transition/TransitionFadeTR",
        "org/ccj/transition/TransitionFadeUp",
        "org/ccj/transition/TransitionFlipAngular",
        "org/ccj/transition/TransitionFlipX",
        "org/ccj/transition/TransitionFlipY",
        "org/ccj/transition/TransitionJumpZoom",
        "org/ccj/transition/TransitionMoveInB",
        "org/ccj/transition/TransitionMoveInL",
        "org/ccj/transition/TransitionMoveInR",
        "org/ccj/transition/TransitionMoveInT",
        "org/ccj/transition/TransitionRotoZoom",
        "org/ccj/transition/TransitionScene",
        "org/ccj/transition/TransitionSceneOriented",
        "org/ccj/transition/TransitionShrinkGrow",
        "org/ccj/transition/TransitionSlideInB",
        "org/ccj/transition/TransitionSlideInL",
        "org/ccj/transition/TransitionSlideInR",
        "org/ccj/transition/TransitionSlideInT",
        "org/ccj/transition/TransitionSplitCols",
        "org/ccj/transition/TransitionSplitRows",
        "org/ccj/transition/TransitionTurnOffTiles",
        "org/ccj/transition/TransitionZoomFlipAngular",
        "org/ccj/transition/TransitionZoomFlipX",
        "org/ccj/transition/TransitionZoomFlipY",
        "org/ccj/ui/Button",
        "org/ccj/ui/CheckBox$CheckBoxCallback",
        "org/ccj/ui/CheckBox",
        "org/ccj/ui/ImageView",
        "org/ccj/ui/Layout",
        "org/ccj/ui/LayoutParameter",
        "org/ccj/ui/Margin",
        "org/ccj/ui/LayoutParameterLinear",
        "org/ccj/ui/LayoutParameterRelative",
        "org/ccj/ui/ListView$ListViewCallback",
        "org/ccj/ui/ListView",
        "org/ccj/ui/LoadingBar",
        "org/ccj/ui/PageView$PageViewCallback",
        "org/ccj/ui/PageView",
        "org/ccj/ui/LayoutVector",
        "org/ccj/ui/RichElementImage",
        "org/ccj/ui/RichElementNode",
        "org/ccj/ui/RichElementText",
        "org/ccj/ui/RichText",
        "org/ccj/ui/ScrollView",
        "org/ccj/ui/Slider$SliderCallback",
        "org/ccj/ui/Slider",
        "org/ccj/ui/Text",
        "org/ccj/ui/TextAtlas",
        "org/ccj/ui/TextBMFont",
        "org/ccj/ui/TextField$TextFieldCallback",
        "org/ccj/ui/TextField",
        "org/ccj/ui/Widget$TouchEventCallback" };
static jclass JavaCPP_classes[300] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef ANDROID
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n"); fflush(stderr); 
#endif
    va_end(ap);
}

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "()V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting default constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, int size, void (*deallocator)(void*)) {
    if (deallocator != NULL) {
        jvalue args[3];
        args[0].j = ptr_to_jlong(ptr);
        args[1].i = size;
        args[2].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetIntField(obj, JavaCPP_limitFID, size);
        env->SetIntField(obj, JavaCPP_capacityFID, size);
    }
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (std::exception& e) {
        str = env->NewStringUTF(e.what());
    } catch (...) {
        str = env->NewStringUTF("Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

#include <vector>
template<typename P, typename T = P> class JavaCPP_hidden VectorAdapter {
public:
    VectorAdapter(const P* ptr, typename std::vector<T>::size_type size) : ptr((P*)ptr), size(size),
        vec2(ptr ? std::vector<T>((P*)ptr, (P*)ptr + size) : std::vector<T>()), vec(vec2) { }
    VectorAdapter(const std::vector<T>& vec) : ptr(0), size(0), vec2(vec), vec(vec2) { }
    VectorAdapter(      std::vector<T>& vec) : ptr(0), size(0), vec(vec) { }
    void assign(P* ptr, typename std::vector<T>::size_type size) {
        this->ptr = ptr;
        this->size = size;
        vec.assign(ptr, ptr + size);
    }
    static void deallocate(void* ptr) { delete[] (P*)ptr; }
    operator P*() {
        if (vec.size() > size) {
            ptr = new (std::nothrow) P[vec.size()];
        }
        if (ptr) {
            std::copy(vec.begin(), vec.end(), ptr);
        }
        size = vec.size();
        return ptr;
    }
    operator const P*()        { return &vec[0]; }
    operator std::vector<T>&() { return vec; }
    operator std::vector<T>*() { return ptr ? &vec : 0; }
    P* ptr;
    typename std::vector<T>::size_type size;
    std::vector<T> vec2;
    std::vector<T>& vec;
};

#include <string>
class JavaCPP_hidden StringAdapter {
public:
    StringAdapter(const          char* ptr, size_t size) : ptr((char*)ptr), size(size),
        str2(ptr ? (char*)ptr : ""), str(str2) { }
    StringAdapter(const signed   char* ptr, size_t size) : ptr((char*)ptr), size(size),
        str2(ptr ? (char*)ptr : ""), str(str2) { }
    StringAdapter(const unsigned char* ptr, size_t size) : ptr((char*)ptr), size(size),
        str2(ptr ? (char*)ptr : ""), str(str2) { }
    StringAdapter(const std::string& str) : ptr(0), size(0), str2(str), str(str2) { }
    StringAdapter(      std::string& str) : ptr(0), size(0), str(str) { }
    void assign(char* ptr, size_t size) {
        this->ptr = ptr;
        this->size = size;
        str.assign(ptr ? ptr : "");
    }
    static void deallocate(void* ptr) { free(ptr); }
    operator char*() {
        const char* c_str = str.c_str();
        if (ptr == NULL || strcmp(c_str, ptr) != 0) {
            ptr = strdup(c_str);
        }
        size = strlen(c_str) + 1;
        return ptr;
    }
    operator       signed   char*() { return (signed   char*)(operator char*)(); }
    operator       unsigned char*() { return (unsigned char*)(operator char*)(); }
    operator const          char*() { return                 str.c_str(); }
    operator const signed   char*() { return (signed   char*)str.c_str(); }
    operator const unsigned char*() { return (unsigned char*)str.c_str(); }
    operator         std::string&() { return str; }
    operator         std::string*() { return ptr ? &str : 0; }
    char* ptr;
    size_t size;
    std::string str2;
    std::string& str;
};

static JavaCPP_noinline void JavaCPP_detach(bool detach) {
    if (detach && JavaCPP_vm->DetachCurrentThread() != JNI_OK) {
        JavaCPP_log("Could not detach the JavaVM from the current thread.");
    }
}

static JavaCPP_noinline bool JavaCPP_getEnv(JNIEnv** env) {
    bool attached = false;
    JavaVM *vm = JavaCPP_vm;
    if (vm == NULL) {
            JavaCPP_log("Could not get any created JavaVM.");
            *env = NULL;
            return false;
    }
    if (vm->GetEnv((void**)env, JNI_VERSION_1_4) != JNI_OK) {
        struct {
            JNIEnv **env;
            operator JNIEnv**() { return env; } // Android JNI
            operator void**() { return (void**)env; } // standard JNI
        } env2 = { env };
        if (vm->AttachCurrentThread(env2, NULL) != JNI_OK) {
            JavaCPP_log("Could not attach the JavaVM to the current thread.");
            *env = NULL;
            return false;
        }
        attached = true;
    }
    if (JavaCPP_vm == NULL) {
        if (JNI_OnLoad(vm, NULL) < 0) {
            JavaCPP_detach(attached);
            *env = NULL;
            return false;
        }
    }
    return attached;
}

class JavaCPP_hidden JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback (){
 ptr =reinterpret_cast<cocos2d::network::SEL_HttpResponse>(&JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback::call);
 }
 void call(cocos2d::network::HttpClient* arg0, cocos2d::network::HttpResponse* arg1);
    cocos2d::network::SEL_HttpResponse ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_Scheduler_00024SchedulerCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_Scheduler_00024SchedulerCallback (){
 ptr =reinterpret_cast<cocos2d::SEL_SCHEDULE>(&JavaCPP_org_ccj_Scheduler_00024SchedulerCallback::call);
 }
 void call(float arg0);
    cocos2d::SEL_SCHEDULE ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_Scheduler_00024SchedulerCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback (){
 ptr =reinterpret_cast<cocos2d::ui::SEL_SelectedStateEvent>(&JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback::call);
 }
 void call(cocos2d::Ref* arg0, cocos2d::ui::CheckBoxEventType arg1);
    cocos2d::ui::SEL_SelectedStateEvent ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_ui_ListView_00024ListViewCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_ui_ListView_00024ListViewCallback (){
 ptr =reinterpret_cast<cocos2d::ui::SEL_ListViewEvent>(&JavaCPP_org_ccj_ui_ListView_00024ListViewCallback::call);
 }
 void call(cocos2d::Ref* arg0, cocos2d::ui::ListViewEventType arg1);
    cocos2d::ui::SEL_ListViewEvent ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_ui_ListView_00024ListViewCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_ui_PageView_00024PageViewCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_ui_PageView_00024PageViewCallback (){
 ptr =reinterpret_cast<cocos2d::ui::SEL_PageViewEvent>(&JavaCPP_org_ccj_ui_PageView_00024PageViewCallback::call);
 }
 void call(cocos2d::Ref* arg0, cocos2d::ui::PageViewEventType arg1);
    cocos2d::ui::SEL_PageViewEvent ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_ui_PageView_00024PageViewCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_ui_Slider_00024SliderCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_ui_Slider_00024SliderCallback (){
 ptr =reinterpret_cast<cocos2d::ui::SEL_SlidPercentChangedEvent>(&JavaCPP_org_ccj_ui_Slider_00024SliderCallback::call);
 }
 void call(cocos2d::Ref* arg0, cocos2d::ui::SliderEventType arg1);
    cocos2d::ui::SEL_SlidPercentChangedEvent ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_ui_Slider_00024SliderCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback (){
 ptr =reinterpret_cast<cocos2d::ui::SEL_TextFieldEvent>(&JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback::call);
 }
 void call(cocos2d::Ref* arg0, cocos2d::ui::TextFiledEventType arg1);
    cocos2d::ui::SEL_TextFieldEvent ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback::mid = NULL;
class JavaCPP_hidden JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback : cocos2d::Ref {
 public:
JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback (){
 ptr =reinterpret_cast<cocos2d::ui::SEL_TouchEvent>(&JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback::call);
 }
 void call(cocos2d::Ref* arg0, cocos2d::ui::TouchEventType arg1);
    cocos2d::ui::SEL_TouchEvent ptr;
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback::mid = NULL;


static void JavaCPP_org_ccj_base_Acceleration_deallocate(void *p) { delete (cocos2d::Acceleration*)p; }
static void JavaCPP_org_ccj_base_BlendFunc_deallocate(void *p) { delete (cocos2d::BlendFunc*)p; }
static void JavaCPP_org_ccj_base_Color3B_deallocate(void *p) { delete (cocos2d::Color3B*)p; }
static void JavaCPP_org_ccj_base_Color4B_deallocate(void *p) { delete (cocos2d::Color4B*)p; }
static void JavaCPP_org_ccj_base_Color4F_deallocate(void *p) { delete (cocos2d::Color4F*)p; }
static void JavaCPP_org_ccj_base_MapString_deallocate(void *p) { delete (std::map<std::string,std::string>*)p; }
static void JavaCPP_org_ccj_math_Vec2_deallocate(void *p) { delete (cocos2d::Vec2*)p; }
static void JavaCPP_org_ccj_base_Touch_deallocate(void *p) { delete (cocos2d::Touch*)p; }
static void JavaCPP_org_ccj_d2_action_BezierConfig_deallocate(void *p) { delete (cocos2d::ccBezierConfig*)p; }
static void JavaCPP_org_ccj_d2_action_CallFunc_deallocate(void *p) { delete (ccj::JavaCallFunc*)p; }
static void JavaCPP_org_ccj_base_Vertex3F_deallocate(void *p) { delete (cocos2d::Vertex3F*)p; }
static void JavaCPP_org_ccj_math_Size_deallocate(void *p) { delete (cocos2d::Size*)p; }
static void JavaCPP_org_ccj_base_Quad3_deallocate(void *p) { delete (cocos2d::Quad3*)p; }
static void JavaCPP_org_ccj_math_Rect_deallocate(void *p) { delete (cocos2d::Rect*)p; }
static void JavaCPP_org_ccj_math_Vec3_deallocate(void *p) { delete (cocos2d::Vec3*)p; }
static void JavaCPP_org_ccj_base_Value_deallocate(void *p) { delete (cocos2d::Value*)p; }
static void JavaCPP_org_ccj_base_ValueMap_deallocate(void *p) { delete (cocos2d::ValueMap*)p; }
static void JavaCPP_org_ccj_math_Mat4_deallocate(void *p) { delete (cocos2d::Mat4*)p; }
static void JavaCPP_org_ccj_d3_OBB_deallocate(void *p) { delete (cocos2d::OBB*)p; }
static void JavaCPP_org_ccj_editor_cce_CCEController_deallocate(void *p) { delete (cce::CCEController*)p; }
static void JavaCPP_org_ccj_base_VectorString_deallocate(void *p) { delete (std::vector<std::string>*)p; }
static void JavaCPP_org_ccj_event_EventAcceleration_deallocate(void *p) { delete (cocos2d::EventAcceleration*)p; }
static void JavaCPP_org_ccj_event_EventCustom_deallocate(void *p) { delete (cocos2d::EventCustom*)p; }
static void JavaCPP_org_ccj_event_EventFocus_deallocate(void *p) { delete (cocos2d::EventFocus*)p; }
static void JavaCPP_org_ccj_event_EventKeyboard_deallocate(void *p) { delete (cocos2d::EventKeyboard*)p; }
static void JavaCPP_org_ccj_event_EventListenerJava_deallocate(void *p) { delete (ccj::JavaEventListener*)p; }
static void JavaCPP_org_ccj_event_EventTouch_deallocate(void *p) { delete (cocos2d::EventTouch*)p; }
static void JavaCPP_org_ccj_math_Vec4_deallocate(void *p) { delete (cocos2d::Vec4*)p; }
static void JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback*)p)->obj); delete (JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_net_HttpRequest_deallocate(void *p) { delete (cocos2d::network::HttpRequest*)p; }
static void JavaCPP_org_ccj_net_WebSocket_deallocate(void *p) { delete (cocos2d::network::WebSocket*)p; }
static void JavaCPP_org_ccj_net_WebSocketDelegate_deallocate(void *p) { delete (ccj::JavaWebSocketDelegate*)p; }
static void JavaCPP_org_ccj_base_VectorPhysicsShape_deallocate(void *p) { delete (cocos2d::Vector<cocos2d::PhysicsShape*>*)p; }
static void JavaCPP_org_ccj_base_VectorPhysicsBody_deallocate(void *p) { delete (cocos2d::Vector<cocos2d::PhysicsBody*>*)p; }
static void JavaCPP_org_ccj_Scheduler_00024SchedulerCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)p)->obj); delete (JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback*)p)->obj); delete (JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_ui_ListView_00024ListViewCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_ui_ListView_00024ListViewCallback*)p)->obj); delete (JavaCPP_org_ccj_ui_ListView_00024ListViewCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_ui_Margin_deallocate(void *p) { delete (cocos2d::ui::Margin*)p; }
static void JavaCPP_org_ccj_ui_PageView_00024PageViewCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_ui_PageView_00024PageViewCallback*)p)->obj); delete (JavaCPP_org_ccj_ui_PageView_00024PageViewCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_ui_Slider_00024SliderCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_ui_Slider_00024SliderCallback*)p)->obj); delete (JavaCPP_org_ccj_ui_Slider_00024SliderCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback*)p)->obj); delete (JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef(((JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback*)p)->obj); delete (JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback*)p; JavaCPP_detach(a); }

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    JniHelper::setJavaVM(vm);
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    const char* members[300][1] = {
            { "sizeof" },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  } };
    int offsets[300][1] = {
            { sizeof(void*) },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  },
            {  } };
    int memberOffsetSizes[300] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 1, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)V");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 300 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(2) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = env->NewStringUTF(members[i][j]);
                args[2].i = offsets[i][j];
                env->CallStaticVoidMethodA(JavaCPP_getClass(env, 1), putMemberOffsetMID, args);
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "I");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "I");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "I");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JIJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 2, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 218) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 216) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 217) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 242) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 273) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 11) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 281) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 284) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 292) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 297) == NULL) {
        return JNI_ERR;
    }
    if (JavaCPP_getClass(env, 299) == NULL) {
        return JNI_ERR;
    }
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 300; i++) {
        env->DeleteWeakGlobalRef(JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JavaCPP_vm = NULL;
}

JNIEXPORT void JNICALL Java_com_googlecode_javacpp_Pointer_00024NativeDeallocator_deallocate(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    void* allocatedAddress = jlong_to_ptr(arg0);
    void (*deallocatorAddress)(void*) = (void(*)(void*))jlong_to_ptr(arg1);
    if (deallocatorAddress != NULL && allocatedAddress != NULL) {
        (*deallocatorAddress)(allocatedAddress);
    }

}



JNIEXPORT void JNICALL Java_com_googlecode_javacpp_Pointer_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)env->GetDirectBufferAddress(arg0);
    void* rptr = ptr0;
    jint rcapacity = 1;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_Pointer_memset(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    void* rptr;
    rptr = memset(ptr0, arg1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_Pointer_asDirectBuffer(JNIEnv* env, jobject obj) {
    char* ptr = (char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint size = env->GetIntField(obj, JavaCPP_limitFID);
    size -= position;
    jobject rarg = NULL;
    char* rptr;
    rptr = ptr;
    jint rcapacity = size;
    if (rptr != NULL) {
        rarg = env->NewDirectByteBuffer((void*)rptr, rcapacity);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_Pointer_memmove(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    void* rptr;
    rptr = memmove(ptr0, ptr1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr == ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_Pointer_memchr(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    void* rptr;
    rptr = memchr(ptr0, arg1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_com_googlecode_javacpp_Pointer_memcmp(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = memcmp(ptr0, ptr1, arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_googlecode_javacpp_Pointer_memcpy(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    void* rptr;
    rptr = memcpy(ptr0, ptr1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr == ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_Application_run(JNIEnv* env, jobject obj) {
    cocos2d::Application* ptr = (cocos2d::Application*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->run();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Application_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Application* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Application::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 5);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Application_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Application* rptr = cocos2d::Application::getInstance();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Application_openURL(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Application* ptr = (cocos2d::Application*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->openURL((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Application_setAnimationInterval(JNIEnv* env, jobject obj, jdouble arg0) {
    cocos2d::Application* ptr = (cocos2d::Application*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnimationInterval(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_Application_getCurrentLanguageCode(JNIEnv* env, jobject obj) {
    cocos2d::Application* ptr = (cocos2d::Application*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->getCurrentLanguageCode();
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_Application_getTargetPlatform(JNIEnv* env, jobject obj) {
    cocos2d::Application* ptr = (cocos2d::Application*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getTargetPlatform();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_Application_getCurrentLanguage(JNIEnv* env, jobject obj) {
    cocos2d::Application* ptr = (cocos2d::Application*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getCurrentLanguage();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_audio_SimpleAudioEngine_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    CocosDenshion::SimpleAudioEngine* rptr;
    jthrowable exc = NULL;
    try {
        rptr = CocosDenshion::SimpleAudioEngine::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_end(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        CocosDenshion::SimpleAudioEngine::end();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_unloadEffect(JNIEnv* env, jobject obj, jstring arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->unloadEffect(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_audio_SimpleAudioEngine_getEffectsVolume(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEffectsVolume();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_setEffectsVolume(JNIEnv* env, jobject obj, jfloat arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEffectsVolume(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_audio_SimpleAudioEngine_playEffect(JNIEnv* env, jobject obj, jstring arg0, jboolean arg1, jfloat arg2, jfloat arg3, jfloat arg4) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->playEffect(ptr0, arg1, arg2, arg3, arg4);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_stopAllEffects(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopAllEffects();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_preloadEffect(JNIEnv* env, jobject obj, jstring arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->preloadEffect(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_resumeAllEffects(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resumeAllEffects();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_stopEffect(JNIEnv* env, jobject obj, jint arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopEffect(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_resumeEffect(JNIEnv* env, jobject obj, jint arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resumeEffect(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_pauseEffect(JNIEnv* env, jobject obj, jint arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pauseEffect(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_pauseAllEffects(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pauseAllEffects();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_resumeBackgroundMusic(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resumeBackgroundMusic();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_stopBackgroundMusic(JNIEnv* env, jobject obj, jboolean arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopBackgroundMusic((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_audio_SimpleAudioEngine_willPlayBackgroundMusic(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->willPlayBackgroundMusic();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_rewindBackgroundMusic(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->rewindBackgroundMusic();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_audio_SimpleAudioEngine_isBackgroundMusicPlaying(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isBackgroundMusicPlaying();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_audio_SimpleAudioEngine_getBackgroundMusicVolume(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getBackgroundMusicVolume();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_setBackgroundMusicVolume(JNIEnv* env, jobject obj, jfloat arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackgroundMusicVolume(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_preloadBackgroundMusic(JNIEnv* env, jobject obj, jstring arg0) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->preloadBackgroundMusic(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_pauseBackgroundMusic(JNIEnv* env, jobject obj) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pauseBackgroundMusic();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_audio_SimpleAudioEngine_playBackgroundMusic(JNIEnv* env, jobject obj, jstring arg0, jboolean arg1) {
    CocosDenshion::SimpleAudioEngine* ptr = (CocosDenshion::SimpleAudioEngine*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->playBackgroundMusic(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_base_Acceleration_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Acceleration* rptr = new cocos2d::Acceleration();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_Acceleration_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_Acceleration_setTimestamp(JNIEnv* env, jobject obj, jdouble arg0) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    ptr->timestamp = arg0;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_base_Acceleration_getTimestamp(JNIEnv* env, jobject obj) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jdouble rarg = 0;
    double rvalue = ptr->timestamp;
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_base_Acceleration_getX(JNIEnv* env, jobject obj) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jdouble rarg = 0;
    double rvalue = ptr->x;
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_base_Acceleration_getZ(JNIEnv* env, jobject obj) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jdouble rarg = 0;
    double rvalue = ptr->z;
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_Acceleration_setX(JNIEnv* env, jobject obj, jdouble arg0) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    ptr->x = arg0;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_base_Acceleration_getY(JNIEnv* env, jobject obj) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jdouble rarg = 0;
    double rvalue = ptr->y;
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_Acceleration_setZ(JNIEnv* env, jobject obj, jdouble arg0) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    ptr->z = arg0;
}
JNIEXPORT void JNICALL Java_org_ccj_base_Acceleration_setY(JNIEnv* env, jobject obj, jdouble arg0) {
    cocos2d::Acceleration* ptr = (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    ptr->y = arg0;
}

JNIEXPORT void JNICALL Java_org_ccj_base_BlendFunc_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::BlendFunc* rptr = new cocos2d::BlendFunc();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_BlendFunc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_BlendFunc_setSrc(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::BlendFunc* ptr = (cocos2d::BlendFunc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    ptr->src = arg0;
}
JNIEXPORT void JNICALL Java_org_ccj_base_BlendFunc_setDst(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::BlendFunc* ptr = (cocos2d::BlendFunc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    ptr->dst = arg0;
}

JNIEXPORT void JNICALL Java_org_ccj_base_Color3B_allocate(JNIEnv* env, jobject obj, jbyte arg0, jbyte arg1, jbyte arg2) {
    jthrowable exc = NULL;
    try {
        cocos2d::Color3B* rptr = new cocos2d::Color3B(arg0, arg1, arg2);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_Color3B_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color3B_getR(JNIEnv* env, jobject obj) {
    cocos2d::Color3B* ptr = (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->r;
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color3B_getB(JNIEnv* env, jobject obj) {
    cocos2d::Color3B* ptr = (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->b;
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color3B_getG(JNIEnv* env, jobject obj) {
    cocos2d::Color3B* ptr = (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->g;
    rarg = (jbyte)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_base_Color4B_allocate(JNIEnv* env, jobject obj, jbyte arg0, jbyte arg1, jbyte arg2, jbyte arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::Color4B* rptr = new cocos2d::Color4B(arg0, arg1, arg2, arg3);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_Color4B_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color4B_getR(JNIEnv* env, jobject obj) {
    cocos2d::Color4B* ptr = (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->r;
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color4B_getB(JNIEnv* env, jobject obj) {
    cocos2d::Color4B* ptr = (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->b;
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color4B_getG(JNIEnv* env, jobject obj) {
    cocos2d::Color4B* ptr = (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->g;
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_ccj_base_Color4B_getA(JNIEnv* env, jobject obj) {
    cocos2d::Color4B* ptr = (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    signed char rvalue = ptr->a;
    rarg = (jbyte)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_base_Color4F_allocate(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::Color4F* rptr = new cocos2d::Color4F(arg0, arg1, arg2, arg3);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_Color4F_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_base_Color4F_getR(JNIEnv* env, jobject obj) {
    cocos2d::Color4F* ptr = (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->r;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_base_Color4F_getB(JNIEnv* env, jobject obj) {
    cocos2d::Color4F* ptr = (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->b;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_base_Color4F_getG(JNIEnv* env, jobject obj) {
    cocos2d::Color4F* ptr = (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->g;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_base_Color4F_getA(JNIEnv* env, jobject obj) {
    cocos2d::Color4F* ptr = (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->a;
    rarg = (jfloat)rvalue;
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_base_FileUtils_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::FileUtils* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FileUtils::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 7);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_setSearchPaths(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    std::vector<std::string>* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSearchPaths(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_setPopupNotify(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPopupNotify((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_addSearchPath(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->addSearchPath((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_FileUtils_isPopupNotify(JNIEnv* env, jobject obj) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isPopupNotify();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_FileUtils_isAbsolutePath(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isAbsolutePath((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::FileUtils::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_FileUtils_getSearchPaths(JNIEnv* env, jobject obj) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const std::vector<std::string>*)&ptr->getSearchPaths();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 8);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_FileUtils_getWritablePath(JNIEnv* env, jobject obj) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getWritablePath());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_FileUtils_isFileExist(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFileExist((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_loadFilenameLookupDictionaryFromFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->loadFilenameLookupDictionaryFromFile((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_purgeCachedEntries(JNIEnv* env, jobject obj) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->purgeCachedEntries();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_FileUtils_fullPathFromRelativeFile(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->fullPathFromRelativeFile((std::string&)adapter0, (std::string&)adapter1));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_addSearchResolutionsOrder(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->addSearchResolutionsOrder((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_FileUtils_getStringFromFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringFromFile((std::string&)adapter0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_FileUtils_setSearchResolutionsOrder(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    std::vector<std::string>* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSearchResolutionsOrder(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_FileUtils_getSearchResolutionsOrder(JNIEnv* env, jobject obj) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const std::vector<std::string>*)&ptr->getSearchResolutionsOrder();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 8);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_FileUtils_fullPathForFilename(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::FileUtils* ptr = (cocos2d::FileUtils*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->fullPathForFilename((std::string&)adapter0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_base_MapString_clear(JNIEnv* env, jobject obj) {
    std::map<std::string,std::string>* ptr = (std::map<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_org_ccj_base_MapString_size(JNIEnv* env, jobject obj) {
    std::map<std::string,std::string>* ptr = (std::map<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_MapString_insert(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    std::map<std::string,std::string>* ptr = (std::map<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        //ptr->insert((std::string&)adapter0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_MapString_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::map<std::string,std::string>* rptr = new std::map<std::string,std::string>();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_MapString_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_MapString_at(JNIEnv* env, jobject obj, jstring arg0) {
    std::map<std::string,std::string>* ptr = (std::map<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->at((std::string&)adapter0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_base_PointArray_count(JNIEnv* env, jobject obj) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->count();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_PointArray_clone(JNIEnv* env, jobject obj) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PointArray* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_PointArray_reverse(JNIEnv* env, jobject obj) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PointArray* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_PointArray_create(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::PointArray* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PointArray::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_PointArray_initWithCapacity(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithCapacity(arg0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_PointArray_addControlPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->addControlPoint(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_PointArray_reverseInline(JNIEnv* env, jobject obj) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reverseInline();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_PointArray_replaceControlPoint(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->replaceControlPoint(*ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_PointArray_insertControlPoint(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->insertControlPoint(*ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_PointArray_removeControlPointAtIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeControlPointAtIndex(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_PointArray_getControlPointAtIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PointArray* ptr = (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getControlPointAtIndex(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT void JNICALL Java_org_ccj_base_Ref_release(JNIEnv* env, jobject obj) {
    cocos2d::Ref* ptr = (cocos2d::Ref*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->release();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Ref_autorelease(JNIEnv* env, jobject obj) {
    cocos2d::Ref* ptr = (cocos2d::Ref*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Ref* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->autorelease();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_Ref_retain(JNIEnv* env, jobject obj) {
    cocos2d::Ref* ptr = (cocos2d::Ref*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->retain();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_base_Ref_getReferenceCount(JNIEnv* env, jobject obj) {
    cocos2d::Ref* ptr = (cocos2d::Ref*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getReferenceCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jint JNICALL Java_org_ccj_base_Touch_getID(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getID();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getLocation(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getLocation());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_Touch_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Touch* rptr = new cocos2d::Touch();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_base_Touch_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getStartLocation(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getStartLocation());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_Touch_setTouchInfo(JNIEnv* env, jobject obj, jint arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTouchInfo(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getDelta(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getDelta());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getLocationInView(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getLocationInView());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getStartLocationInView(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getStartLocationInView());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getPreviousLocation(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPreviousLocation());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_Touch_getPreviousLocationInView(JNIEnv* env, jobject obj) {
    cocos2d::Touch* ptr = (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPreviousLocationInView());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_base_UserDefault_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::UserDefault* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::UserDefault::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 12);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_flush(JNIEnv* env, jobject obj) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->flush();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_setDoubleForKey(JNIEnv* env, jobject obj, jstring arg0, jdouble arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setDoubleForKey(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_UserDefault_getBoolForKey__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getBoolForKey(ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_UserDefault_getBoolForKey__Ljava_lang_String_2Z(JNIEnv* env, jobject obj, jstring arg0, jboolean arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getBoolForKey(ptr0, arg1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_setBoolForKey(JNIEnv* env, jobject obj, jstring arg0, jboolean arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setBoolForKey(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_setFloatForKey(JNIEnv* env, jobject obj, jstring arg0, jfloat arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setFloatForKey(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_setStringForKey(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->setStringForKey(ptr0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_UserDefault_getXMLFilePath(JNIEnv* env, jclass cls) {
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(cocos2d::UserDefault::getXMLFilePath());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_base_UserDefault_getIntegerForKey__Ljava_lang_String_2I(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getIntegerForKey(ptr0, arg1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_base_UserDefault_getIntegerForKey__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getIntegerForKey(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_base_UserDefault_isXMLFileExist(JNIEnv* env, jclass cls) {
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = cocos2d::UserDefault::isXMLFileExist();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_base_UserDefault_getDoubleForKey__Ljava_lang_String_2D(JNIEnv* env, jobject obj, jstring arg0, jdouble arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jdouble rarg = 0;
    jthrowable exc = NULL;
    try {
        double rvalue = ptr->getDoubleForKey(ptr0, arg1);
        rarg = (jdouble)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_base_UserDefault_getDoubleForKey__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jdouble rarg = 0;
    jthrowable exc = NULL;
    try {
        double rvalue = ptr->getDoubleForKey(ptr0);
        rarg = (jdouble)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_setIntegerForKey(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setIntegerForKey(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_UserDefault_getStringForKey__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringForKey(ptr0, (std::string&)adapter1));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_UserDefault_getStringForKey__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringForKey(ptr0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_base_UserDefault_getFloatForKey__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getFloatForKey(ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_base_UserDefault_getFloatForKey__Ljava_lang_String_2F(JNIEnv* env, jobject obj, jstring arg0, jfloat arg1) {
    cocos2d::UserDefault* ptr = (cocos2d::UserDefault*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getFloatForKey(ptr0, arg1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_UserDefault_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::UserDefault::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jstring JNICALL Java_org_ccj_base_Value_asString(JNIEnv* env, jobject obj) {
    cocos2d::Value* ptr = (cocos2d::Value*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->asString());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_base_Value_asInt(JNIEnv* env, jobject obj) {
    cocos2d::Value* ptr = (cocos2d::Value*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->asInt();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorChar_size(JNIEnv* env, jobject obj) {
    std::vector<char>* ptr = (std::vector<char>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jchar JNICALL Java_org_ccj_base_VectorChar_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<char>* ptr = (std::vector<char>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jchar rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned short rvalue = ptr->at(arg0);
        rarg = (jchar)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorFloat_size(JNIEnv* env, jobject obj) {
    std::vector<float>* ptr = (std::vector<float>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jchar JNICALL Java_org_ccj_base_VectorFloat_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<float>* ptr = (std::vector<float>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jchar rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned short rvalue = ptr->at(arg0);
        rarg = (jchar)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorInt_size(JNIEnv* env, jobject obj) {
    std::vector<int>* ptr = (std::vector<int>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jchar JNICALL Java_org_ccj_base_VectorInt_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<int>* ptr = (std::vector<int>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jchar rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned short rvalue = ptr->at(arg0);
        rarg = (jchar)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorMat4_size(JNIEnv* env, jobject obj) {
    std::vector<Mat4*>* ptr = (std::vector<Mat4*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorMat4_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<Mat4*>* ptr = (std::vector<Mat4*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorMesh_size(JNIEnv* env, jobject obj) {
    std::vector<Mesh*>* ptr = (std::vector<Mesh*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorMesh_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<Mesh*>* ptr = (std::vector<Mesh*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mesh* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorNode_size(JNIEnv* env, jobject obj) {
    cocos2d::Vector<cocos2d::Node*>* ptr = (cocos2d::Vector<cocos2d::Node*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorNode_at(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::Node*>* ptr = (cocos2d::Vector<cocos2d::Node*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorNode_asSprite(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::Node*>* ptr = (cocos2d::Vector<cocos2d::Node*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite*  rptr;
    jthrowable exc = NULL;
    try {
        rptr = (cocos2d::Sprite* )ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorNode_asLayer(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::Node*>* ptr = (cocos2d::Vector<cocos2d::Node*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Layer*  rptr;
    jthrowable exc = NULL;
    try {
        rptr = (cocos2d::Layer* )ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorNode_asMenu(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::Node*>* ptr = (cocos2d::Vector<cocos2d::Node*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Menu*  rptr;
    jthrowable exc = NULL;
    try {
        rptr = (cocos2d::Menu* )ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorNode_asMenuItem(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::Node*>* ptr = (cocos2d::Vector<cocos2d::Node*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MenuItem*  rptr;
    jthrowable exc = NULL;
    try {
        rptr = (cocos2d::MenuItem* )ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorNodeData_size(JNIEnv* env, jobject obj) {
    std::vector<NodeData*>* ptr = (std::vector<NodeData*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorNodeData_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<NodeData*>* ptr = (std::vector<NodeData*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::NodeData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 20);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorPhysicsBody_size(JNIEnv* env, jobject obj) {
    cocos2d::Vector<cocos2d::PhysicsBody*>* ptr = (cocos2d::Vector<cocos2d::PhysicsBody*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorPhysicsBody_at(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::PhysicsBody*>* ptr = (cocos2d::Vector<cocos2d::PhysicsBody*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorPhysicsShape_size(JNIEnv* env, jobject obj) {
    cocos2d::Vector<cocos2d::PhysicsShape*>* ptr = (cocos2d::Vector<cocos2d::PhysicsShape*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorPhysicsShape_at(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::PhysicsShape*>* ptr = (cocos2d::Vector<cocos2d::PhysicsShape*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorRef_size(JNIEnv* env, jobject obj) {
    cocos2d::Vector<cocos2d::Ref*>* ptr = (cocos2d::Vector<cocos2d::Ref*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorRef_at(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::Ref*>* ptr = (cocos2d::Vector<cocos2d::Ref*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Ref* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorString_size(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_base_VectorString_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->at(arg0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorTouch_size(JNIEnv* env, jobject obj) {
    std::vector<cocos2d::Touch*>* ptr = (std::vector<cocos2d::Touch*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorTouch_at(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<cocos2d::Touch*>* ptr = (std::vector<cocos2d::Touch*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Touch* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_VectorTouch_push_1back(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<cocos2d::Touch*>* ptr = (std::vector<cocos2d::Touch*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Touch* ptr0 = arg0 == NULL ? NULL : (cocos2d::Touch*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->push_back(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jlong JNICALL Java_org_ccj_base_VectorValue_size(JNIEnv* env, jobject obj) {
    cocos2d::ValueVector* ptr = (cocos2d::ValueVector*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_base_VectorValue_at(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::ValueVector* ptr = (cocos2d::ValueVector*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Value* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jboolean JNICALL Java_org_ccj_base_ZipUtils_isGZipFile(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = cocos2d::ZipUtils::isGZipFile(ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_base_ZipUtils_setPvrEncryptionKeyPart(JNIEnv* env, jclass cls, jint arg0, jint arg1) {
    jthrowable exc = NULL;
    try {
        cocos2d::ZipUtils::setPvrEncryptionKeyPart(arg0, (unsigned int)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_base_ZipUtils_setPvrEncryptionKey(JNIEnv* env, jclass cls, jint arg0, jint arg1, jint arg2, jint arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::ZipUtils::setPvrEncryptionKey((unsigned int)arg0, (unsigned int)arg1, (unsigned int)arg2, (unsigned int)arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jstring JNICALL Java_org_ccj_Component_getName(JNIEnv* env, jobject obj) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Component_init(JNIEnv* env, jobject obj) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Component_setName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Component_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Component* rptr = cocos2d::Component::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Component_getOwner(JNIEnv* env, jobject obj) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getOwner();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Component_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Component_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Component_setOwner(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Component* ptr = (cocos2d::Component*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setOwner(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_Configuration_getValue(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Value* ptr1 = arg1 == NULL ? NULL : (cocos2d::Value*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Value* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Value*)&ptr->getValue((std::string&)adapter0, *(const cocos2d::Value*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Configuration_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Configuration* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Configuration::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 25);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_init(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Configuration_setValue(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Value* ptr1 = arg1 == NULL ? NULL : (cocos2d::Value*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setValue((std::string&)adapter0, *(const cocos2d::Value*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_Configuration_getInfo(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getInfo());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsATITC(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsATITC();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsNPOT(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsNPOT();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Configuration_gatherGPUInfo(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->gatherGPUInfo();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Configuration_loadConfigFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->loadConfigFile((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsBGRA8888(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsBGRA8888();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsETC(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsETC();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsS3TC(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsS3TC();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsPVRTC(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsPVRTC();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Configuration_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::Configuration::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_Configuration_getMaxTextureSize(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMaxTextureSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_checkForGLExtension(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->checkForGLExtension((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_Configuration_getMaxTextureUnits(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMaxTextureUnits();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_Configuration_getMaxModelviewStackDepth(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMaxModelviewStackDepth();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsShareableVAO(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsShareableVAO();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Configuration_supportsDiscardFramebuffer(JNIEnv* env, jobject obj) {
    cocos2d::Configuration* ptr = (cocos2d::Configuration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->supportsDiscardFramebuffer();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_Console_log(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Console* ptr = (cocos2d::Console*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->log(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Console_stop(JNIEnv* env, jobject obj) {
    cocos2d::Console* ptr = (cocos2d::Console*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stop();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Console_listenOnTCP(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Console* ptr = (cocos2d::Console*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->listenOnTCP(arg0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Console_listenOnFileDescriptor(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Console* ptr = (cocos2d::Console*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->listenOnFileDescriptor(arg0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_AccelAmplitude_clone(JNIEnv* env, jobject obj) {
    cocos2d::AccelAmplitude* ptr = (cocos2d::AccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::AccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_AccelAmplitude_reverse(JNIEnv* env, jobject obj) {
    cocos2d::AccelAmplitude* ptr = (cocos2d::AccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::AccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_AccelAmplitude_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::Action* ptr0 = arg0 == NULL ? NULL : (cocos2d::Action*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::AccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::AccelAmplitude::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_AccelAmplitude_setRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::AccelAmplitude* ptr = (cocos2d::AccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_AccelAmplitude_getRate(JNIEnv* env, jobject obj) {
    cocos2d::AccelAmplitude* ptr = (cocos2d::AccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_AccelDeccelAmplitude_clone(JNIEnv* env, jobject obj) {
    cocos2d::AccelDeccelAmplitude* ptr = (cocos2d::AccelDeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::AccelDeccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_AccelDeccelAmplitude_reverse(JNIEnv* env, jobject obj) {
    cocos2d::AccelDeccelAmplitude* ptr = (cocos2d::AccelDeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::AccelDeccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_AccelDeccelAmplitude_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::Action* ptr0 = arg0 == NULL ? NULL : (cocos2d::Action*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::AccelDeccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::AccelDeccelAmplitude::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_AccelDeccelAmplitude_setRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::AccelDeccelAmplitude* ptr = (cocos2d::AccelDeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_AccelDeccelAmplitude_getRate(JNIEnv* env, jobject obj) {
    cocos2d::AccelDeccelAmplitude* ptr = (cocos2d::AccelDeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Action_clone(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Action* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_update(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->update(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_stop(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stop();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Action_getTarget(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTarget();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_setTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Action_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Action* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_action_Action_isDone(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isDone();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_action_Action_description(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->description());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_action_Action_getTag(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_setTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_startWithTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->startWithTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_step(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->step(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Action_getOriginalTarget(JNIEnv* env, jobject obj) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getOriginalTarget();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Action_setOriginalTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Action* ptr = (cocos2d::Action*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setOriginalTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionCamera_clone(JNIEnv* env, jobject obj) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionCamera* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionCamera_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionCamera* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionCamera_getCenter(JNIEnv* env, jobject obj) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)&ptr->getCenter();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionCamera_setEye__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEye(*(const cocos2d::Vec3*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionCamera_setEye__FFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEye(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionCamera_getEye(JNIEnv* env, jobject obj) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)&ptr->getEye();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionCamera_setCenter(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCenter(*(const cocos2d::Vec3*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionCamera_getUp(JNIEnv* env, jobject obj) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)&ptr->getUp();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionCamera_setUp(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionCamera* ptr = (cocos2d::ActionCamera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUp(*(const cocos2d::Vec3*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionEase_clone(JNIEnv* env, jobject obj) {
    cocos2d::ActionEase* ptr = (cocos2d::ActionEase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionEase_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ActionEase* ptr = (cocos2d::ActionEase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionInstant_clone(JNIEnv* env, jobject obj) {
    cocos2d::ActionInstant* ptr = (cocos2d::ActionInstant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInstant* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 32);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionInstant_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ActionInstant* ptr = (cocos2d::ActionInstant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInstant* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 32);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionInterval_clone(JNIEnv* env, jobject obj) {
    cocos2d::ActionInterval* ptr = (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInterval* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionInterval_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ActionInterval* ptr = (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInterval* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_ActionInterval_getElapsed(JNIEnv* env, jobject obj) {
    cocos2d::ActionInterval* ptr = (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getElapsed();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_ActionInterval_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::ActionInterval* ptr = (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionInterval_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ActionInterval* ptr = (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionManager_getActionByTag(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Node* ptr1 = arg1 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Action* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getActionByTag(arg0, (const cocos2d::Node*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_addAction(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jboolean arg2) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Action* ptr0 = arg0 == NULL ? NULL : (cocos2d::Action*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Node* ptr1 = arg1 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addAction(ptr0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_removeAction(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Action* ptr0 = arg0 == NULL ? NULL : (cocos2d::Action*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeAction(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_resumeTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->resumeTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_pauseTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->pauseTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_removeAllActions(JNIEnv* env, jobject obj) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllActions();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_removeActionByTag(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr1 = arg1 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeActionByTag(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ActionManager_removeAllActionsFromTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ActionManager* ptr = (cocos2d::ActionManager*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeAllActionsFromTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionTween_clone(JNIEnv* env, jobject obj) {
    cocos2d::ActionTween* ptr = (cocos2d::ActionTween*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionTween* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ActionTween_create(JNIEnv* env, jclass cls, jfloat arg0, jstring arg1, jfloat arg2, jfloat arg3) {
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::ActionTween* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ActionTween::create(arg0, (std::string&)adapter1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Animate_clone(JNIEnv* env, jobject obj) {
    cocos2d::Animate* ptr = (cocos2d::Animate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Animate* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 35);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Animate_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Animate* ptr = (cocos2d::Animate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Animate* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 35);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Animate_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Animation* ptr0 = arg0 == NULL ? NULL : (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Animate* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Animate::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 35);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Animate_setAnimation(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Animate* ptr = (cocos2d::Animate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Animation* ptr0 = arg0 == NULL ? NULL : (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setAnimation(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Animate_getAnimation(JNIEnv* env, jobject obj) {
    cocos2d::Animate* ptr = (cocos2d::Animate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Animation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getAnimation();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 36);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_BezierBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::BezierBy* ptr = (cocos2d::BezierBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::BezierBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_BezierBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::BezierBy* ptr = (cocos2d::BezierBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::BezierBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_BezierBy_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::ccBezierConfig* ptr1 = arg1 == NULL ? NULL : (cocos2d::ccBezierConfig*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::BezierBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::BezierBy::create(arg0, *(const cocos2d::ccBezierConfig*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d2_action_BezierConfig_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::ccBezierConfig* rptr = new cocos2d::ccBezierConfig();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_d2_action_BezierConfig_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_BezierConfig_setControlPoint1(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ccBezierConfig* ptr = (cocos2d::ccBezierConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    ptr->controlPoint_1 = *ptr0;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_BezierConfig_setEndPosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ccBezierConfig* ptr = (cocos2d::ccBezierConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    ptr->endPosition = *ptr0;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_BezierConfig_setControlPoint2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ccBezierConfig* ptr = (cocos2d::ccBezierConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    ptr->controlPoint_2 = *ptr0;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_BezierTo_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::ccBezierConfig* ptr1 = arg1 == NULL ? NULL : (cocos2d::ccBezierConfig*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::BezierTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::BezierTo::create(arg0, *(const cocos2d::ccBezierConfig*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 38);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Blink_clone(JNIEnv* env, jobject obj) {
    cocos2d::Blink* ptr = (cocos2d::Blink*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Blink* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 39);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Blink_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Blink* ptr = (cocos2d::Blink*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Blink* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 39);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Blink_create(JNIEnv* env, jclass cls, jfloat arg0, jint arg1) {
    jobject rarg = NULL;
    cocos2d::Blink* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Blink::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 39);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d2_action_CallFunc_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ccj::JavaCallFunc* rptr = ccj::JavaCallFunc::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_d2_action_CallFunc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}


JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_CardinalSplineTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::CardinalSplineTo* ptr = (cocos2d::CardinalSplineTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::CardinalSplineTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 40);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_CardinalSplineTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::CardinalSplineTo* ptr = (cocos2d::CardinalSplineTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::CardinalSplineTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 40);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_CardinalSplineTo_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jfloat arg2) {
    cocos2d::PointArray* ptr1 = arg1 == NULL ? NULL : (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::CardinalSplineTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::CardinalSplineTo::create(arg0, ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 40);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_CardinalSplineTo_setPoints(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::CardinalSplineTo* ptr = (cocos2d::CardinalSplineTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PointArray* ptr0 = arg0 == NULL ? NULL : (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setPoints(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_action_CardinalSplineTo_initWithDuration(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1, jfloat arg2) {
    cocos2d::CardinalSplineTo* ptr = (cocos2d::CardinalSplineTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::PointArray* ptr1 = arg1 == NULL ? NULL : (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithDuration(arg0, ptr1, arg2);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_CardinalSplineTo_getPoints(JNIEnv* env, jobject obj) {
    cocos2d::CardinalSplineTo* ptr = (cocos2d::CardinalSplineTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PointArray* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPoints();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_CardinalSplineTo_updatePosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::CardinalSplineTo* ptr = (cocos2d::CardinalSplineTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updatePosition(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_DeccelAmplitude_clone(JNIEnv* env, jobject obj) {
    cocos2d::DeccelAmplitude* ptr = (cocos2d::DeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::DeccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 41);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_DeccelAmplitude_reverse(JNIEnv* env, jobject obj) {
    cocos2d::DeccelAmplitude* ptr = (cocos2d::DeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::DeccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 41);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_DeccelAmplitude_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::Action* ptr0 = arg0 == NULL ? NULL : (cocos2d::Action*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::DeccelAmplitude* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::DeccelAmplitude::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 41);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_DeccelAmplitude_setRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::DeccelAmplitude* ptr = (cocos2d::DeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_DeccelAmplitude_getRate(JNIEnv* env, jobject obj) {
    cocos2d::DeccelAmplitude* ptr = (cocos2d::DeccelAmplitude*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_DelayTime_clone(JNIEnv* env, jobject obj) {
    cocos2d::DelayTime* ptr = (cocos2d::DelayTime*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::DelayTime* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 42);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_DelayTime_update(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::DelayTime* ptr = (cocos2d::DelayTime*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->update(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_DelayTime_reverse(JNIEnv* env, jobject obj) {
    cocos2d::DelayTime* ptr = (cocos2d::DelayTime*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::DelayTime* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 42);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_DelayTime_create(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::DelayTime* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::DelayTime::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 42);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBackIn* ptr = (cocos2d::EaseBackIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBackIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 43);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_EaseBackIn_update(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::EaseBackIn* ptr = (cocos2d::EaseBackIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->update(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBackIn* ptr = (cocos2d::EaseBackIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackIn_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBackIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBackIn::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 43);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackInOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBackInOut* ptr = (cocos2d::EaseBackInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBackInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackInOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBackInOut* ptr = (cocos2d::EaseBackInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBackInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackInOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBackInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBackInOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBackOut* ptr = (cocos2d::EaseBackOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBackOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBackOut* ptr = (cocos2d::EaseBackOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBackOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBackOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBackOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBezierAction_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBezierAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBezierAction::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 46);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_EaseBezierAction_setBezierParamer(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::EaseBezierAction* ptr = (cocos2d::EaseBezierAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBezierParamer(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounce_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounce* ptr = (cocos2d::EaseBounce*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounce* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 47);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounce_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounce* ptr = (cocos2d::EaseBounce*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounce* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 47);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounceIn* ptr = (cocos2d::EaseBounceIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounceIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 48);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_EaseBounceIn_update(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::EaseBounceIn* ptr = (cocos2d::EaseBounceIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->update(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounceIn* ptr = (cocos2d::EaseBounceIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounce* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 47);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceIn_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBounceIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBounceIn::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 48);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceInOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounceInOut* ptr = (cocos2d::EaseBounceInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounceInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 49);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_EaseBounceInOut_update(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::EaseBounceInOut* ptr = (cocos2d::EaseBounceInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->update(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceInOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounceInOut* ptr = (cocos2d::EaseBounceInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounceInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 49);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceInOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBounceInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBounceInOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 49);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounceOut* ptr = (cocos2d::EaseBounceOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounceOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 50);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseBounceOut* ptr = (cocos2d::EaseBounceOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseBounce* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 47);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseBounceOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseBounceOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseBounceOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 50);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElastic_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseElastic* ptr = (cocos2d::EaseElastic*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElastic* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 51);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElastic_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseElastic* ptr = (cocos2d::EaseElastic*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElastic* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 51);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_EaseElastic_setPeriod(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::EaseElastic* ptr = (cocos2d::EaseElastic*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPeriod(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_EaseElastic_getPeriod(JNIEnv* env, jobject obj) {
    cocos2d::EaseElastic* ptr = (cocos2d::EaseElastic*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPeriod();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseElasticIn* ptr = (cocos2d::EaseElasticIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElasticIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 52);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseElasticIn* ptr = (cocos2d::EaseElasticIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElastic* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 51);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticIn_create__Lorg_ccj_d2_action_ActionInterval_2F(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseElasticIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseElasticIn::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 52);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticIn_create__Lorg_ccj_d2_action_ActionInterval_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseElasticIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseElasticIn::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 52);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticInOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseElasticInOut* ptr = (cocos2d::EaseElasticInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElasticInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 53);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticInOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseElasticInOut* ptr = (cocos2d::EaseElasticInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElasticInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 53);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticInOut_create__Lorg_ccj_d2_action_ActionInterval_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseElasticInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseElasticInOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 53);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticInOut_create__Lorg_ccj_d2_action_ActionInterval_2F(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseElasticInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseElasticInOut::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 53);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseElasticOut* ptr = (cocos2d::EaseElasticOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElasticOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 54);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseElasticOut* ptr = (cocos2d::EaseElasticOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseElastic* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 51);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticOut_create__Lorg_ccj_d2_action_ActionInterval_2F(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseElasticOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseElasticOut::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 54);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseElasticOut_create__Lorg_ccj_d2_action_ActionInterval_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseElasticOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseElasticOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 54);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseExponentialIn* ptr = (cocos2d::EaseExponentialIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseExponentialIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 55);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseExponentialIn* ptr = (cocos2d::EaseExponentialIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialIn_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseExponentialIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseExponentialIn::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 55);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialInOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseExponentialInOut* ptr = (cocos2d::EaseExponentialInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseExponentialInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 56);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialInOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseExponentialInOut* ptr = (cocos2d::EaseExponentialInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseExponentialInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 56);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialInOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseExponentialInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseExponentialInOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 56);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseExponentialOut* ptr = (cocos2d::EaseExponentialOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseExponentialOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 57);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseExponentialOut* ptr = (cocos2d::EaseExponentialOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseExponentialOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseExponentialOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseExponentialOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 57);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseIn* ptr = (cocos2d::EaseIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 58);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseIn* ptr = (cocos2d::EaseIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 58);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseIn_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseIn::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 58);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseInOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseInOut* ptr = (cocos2d::EaseInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 59);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseInOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseInOut* ptr = (cocos2d::EaseInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 59);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseInOut_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseInOut::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 59);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseOut* ptr = (cocos2d::EaseOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 60);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseOut* ptr = (cocos2d::EaseOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 60);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseOut_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseOut::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 60);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseRateAction_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseRateAction* ptr = (cocos2d::EaseRateAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseRateAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 61);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseRateAction_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseRateAction* ptr = (cocos2d::EaseRateAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseRateAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 61);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_EaseRateAction_setRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::EaseRateAction* ptr = (cocos2d::EaseRateAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_EaseRateAction_getRate(JNIEnv* env, jobject obj) {
    cocos2d::EaseRateAction* ptr = (cocos2d::EaseRateAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseSineIn* ptr = (cocos2d::EaseSineIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseSineIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 62);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseSineIn* ptr = (cocos2d::EaseSineIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineIn_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseSineIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseSineIn::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 62);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineInOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseSineInOut* ptr = (cocos2d::EaseSineInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseSineInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 63);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineInOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseSineInOut* ptr = (cocos2d::EaseSineInOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseSineInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 63);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineInOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseSineInOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseSineInOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 63);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::EaseSineOut* ptr = (cocos2d::EaseSineOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EaseSineOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 64);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::EaseSineOut* ptr = (cocos2d::EaseSineOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionEase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_EaseSineOut_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::EaseSineOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::EaseSineOut::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 64);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeIn_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeIn* ptr = (cocos2d::FadeIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 65);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeIn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::FadeIn* ptr = (cocos2d::FadeIn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInterval* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeIn_create(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::FadeIn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeIn::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 65);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOut_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeOut* ptr = (cocos2d::FadeOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 66);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOut_reverse(JNIEnv* env, jobject obj) {
    cocos2d::FadeOut* ptr = (cocos2d::FadeOut*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInterval* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOut_create(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::FadeOut* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeOut::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 66);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutBLTiles_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeOutBLTiles* ptr = (cocos2d::FadeOutBLTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutBLTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 67);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutBLTiles_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutBLTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeOutBLTiles::create(arg0, *(const cocos2d::Size*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 67);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_FadeOutBLTiles_testFunc(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::FadeOutBLTiles* ptr = (cocos2d::FadeOutBLTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->testFunc(*(const cocos2d::Size*)ptr0, arg1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutDownTiles_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeOutDownTiles* ptr = (cocos2d::FadeOutDownTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutDownTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 68);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutDownTiles_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutDownTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeOutDownTiles::create(arg0, *(const cocos2d::Size*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 68);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_FadeOutDownTiles_testFunc(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::FadeOutDownTiles* ptr = (cocos2d::FadeOutDownTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->testFunc(*(const cocos2d::Size*)ptr0, arg1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutTRTiles_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeOutTRTiles* ptr = (cocos2d::FadeOutTRTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutTRTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 69);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutTRTiles_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutTRTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeOutTRTiles::create(arg0, *(const cocos2d::Size*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 69);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_FadeOutTRTiles_turnOnTile(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::FadeOutTRTiles* ptr = (cocos2d::FadeOutTRTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->turnOnTile(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_FadeOutTRTiles_transformTile(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::FadeOutTRTiles* ptr = (cocos2d::FadeOutTRTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->transformTile(*(const cocos2d::Vec2*)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_FadeOutTRTiles_testFunc(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::FadeOutTRTiles* ptr = (cocos2d::FadeOutTRTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->testFunc(*(const cocos2d::Size*)ptr0, arg1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_FadeOutTRTiles_turnOffTile(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::FadeOutTRTiles* ptr = (cocos2d::FadeOutTRTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->turnOffTile(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutUpTiles_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeOutUpTiles* ptr = (cocos2d::FadeOutUpTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutUpTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 70);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeOutUpTiles_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeOutUpTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeOutUpTiles::create(arg0, *(const cocos2d::Size*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 70);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_FadeOutUpTiles_transformTile(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::FadeOutUpTiles* ptr = (cocos2d::FadeOutUpTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->transformTile(*(const cocos2d::Vec2*)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::FadeTo* ptr = (cocos2d::FadeTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 71);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::FadeTo* ptr = (cocos2d::FadeTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FadeTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 71);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FadeTo_create(JNIEnv* env, jclass cls, jfloat arg0, jbyte arg1) {
    jobject rarg = NULL;
    cocos2d::FadeTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FadeTo::create(arg0, (GLubyte)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 71);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FiniteTimeAction_clone(JNIEnv* env, jobject obj) {
    cocos2d::FiniteTimeAction* ptr = (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FiniteTimeAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 72);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FiniteTimeAction_reverse(JNIEnv* env, jobject obj) {
    cocos2d::FiniteTimeAction* ptr = (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FiniteTimeAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 72);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_FiniteTimeAction_getDuration(JNIEnv* env, jobject obj) {
    cocos2d::FiniteTimeAction* ptr = (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDuration();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_FiniteTimeAction_setDuration(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::FiniteTimeAction* ptr = (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDuration(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipX_clone(JNIEnv* env, jobject obj) {
    cocos2d::FlipX* ptr = (cocos2d::FlipX*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 73);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipX_reverse(JNIEnv* env, jobject obj) {
    cocos2d::FlipX* ptr = (cocos2d::FlipX*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 73);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipX_create(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    cocos2d::FlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FlipX::create((bool)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 73);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipX3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::FlipX3D* ptr = (cocos2d::FlipX3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FlipX3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 74);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipX3D_create(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::FlipX3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FlipX3D::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 74);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipY_clone(JNIEnv* env, jobject obj) {
    cocos2d::FlipY* ptr = (cocos2d::FlipY*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 75);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipY_reverse(JNIEnv* env, jobject obj) {
    cocos2d::FlipY* ptr = (cocos2d::FlipY*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 75);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipY_create(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    cocos2d::FlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FlipY::create((bool)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 75);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipY3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::FlipY3D* ptr = (cocos2d::FlipY3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::FlipY3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 76);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_FlipY3D_create(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::FlipY3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::FlipY3D::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 76);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Follow_clone(JNIEnv* env, jobject obj) {
    cocos2d::Follow* ptr = (cocos2d::Follow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Follow* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 77);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Follow_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Follow* ptr = (cocos2d::Follow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Follow* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 77);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Follow_create(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Follow* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Follow::create(ptr0, *(const cocos2d::Rect*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 77);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_action_Follow_isBoundarySet(JNIEnv* env, jobject obj) {
    cocos2d::Follow* ptr = (cocos2d::Follow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isBoundarySet();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Follow_setBoudarySet(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Follow* ptr = (cocos2d::Follow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBoudarySet((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Grid3DAction_clone(JNIEnv* env, jobject obj) {
    cocos2d::Grid3DAction* ptr = (cocos2d::Grid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Grid3DAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 78);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Grid3DAction_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Grid3DAction* ptr = (cocos2d::Grid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 79);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Grid3DAction_getVertex(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Grid3DAction* ptr = (cocos2d::Grid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vertex3F* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vertex3F(ptr->getVertex(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Vertex3F_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 80);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Grid3DAction_getGrid(JNIEnv* env, jobject obj) {
    cocos2d::Grid3DAction* ptr = (cocos2d::Grid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridBase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGrid();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 81);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Grid3DAction_setVertex(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Grid3DAction* ptr = (cocos2d::Grid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vertex3F* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vertex3F*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVertex(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vertex3F*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Grid3DAction_getOriginalVertex(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Grid3DAction* ptr = (cocos2d::Grid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vertex3F* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vertex3F(ptr->getOriginalVertex(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Vertex3F_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 80);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_GridAction_clone(JNIEnv* env, jobject obj) {
    cocos2d::GridAction* ptr = (cocos2d::GridAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 79);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_GridAction_reverse(JNIEnv* env, jobject obj) {
    cocos2d::GridAction* ptr = (cocos2d::GridAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 79);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_GridAction_getGrid(JNIEnv* env, jobject obj) {
    cocos2d::GridAction* ptr = (cocos2d::GridAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridBase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGrid();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 81);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Hide_clone(JNIEnv* env, jobject obj) {
    cocos2d::Hide* ptr = (cocos2d::Hide*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Hide* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 82);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Hide_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Hide* ptr = (cocos2d::Hide*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInstant* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 32);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Hide_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Hide* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Hide::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 82);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::JumpBy* ptr = (cocos2d::JumpBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 83);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::JumpBy* ptr = (cocos2d::JumpBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 83);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpBy_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jfloat arg2, jint arg3) {
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::JumpBy::create(arg0, *(const cocos2d::Vec2*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 83);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpTiles3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::JumpTiles3D* ptr = (cocos2d::JumpTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 84);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpTiles3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jfloat arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::JumpTiles3D::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 84);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_JumpTiles3D_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::JumpTiles3D* ptr = (cocos2d::JumpTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_JumpTiles3D_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::JumpTiles3D* ptr = (cocos2d::JumpTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_JumpTiles3D_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::JumpTiles3D* ptr = (cocos2d::JumpTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_JumpTiles3D_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::JumpTiles3D* ptr = (cocos2d::JumpTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::JumpTo* ptr = (cocos2d::JumpTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 85);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::JumpTo* ptr = (cocos2d::JumpTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 85);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_JumpTo_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jfloat arg2, jint arg3) {
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::JumpTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::JumpTo::create(arg0, *(const cocos2d::Vec2*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 85);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Lens3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::Lens3D* ptr = (cocos2d::Lens3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Lens3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Lens3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jobject arg2, jfloat arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Lens3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Lens3D::create(arg0, *(const cocos2d::Size*)ptr1, *(const cocos2d::Vec2*)ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Lens3D_getPosition(JNIEnv* env, jobject obj) {
    cocos2d::Lens3D* ptr = (cocos2d::Lens3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPosition();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Lens3D_getLensEffect(JNIEnv* env, jobject obj) {
    cocos2d::Lens3D* ptr = (cocos2d::Lens3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLensEffect();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Lens3D_setLensEffect(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Lens3D* ptr = (cocos2d::Lens3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLensEffect(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Lens3D_setPosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Lens3D* ptr = (cocos2d::Lens3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Lens3D_setConcave(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Lens3D* ptr = (cocos2d::Lens3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setConcave((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Liquid_clone(JNIEnv* env, jobject obj) {
    cocos2d::Liquid* ptr = (cocos2d::Liquid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Liquid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 87);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Liquid_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jfloat arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Liquid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Liquid::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 87);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Liquid_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::Liquid* ptr = (cocos2d::Liquid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Liquid_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Liquid* ptr = (cocos2d::Liquid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Liquid_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::Liquid* ptr = (cocos2d::Liquid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Liquid_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Liquid* ptr = (cocos2d::Liquid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_MoveBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::MoveBy* ptr = (cocos2d::MoveBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MoveBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 88);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_MoveBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::MoveBy* ptr = (cocos2d::MoveBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MoveBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 88);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_MoveBy_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MoveBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MoveBy::create(arg0, *(const cocos2d::Vec2*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 88);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_MoveTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::MoveTo* ptr = (cocos2d::MoveTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MoveTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 89);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_MoveTo_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MoveTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MoveTo::create(arg0, *(const cocos2d::Vec2*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 89);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_PageTurn3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::PageTurn3D* ptr = (cocos2d::PageTurn3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PageTurn3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 90);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_PageTurn3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PageTurn3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PageTurn3D::create(arg0, *(const cocos2d::Size*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 90);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Place_clone(JNIEnv* env, jobject obj) {
    cocos2d::Place* ptr = (cocos2d::Place*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Place* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 91);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Place_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Place* ptr = (cocos2d::Place*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Place* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 91);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Place_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Place* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Place::create(*(const cocos2d::Vec2*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 91);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ProgressFromTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::ProgressFromTo* ptr = (cocos2d::ProgressFromTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ProgressFromTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 92);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ProgressFromTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ProgressFromTo* ptr = (cocos2d::ProgressFromTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ProgressFromTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 92);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ProgressFromTo_create(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::ProgressFromTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ProgressFromTo::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 92);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ProgressTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTo* ptr = (cocos2d::ProgressTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ProgressTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 93);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ProgressTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTo* ptr = (cocos2d::ProgressTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ProgressTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 93);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ProgressTo_create(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1) {
    jobject rarg = NULL;
    cocos2d::ProgressTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ProgressTo::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 93);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RemoveSelf_clone(JNIEnv* env, jobject obj) {
    cocos2d::RemoveSelf* ptr = (cocos2d::RemoveSelf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RemoveSelf* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 94);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RemoveSelf_reverse(JNIEnv* env, jobject obj) {
    cocos2d::RemoveSelf* ptr = (cocos2d::RemoveSelf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RemoveSelf* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 94);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RemoveSelf_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::RemoveSelf* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RemoveSelf::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 94);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Repeat_clone(JNIEnv* env, jobject obj) {
    cocos2d::Repeat* ptr = (cocos2d::Repeat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Repeat* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 95);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Repeat_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Repeat* ptr = (cocos2d::Repeat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Repeat* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 95);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Repeat_create(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Repeat* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Repeat::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 95);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RepeatForever_clone(JNIEnv* env, jobject obj) {
    cocos2d::RepeatForever* ptr = (cocos2d::RepeatForever*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RepeatForever* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 96);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RepeatForever_reverse(JNIEnv* env, jobject obj) {
    cocos2d::RepeatForever* ptr = (cocos2d::RepeatForever*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RepeatForever* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 96);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RepeatForever_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::RepeatForever* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RepeatForever::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 96);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ReuseGrid_clone(JNIEnv* env, jobject obj) {
    cocos2d::ReuseGrid* ptr = (cocos2d::ReuseGrid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ReuseGrid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 97);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ReuseGrid_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ReuseGrid* ptr = (cocos2d::ReuseGrid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ReuseGrid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 97);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ReuseGrid_create(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ReuseGrid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ReuseGrid::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 97);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ReverseTime_clone(JNIEnv* env, jobject obj) {
    cocos2d::ReverseTime* ptr = (cocos2d::ReverseTime*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ReverseTime* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 98);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ReverseTime_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ReverseTime* ptr = (cocos2d::ReverseTime*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ReverseTime* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 98);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ReverseTime_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::ReverseTime* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ReverseTime::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 98);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Ripple3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Ripple3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 99);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Ripple3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jobject arg2, jfloat arg3, jint arg4, jfloat arg5) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Ripple3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Ripple3D::create(arg0, *(const cocos2d::Size*)ptr1, *(const cocos2d::Vec2*)ptr2, arg3, arg4, arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 99);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Ripple3D_getPosition(JNIEnv* env, jobject obj) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPosition();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Ripple3D_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Ripple3D_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Ripple3D_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Ripple3D_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Ripple3D_setPosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Ripple3D* ptr = (cocos2d::Ripple3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::RotateBy* ptr = (cocos2d::RotateBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RotateBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 100);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::RotateBy* ptr = (cocos2d::RotateBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RotateBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 100);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateBy_create__FFF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::RotateBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RotateBy::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 100);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateBy_create__FF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1) {
    jobject rarg = NULL;
    cocos2d::RotateBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RotateBy::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 100);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateBy_create__FLorg_ccj_math_Vec3_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RotateBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RotateBy::create(arg0, *(const cocos2d::Vec3*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 100);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::RotateTo* ptr = (cocos2d::RotateTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RotateTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 101);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::RotateTo* ptr = (cocos2d::RotateTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::RotateTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 101);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateTo_create__FFF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::RotateTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RotateTo::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 101);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_RotateTo_create__FF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1) {
    jobject rarg = NULL;
    cocos2d::RotateTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::RotateTo::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 101);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::ScaleBy* ptr = (cocos2d::ScaleBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ScaleBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 102);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ScaleBy* ptr = (cocos2d::ScaleBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ScaleBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 102);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleBy_create__FFF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::ScaleBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ScaleBy::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 102);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleBy_create__FF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1) {
    jobject rarg = NULL;
    cocos2d::ScaleBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ScaleBy::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 102);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::ScaleTo* ptr = (cocos2d::ScaleTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ScaleTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 103);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ScaleTo* ptr = (cocos2d::ScaleTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ScaleTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 103);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleTo_create__FF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1) {
    jobject rarg = NULL;
    cocos2d::ScaleTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ScaleTo::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 103);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ScaleTo_create__FFF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::ScaleTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ScaleTo::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 103);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_clone(JNIEnv* env, jobject obj) {
    cocos2d::Sequence* ptr = (cocos2d::Sequence*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Sequence* ptr = (cocos2d::Sequence*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr2 = arg2 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr3 = arg3 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::create(ptr0, ptr1, ptr2, ptr3, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr2 = arg2 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::create(ptr0, ptr1, ptr2, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::create(ptr0, ptr1, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_create__Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::create(ptr0, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jint arg6) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr2 = arg2 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr3 = arg3 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr4 = arg4 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr5 = arg5 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::create(ptr0, ptr1, ptr2, ptr3, ptr4, ptr5, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jint arg5) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr2 = arg2 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr3 = arg3 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr4 = arg4 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::create(ptr0, ptr1, ptr2, ptr3, ptr4, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Sequence_createWithTwoActions(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sequence* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sequence::createWithTwoActions(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 104);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Shaky3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::Shaky3D* ptr = (cocos2d::Shaky3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Shaky3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 105);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Shaky3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jboolean arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Shaky3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Shaky3D::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 105);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShakyTiles3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::ShakyTiles3D* ptr = (cocos2d::ShakyTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ShakyTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 106);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShakyTiles3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jboolean arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ShakyTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ShakyTiles3D::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 106);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShatteredTiles3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::ShatteredTiles3D* ptr = (cocos2d::ShatteredTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ShatteredTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 107);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShatteredTiles3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jboolean arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ShatteredTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ShatteredTiles3D::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 107);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Show_clone(JNIEnv* env, jobject obj) {
    cocos2d::Show* ptr = (cocos2d::Show*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Show* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 108);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Show_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Show* ptr = (cocos2d::Show*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInstant* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 32);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Show_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Show* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Show::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 108);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShuffleTiles_clone(JNIEnv* env, jobject obj) {
    cocos2d::ShuffleTiles* ptr = (cocos2d::ShuffleTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ShuffleTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 109);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_ShuffleTiles_shuffle(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::ShuffleTiles* ptr = (cocos2d::ShuffleTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->shuffle((unsigned int *)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShuffleTiles_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ShuffleTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ShuffleTiles::create(arg0, *(const cocos2d::Size*)ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 109);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ShuffleTiles_getDelta(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ShuffleTiles* ptr = (cocos2d::ShuffleTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Size(ptr->getDelta(*(const cocos2d::Size*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Size_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SkewBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::SkewBy* ptr = (cocos2d::SkewBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SkewBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 111);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SkewBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::SkewBy* ptr = (cocos2d::SkewBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SkewBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 111);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SkewBy_create(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::SkewBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SkewBy::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 111);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SkewTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::SkewTo* ptr = (cocos2d::SkewTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SkewTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 112);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SkewTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::SkewTo* ptr = (cocos2d::SkewTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SkewTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 112);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SkewTo_create(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2) {
    jobject rarg = NULL;
    cocos2d::SkewTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SkewTo::create(arg0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 112);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_clone(JNIEnv* env, jobject obj) {
    cocos2d::Spawn* ptr = (cocos2d::Spawn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Spawn* ptr = (cocos2d::Spawn*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Spawn::create(ptr0, ptr1, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_create__Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Spawn::create(ptr0, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr2 = arg2 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr3 = arg3 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Spawn::create(ptr0, ptr1, ptr2, ptr3, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_create__Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2Lorg_ccj_d2_action_FiniteTimeAction_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr2 = arg2 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Spawn::create(ptr0, ptr1, ptr2, (NULL));
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Spawn_createWithTwoActions(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::FiniteTimeAction* ptr0 = arg0 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::FiniteTimeAction* ptr1 = arg1 == NULL ? NULL : (cocos2d::FiniteTimeAction*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Spawn::createWithTwoActions(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Speed_clone(JNIEnv* env, jobject obj) {
    cocos2d::Speed* ptr = (cocos2d::Speed*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Speed* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 114);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Speed_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Speed* ptr = (cocos2d::Speed*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Speed* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 114);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Speed_create(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Speed* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Speed::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 114);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Speed_getSpeed(JNIEnv* env, jobject obj) {
    cocos2d::Speed* ptr = (cocos2d::Speed*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSpeed();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Speed_setInnerAction(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Speed* ptr = (cocos2d::Speed*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ActionInterval* ptr0 = arg0 == NULL ? NULL : (cocos2d::ActionInterval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setInnerAction(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Speed_setSpeed(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Speed* ptr = (cocos2d::Speed*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSpeed(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Speed_getInnerAction(JNIEnv* env, jobject obj) {
    cocos2d::Speed* ptr = (cocos2d::Speed*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionInterval* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getInnerAction();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SplitCols_clone(JNIEnv* env, jobject obj) {
    cocos2d::SplitCols* ptr = (cocos2d::SplitCols*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SplitCols* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 115);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SplitCols_create(JNIEnv* env, jclass cls, jfloat arg0, jint arg1) {
    jobject rarg = NULL;
    cocos2d::SplitCols* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SplitCols::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 115);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SplitRows_clone(JNIEnv* env, jobject obj) {
    cocos2d::SplitRows* ptr = (cocos2d::SplitRows*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SplitRows* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 116);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_SplitRows_create(JNIEnv* env, jclass cls, jfloat arg0, jint arg1) {
    jobject rarg = NULL;
    cocos2d::SplitRows* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SplitRows::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 116);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_StopGrid_clone(JNIEnv* env, jobject obj) {
    cocos2d::StopGrid* ptr = (cocos2d::StopGrid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::StopGrid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 117);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_StopGrid_reverse(JNIEnv* env, jobject obj) {
    cocos2d::StopGrid* ptr = (cocos2d::StopGrid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::StopGrid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 117);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_StopGrid_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::StopGrid* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::StopGrid::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 117);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TiledGrid3DAction_clone(JNIEnv* env, jobject obj) {
    cocos2d::TiledGrid3DAction* ptr = (cocos2d::TiledGrid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TiledGrid3DAction* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 118);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TiledGrid3DAction_getGrid(JNIEnv* env, jobject obj) {
    cocos2d::TiledGrid3DAction* ptr = (cocos2d::TiledGrid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridBase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGrid();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 81);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TiledGrid3DAction_getTile(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TiledGrid3DAction* ptr = (cocos2d::TiledGrid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Quad3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Quad3(ptr->getTile(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Quad3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 119);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_TiledGrid3DAction_setTile(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::TiledGrid3DAction* ptr = (cocos2d::TiledGrid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Quad3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Quad3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTile(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Quad3*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TiledGrid3DAction_getOriginalTile(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TiledGrid3DAction* ptr = (cocos2d::TiledGrid3DAction*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Quad3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Quad3(ptr->getOriginalTile(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Quad3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 119);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TintBy_clone(JNIEnv* env, jobject obj) {
    cocos2d::TintBy* ptr = (cocos2d::TintBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TintBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 120);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TintBy_reverse(JNIEnv* env, jobject obj) {
    cocos2d::TintBy* ptr = (cocos2d::TintBy*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TintBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 120);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TintBy_create(JNIEnv* env, jclass cls, jfloat arg0, jint arg1, jint arg2, jint arg3) {
    jobject rarg = NULL;
    cocos2d::TintBy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TintBy::create(arg0, (GLshort)arg1, (GLshort)arg2, (GLshort)arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 120);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TintTo_clone(JNIEnv* env, jobject obj) {
    cocos2d::TintTo* ptr = (cocos2d::TintTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TintTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 121);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TintTo_reverse(JNIEnv* env, jobject obj) {
    cocos2d::TintTo* ptr = (cocos2d::TintTo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TintTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 121);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TintTo_create(JNIEnv* env, jclass cls, jfloat arg0, jbyte arg1, jbyte arg2, jbyte arg3) {
    jobject rarg = NULL;
    cocos2d::TintTo* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TintTo::create(arg0, (GLubyte)arg1, (GLubyte)arg2, (GLubyte)arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 121);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ToggleVisibility_clone(JNIEnv* env, jobject obj) {
    cocos2d::ToggleVisibility* ptr = (cocos2d::ToggleVisibility*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ToggleVisibility* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 122);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ToggleVisibility_reverse(JNIEnv* env, jobject obj) {
    cocos2d::ToggleVisibility* ptr = (cocos2d::ToggleVisibility*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ToggleVisibility* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 122);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_ToggleVisibility_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ToggleVisibility* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ToggleVisibility::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 122);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TurnOffTiles_clone(JNIEnv* env, jobject obj) {
    cocos2d::TurnOffTiles* ptr = (cocos2d::TurnOffTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TurnOffTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 123);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_TurnOffTiles_shuffle(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::TurnOffTiles* ptr = (cocos2d::TurnOffTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->shuffle((unsigned int *)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TurnOffTiles_create__FLorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TurnOffTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TurnOffTiles::create(arg0, *(const cocos2d::Size*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 123);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_TurnOffTiles_create__FLorg_ccj_math_Size_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TurnOffTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TurnOffTiles::create(arg0, *(const cocos2d::Size*)ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 123);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_TurnOffTiles_turnOnTile(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TurnOffTiles* ptr = (cocos2d::TurnOffTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->turnOnTile(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_TurnOffTiles_turnOffTile(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TurnOffTiles* ptr = (cocos2d::TurnOffTiles*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->turnOffTile(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Twirl_clone(JNIEnv* env, jobject obj) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Twirl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 124);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Twirl_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jobject arg2, jint arg3, jfloat arg4) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Twirl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Twirl::create(arg0, *(const cocos2d::Size*)ptr1, *(const cocos2d::Vec2*)ptr2, arg3, arg4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 124);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Twirl_getPosition(JNIEnv* env, jobject obj) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPosition();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Twirl_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Twirl_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Twirl_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Twirl_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Twirl_setPosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Twirl* ptr = (cocos2d::Twirl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Waves_clone(JNIEnv* env, jobject obj) {
    cocos2d::Waves* ptr = (cocos2d::Waves*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Waves* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 125);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Waves_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jfloat arg3, jboolean arg4, jboolean arg5) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Waves* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Waves::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3, arg4, arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 125);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Waves_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::Waves* ptr = (cocos2d::Waves*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Waves_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Waves* ptr = (cocos2d::Waves*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Waves_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::Waves* ptr = (cocos2d::Waves*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Waves_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Waves* ptr = (cocos2d::Waves*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Waves3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::Waves3D* ptr = (cocos2d::Waves3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Waves3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 126);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_Waves3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jfloat arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Waves3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Waves3D::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 126);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Waves3D_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::Waves3D* ptr = (cocos2d::Waves3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Waves3D_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Waves3D* ptr = (cocos2d::Waves3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_Waves3D_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::Waves3D* ptr = (cocos2d::Waves3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_Waves3D_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Waves3D* ptr = (cocos2d::Waves3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_WavesTiles3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::WavesTiles3D* ptr = (cocos2d::WavesTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::WavesTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 127);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_action_WavesTiles3D_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2, jfloat arg3) {
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::WavesTiles3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::WavesTiles3D::create(arg0, *(const cocos2d::Size*)ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 127);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_WavesTiles3D_getAmplitudeRate(JNIEnv* env, jobject obj) {
    cocos2d::WavesTiles3D* ptr = (cocos2d::WavesTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitudeRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_WavesTiles3D_setAmplitudeRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::WavesTiles3D* ptr = (cocos2d::WavesTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitudeRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_action_WavesTiles3D_getAmplitude(JNIEnv* env, jobject obj) {
    cocos2d::WavesTiles3D* ptr = (cocos2d::WavesTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAmplitude();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_action_WavesTiles3D_setAmplitude(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::WavesTiles3D* ptr = (cocos2d::WavesTiles3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAmplitude(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_Animation_clone(JNIEnv* env, jobject obj) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Animation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 36);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Animation_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Animation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Animation::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 36);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Animation_getDuration(JNIEnv* env, jobject obj) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDuration();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Animation_addSpriteFrame(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::SpriteFrame* ptr0 = arg0 == NULL ? NULL : (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFrame(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Animation_setDelayPerUnit(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDelayPerUnit(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Animation_getDelayPerUnit(JNIEnv* env, jobject obj) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDelayPerUnit();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Animation_getLoops(JNIEnv* env, jobject obj) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getLoops();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Animation_setLoops(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLoops(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Animation_addSpriteFrameWithTexture(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFrameWithTexture(ptr0, *(const cocos2d::Rect*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Animation_setRestoreOriginalFrame(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRestoreOriginalFrame((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Animation_getTotalDelayUnits(JNIEnv* env, jobject obj) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getTotalDelayUnits();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Animation_getRestoreOriginalFrame(JNIEnv* env, jobject obj) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getRestoreOriginalFrame();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Animation_addSpriteFrameWithFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Animation* ptr = (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFrameWithFile(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_AnimationCache_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::AnimationCache* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::AnimationCache::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 128);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_AnimationCache_getAnimation(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::AnimationCache* ptr = (cocos2d::AnimationCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Animation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getAnimation((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 36);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AnimationCache_addAnimation(JNIEnv* env, jobject obj, jobject arg0, jstring arg1) {
    cocos2d::AnimationCache* ptr = (cocos2d::AnimationCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Animation* ptr0 = arg0 == NULL ? NULL : (cocos2d::Animation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->addAnimation(ptr0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AnimationCache_removeAnimation(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::AnimationCache* ptr = (cocos2d::AnimationCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeAnimation((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AnimationCache_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::AnimationCache::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AnimationCache_addAnimationsWithFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::AnimationCache* ptr = (cocos2d::AnimationCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->addAnimationsWithFile((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_AtlasNode_create(JNIEnv* env, jclass cls, jstring arg0, jint arg1, jint arg2, jint arg3) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::AtlasNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::AtlasNode::create((std::string&)adapter0, arg1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 129);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AtlasNode_setQuadsToDraw(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::AtlasNode* ptr = (cocos2d::AtlasNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setQuadsToDraw(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_AtlasNode_getTexture(JNIEnv* env, jobject obj) {
    cocos2d::AtlasNode* ptr = (cocos2d::AtlasNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTexture();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AtlasNode_setTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AtlasNode* ptr = (cocos2d::AtlasNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_AtlasNode_getQuadsToDraw(JNIEnv* env, jobject obj) {
    cocos2d::AtlasNode* ptr = (cocos2d::AtlasNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getQuadsToDraw();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_AtlasNode_updateAtlasValues(JNIEnv* env, jobject obj) {
    cocos2d::AtlasNode* ptr = (cocos2d::AtlasNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateAtlasValues();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jboolean JNICALL Java_org_ccj_d2_BaseLight_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_BaseLight_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_BaseLight_getLightType(JNIEnv* env, jobject obj) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getLightType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_BaseLight_getIntensity(JNIEnv* env, jobject obj) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getIntensity();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_BaseLight_setIntensity(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setIntensity(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_BaseLight_getLightFlag(JNIEnv* env, jobject obj) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getLightFlag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_BaseLight_setLightFlag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::BaseLight* ptr = (cocos2d::BaseLight*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLightFlag((LightFlag)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jint JNICALL Java_org_ccj_d2_Camera_getType(JNIEnv* env, jobject obj) {
    cocos2d::Camera* ptr = (cocos2d::Camera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Camera_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Camera* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Camera::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Camera_setPosition3D(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Camera* ptr = (cocos2d::Camera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition3D(*(const cocos2d::Vec3*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Camera_setCameraFlag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Camera* ptr = (cocos2d::Camera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCameraFlag((cocos2d::CameraFlag)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Camera_unproject(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Camera* ptr = (cocos2d::Camera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec3* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->unproject(*(const cocos2d::Size*)ptr0, ptr1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Camera_lookAt(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Camera* ptr = (cocos2d::Camera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->lookAt(*(const cocos2d::Vec3*)ptr0, *(const cocos2d::Vec3*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Camera_getCameraFlag(JNIEnv* env, jobject obj) {
    cocos2d::Camera* ptr = (cocos2d::Camera*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getCameraFlag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Camera_createOrthographic(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jobject rarg = NULL;
    cocos2d::Camera* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Camera::createOrthographic(arg0, arg1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Camera_getVisitingCamera(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const cocos2d::Camera* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Camera*)cocos2d::Camera::getVisitingCamera();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Camera_createPerspective(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jobject rarg = NULL;
    cocos2d::Camera* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Camera::createPerspective(arg0, arg1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_ClippingNode_create__Lorg_ccj_d2_Node_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::ClippingNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ClippingNode::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 132);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_ClippingNode_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ClippingNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ClippingNode::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 132);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ClippingNode_setInverted(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ClippingNode* ptr = (cocos2d::ClippingNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setInverted(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_ClippingNode_getStencil(JNIEnv* env, jobject obj) {
    cocos2d::ClippingNode* ptr = (cocos2d::ClippingNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getStencil();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ClippingNode_setStencil(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ClippingNode* ptr = (cocos2d::ClippingNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setStencil(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_ClippingNode_isInverted(JNIEnv* env, jobject obj) {
    cocos2d::ClippingNode* ptr = (cocos2d::ClippingNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isInverted();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ClippingNode_setAlphaThreshold(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ClippingNode* ptr = (cocos2d::ClippingNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAlphaThreshold(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_ClippingNode_getAlphaThreshold(JNIEnv* env, jobject obj) {
    cocos2d::ClippingNode* ptr = (cocos2d::ClippingNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAlphaThreshold();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_clear(JNIEnv* env, jobject obj) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_DrawNode_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::DrawNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::DrawNode::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 133);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_drawDot(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1, jobject arg2) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr2 = arg2 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawDot(*(const cocos2d::Vec2*)ptr0, arg1, *(const cocos2d::Color4F*)ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_drawCubicBezier(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4, jobject arg5) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr5 = arg5 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 5 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawCubicBezier(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3, arg4, *(const cocos2d::Color4F*)ptr5);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_drawPolygon(JNIEnv* env, jobject obj, jobjectArray arg0, jint arg1, jobject arg2, jfloat arg3, jobject arg4) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::Color4F* ptr2 = arg2 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr4 = arg4 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawPolygon(ptr0, arg1, *(const cocos2d::Color4F*)ptr2, arg3, *(const cocos2d::Color4F*)ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_drawTriangle(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr3 = arg3 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawTriangle(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Color4F*)ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_drawSegment(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jfloat arg2, jobject arg3) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr3 = arg3 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawSegment(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, arg2, *(const cocos2d::Color4F*)ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawNode_drawQuadraticBezier(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jint arg3, jobject arg4) {
    cocos2d::DrawNode* ptr = (cocos2d::DrawNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr4 = arg4 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawQuadraticBezier(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, *(const cocos2d::Vec2*)ptr2, arg3, *(const cocos2d::Color4F*)ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_init(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::init();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawPoints(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawPoints(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawCubicBezier(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawCubicBezier(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3, arg4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawSolidCircle__Lorg_ccj_math_Vec2_2FFIFF(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jfloat arg2, jint arg3, jfloat arg4, jfloat arg5) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawSolidCircle(*(const cocos2d::Vec2*)ptr0, arg1, arg2, arg3, arg4, arg5);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawSolidCircle__Lorg_ccj_math_Vec2_2FFI(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jfloat arg2, jint arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawSolidCircle(*(const cocos2d::Vec2*)ptr0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_setPointSize(JNIEnv* env, jclass cls, jfloat arg0) {
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::setPointSize((GLfloat)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawRect(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawRect(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawCircle__Lorg_ccj_math_Vec2_2FFIZ(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jfloat arg2, jint arg3, jboolean arg4) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawCircle(*(const cocos2d::Vec2*)ptr0, arg1, arg2, arg3, arg4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawCircle__Lorg_ccj_math_Vec2_2FFIZFF(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jfloat arg2, jint arg3, jboolean arg4, jfloat arg5, jfloat arg6) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawCircle(*(const cocos2d::Vec2*)ptr0, arg1, arg2, arg3, arg4, arg5, arg6);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawCatmullRom(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::PointArray* ptr0 = arg0 == NULL ? NULL : (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawCatmullRom(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawSolidRect(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Color4F* ptr2 = arg2 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawSolidRect(*ptr0, *ptr1, *ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_setDrawColor4B(JNIEnv* env, jclass cls, jint arg0, jint arg1, jint arg2, jint arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::setDrawColor4B((GLubyte)arg0, (GLubyte)arg1, (GLubyte)arg2, (GLubyte)arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawPoint(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawPoint(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawPoly(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jboolean arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawPoly((const cocos2d::Vec2*)ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawSolidPoly(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Color4F* ptr2 = arg2 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawSolidPoly((const cocos2d::Vec2*)ptr0, arg1, *ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawQuadBezier(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawQuadBezier(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, *(const cocos2d::Vec2*)ptr2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_free(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::free();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_setDrawColor4F(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::setDrawColor4F((GLfloat)arg0, (GLfloat)arg1, (GLfloat)arg2, (GLfloat)arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawLine(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawLine(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_DrawPrimitives_drawCardinalSpline(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jint arg2) {
    cocos2d::PointArray* ptr0 = arg0 == NULL ? NULL : (cocos2d::PointArray*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::DrawPrimitives::drawCardinalSpline(ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_GridBase_create__Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GridBase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GridBase::create(*(const cocos2d::Size*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 81);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_GridBase_create__Lorg_ccj_math_Size_2Lorg_ccj_d2_Texture2D_2Z(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jboolean arg2) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Texture2D* ptr1 = arg1 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::GridBase* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GridBase::create(*(const cocos2d::Size*)ptr0, ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 81);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_GridBase_isActive(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isActive();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_setActive(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setActive((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_GridBase_isTextureFlipped(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isTextureFlipped();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_blit(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->blit();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_reuse(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reuse();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_GridBase_getStep(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getStep();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_GridBase_getReuseGrid(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getReuseGrid();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_beforeDraw(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->beforeDraw();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_set2DProjection(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set2DProjection();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_afterDraw(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->afterDraw(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_setReuseGrid(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setReuseGrid(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_GridBase_initWithSize__Lorg_ccj_math_Size_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithSize(*(const cocos2d::Size*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_GridBase_initWithSize__Lorg_ccj_math_Size_2Lorg_ccj_d2_Texture2D_2Z(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jboolean arg2) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Texture2D* ptr1 = arg1 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithSize(*(const cocos2d::Size*)ptr0, ptr1, arg2);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_GridBase_getGridSize(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getGridSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_setGridSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGridSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_setStep(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStep(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_calculateVertexPoints(JNIEnv* env, jobject obj) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->calculateVertexPoints();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_GridBase_setTextureFlipped(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::GridBase* ptr = (cocos2d::GridBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextureFlipped((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_Label_getString(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getString());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_getDimensions(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getDimensions();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithTTF(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jfloat arg2, jobject arg3, jint arg4, jint arg5) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    cocos2d::Size* ptr3 = arg3 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithTTF((std::string&)adapter0, (std::string&)adapter1, arg2, *(const cocos2d::Size*)ptr3, (cocos2d::TextHAlignment)arg4, (cocos2d::TextVAlignment)arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithBMFont(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jint arg2, jint arg3, jobject arg4) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    cocos2d::Vec2* ptr4 = arg4 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithBMFont((std::string&)adapter0, (std::string&)adapter1, (cocos2d::TextHAlignment)arg2, arg3, *(const cocos2d::Vec2*)ptr4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setWidth(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setWidth(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_getTextColor(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color4B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color4B*)&ptr->getTextColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 135);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getStringLength(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getStringLength();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setHeight(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setHeight(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Label_setCharMap__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->setCharMap((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Label_setCharMap__Ljava_lang_String_2III(JNIEnv* env, jobject obj, jstring arg0, jint arg1, jint arg2, jint arg3) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->setCharMap((std::string&)adapter0, arg1, arg2, arg3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Label_setCharMap__Lorg_ccj_d2_Texture2D_2III(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jint arg2, jint arg3) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->setCharMap(ptr0, arg1, arg2, arg3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_enableOutline(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->enableOutline(*(const cocos2d::Color4B*)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setString(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setString((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setAlignment__I(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAlignment((cocos2d::TextHAlignment)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setAlignment__II(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAlignment((cocos2d::TextHAlignment)arg0, (cocos2d::TextVAlignment)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getTextAlignment(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getTextAlignment();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setMaxLineWidth(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMaxLineWidth(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_enableShadow(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jint arg2) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->enableShadow(*(const cocos2d::Color4B*)ptr0, *(const cocos2d::Size*)ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getMaxLineWidth(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMaxLineWidth();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setDimensions(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDimensions(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_enableGlow(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->enableGlow(*(const cocos2d::Color4B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_updateContent(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateContent();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setTextColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextColor(*(const cocos2d::Color4B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_getLetter(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLetter(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_disableEffect(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->disableEffect();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setLineBreakWithoutSpace(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLineBreakWithoutSpace(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_Label_getSystemFontName(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getSystemFontName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getStringNumLines(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getStringNumLines();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Label_setBMFontFilePath(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->setBMFontFilePath((std::string&)adapter0, *(const cocos2d::Vec2*)ptr1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getVerticalAlignment(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getVerticalAlignment();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getHorizontalAlignment(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getHorizontalAlignment();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_Label_getBMFontFilePath(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getBMFontFilePath());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setSystemFontSize(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSystemFontSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setHorizontalAlignment(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setHorizontalAlignment((cocos2d::TextHAlignment)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setVerticalAlignment(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVerticalAlignment((cocos2d::TextVAlignment)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Label_isClipMarginEnabled(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isClipMarginEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Label_getSystemFontSize(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSystemFontSize();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setSystemFontName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setSystemFontName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Label_getCommonLineHeight(JNIEnv* env, jobject obj) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCommonLineHeight();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Label_setClipMarginEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Label* ptr = (cocos2d::Label*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setClipMarginEnabled(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithSystemFont__Ljava_lang_String_2Ljava_lang_String_2FLorg_ccj_math_Size_2II(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jfloat arg2, jobject arg3, jint arg4, jint arg5) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    cocos2d::Size* ptr3 = arg3 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithSystemFont((std::string&)adapter0, (std::string&)adapter1, arg2, *(const cocos2d::Size*)ptr3, (cocos2d::TextHAlignment)arg4, (cocos2d::TextVAlignment)arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithSystemFont__Ljava_lang_String_2Ljava_lang_String_2F(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jfloat arg2) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithSystemFont((std::string&)adapter0, (std::string&)adapter1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithCharMap__Lorg_ccj_d2_Texture2D_2III(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jint arg2, jint arg3) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithCharMap(ptr0, arg1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithCharMap__Ljava_lang_String_2III(JNIEnv* env, jclass cls, jstring arg0, jint arg1, jint arg2, jint arg3) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithCharMap((std::string&)adapter0, arg1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Label_createWithCharMap__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Label::createWithCharMap((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_LabelAtlas_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::LabelAtlas* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LabelAtlas::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 136);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LabelAtlas_create__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::LabelAtlas* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LabelAtlas::create((std::string&)adapter0, (std::string&)adapter1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 136);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LabelAtlas_create__Ljava_lang_String_2Ljava_lang_String_2III(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jint arg2, jint arg3, jint arg4) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::LabelAtlas* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LabelAtlas::create((std::string&)adapter0, (std::string&)adapter1, arg2, arg3, arg4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 136);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_LabelAtlas_getString(JNIEnv* env, jobject obj) {
    cocos2d::LabelAtlas* ptr = (cocos2d::LabelAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getString());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LabelAtlas_setString(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::LabelAtlas* ptr = (cocos2d::LabelAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setString((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LabelAtlas_initWithString__Ljava_lang_String_2Ljava_lang_String_2III(JNIEnv* env, jobject obj, jstring arg0, jstring arg1, jint arg2, jint arg3, jint arg4) {
    cocos2d::LabelAtlas* ptr = (cocos2d::LabelAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithString((std::string&)adapter0, (std::string&)adapter1, arg2, arg3, arg4);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LabelAtlas_initWithString__Ljava_lang_String_2Lorg_ccj_d2_Texture2D_2III(JNIEnv* env, jobject obj, jstring arg0, jobject arg1, jint arg2, jint arg3, jint arg4) {
    cocos2d::LabelAtlas* ptr = (cocos2d::LabelAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Texture2D* ptr1 = arg1 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithString((std::string&)adapter0, ptr1, arg2, arg3, arg4);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LabelAtlas_initWithString__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    cocos2d::LabelAtlas* ptr = (cocos2d::LabelAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithString((std::string&)adapter0, (std::string&)adapter1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d2_Layer_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Layer* rptr = cocos2d::Layer::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Layer_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Layer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Layer::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Layer_isSwallowsTouches(JNIEnv* env, jobject obj) {
    cocos2d::Layer* ptr = (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isSwallowsTouches();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Layer_isKeyboardEnabled(JNIEnv* env, jobject obj) {
    cocos2d::Layer* ptr = (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isKeyboardEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Layer_setSwallowsTouches(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Layer* ptr = (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSwallowsTouches((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Layer_setKeyboardEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Layer* ptr = (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setKeyboardEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_d2_LayerColor_allocate__Lorg_ccj_base_Color4B_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::LayerColor* rptr = cocos2d::LayerColor::create(*ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerColor_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::LayerColor* rptr = cocos2d::LayerColor::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerColor_create__Lorg_ccj_base_Color4B_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::LayerColor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerColor::create(*ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 137);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerColor_create__Lorg_ccj_base_Color4B_2FF(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::LayerColor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerColor::create(*ptr0, (GLfloat)arg1, (GLfloat)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 137);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerColor_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::LayerColor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerColor::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 137);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerColor_setContentSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerColor* ptr = (cocos2d::LayerColor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setContentSize(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerColor_changeHeight(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::LayerColor* ptr = (cocos2d::LayerColor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->changeHeight(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerColor_changeWidth(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::LayerColor* ptr = (cocos2d::LayerColor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->changeWidth(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerColor_changeWidthAndHeight(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::LayerColor* ptr = (cocos2d::LayerColor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->changeWidthAndHeight(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::LayerGradient* rptr = cocos2d::LayerGradient::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerGradient_create__Lorg_ccj_base_Color4B_2Lorg_ccj_base_Color4B_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Color4B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::LayerGradient* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerGradient::create(*ptr0, *ptr1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 138);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerGradient_create__Lorg_ccj_base_Color4B_2Lorg_ccj_base_Color4B_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Color4B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Color4B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color4B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::LayerGradient* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerGradient::create(*ptr0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 138);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerGradient_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::LayerGradient* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerGradient::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 138);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerGradient_getStartColor(JNIEnv* env, jobject obj) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getStartColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_setEndOpacity(JNIEnv* env, jobject obj, jbyte arg0) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndOpacity(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_setStartColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartColor(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerGradient_getVector(JNIEnv* env, jobject obj) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getVector();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_setEndColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndColor(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_setVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVector(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jbyte JNICALL Java_org_ccj_d2_LayerGradient_getStartOpacity(JNIEnv* env, jobject obj) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    jthrowable exc = NULL;
    try {
        signed char rvalue = ptr->getStartOpacity();
        rarg = (jbyte)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_ccj_d2_LayerGradient_getEndOpacity(JNIEnv* env, jobject obj) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jbyte rarg = 0;
    jthrowable exc = NULL;
    try {
        signed char rvalue = ptr->getEndOpacity();
        rarg = (jbyte)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerGradient_getEndColor(JNIEnv* env, jobject obj) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getEndColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_setStartOpacity(JNIEnv* env, jobject obj, jbyte arg0) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartOpacity(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LayerGradient_isCompressedInterpolation(JNIEnv* env, jobject obj) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isCompressedInterpolation();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerGradient_setCompressedInterpolation(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::LayerGradient* ptr = (cocos2d::LayerGradient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCompressedInterpolation((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_d2_LayerMultiplex_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::LayerMultiplex* rptr = cocos2d::LayerMultiplex::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerMultiplex_create__Lorg_ccj_d2_Layer_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Layer* ptr0 = arg0 == NULL ? NULL : (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::LayerMultiplex* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerMultiplex::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 140);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerMultiplex_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::LayerMultiplex* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerMultiplex::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 140);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerMultiplex_addLayer(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerMultiplex* ptr = (cocos2d::LayerMultiplex*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Layer* ptr0 = arg0 == NULL ? NULL : (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addLayer(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerMultiplex_createWithLayer(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Layer* ptr0 = arg0 == NULL ? NULL : (cocos2d::Layer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::LayerMultiplex* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerMultiplex::createWithLayer(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 140);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d2_LayerRGBA_setColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setColor(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerRGBA_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::LayerRGBA* rptr = cocos2d::LayerRGBA::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerRGBA_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::LayerRGBA* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::LayerRGBA::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 141);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerRGBA_getColor(JNIEnv* env, jobject obj) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerRGBA_setCascadeOpacityEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCascadeOpacityEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerRGBA_setOpacityModifyRGB(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOpacityModifyRGB((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LayerRGBA_isCascadeColorEnabled(JNIEnv* env, jobject obj) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isCascadeColorEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LayerRGBA_isCascadeOpacityEnabled(JNIEnv* env, jobject obj) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isCascadeOpacityEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_LayerRGBA_getDisplayedColor(JNIEnv* env, jobject obj) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getDisplayedColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_LayerRGBA_isOpacityModifyRGB(JNIEnv* env, jobject obj) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isOpacityModifyRGB();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerRGBA_updateDisplayedColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateDisplayedColor(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_LayerRGBA_setCascadeColorEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::LayerRGBA* ptr = (cocos2d::LayerRGBA*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCascadeColorEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_Menu_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Menu* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Menu::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Menu_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::Menu* ptr = (cocos2d::Menu*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Menu_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Menu* ptr = (cocos2d::Menu*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Menu_createWithItem(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::MenuItemImage* ptr0 = arg0 == NULL ? NULL : (cocos2d::MenuItemImage*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Menu* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Menu::createWithItem(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Menu_alignItemsHorizontallyWithPadding(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Menu* ptr = (cocos2d::Menu*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->alignItemsHorizontallyWithPadding(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Menu_alignItemsVertically(JNIEnv* env, jobject obj) {
    cocos2d::Menu* ptr = (cocos2d::Menu*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->alignItemsVertically();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Menu_alignItemsVerticallyWithPadding(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Menu* ptr = (cocos2d::Menu*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->alignItemsVerticallyWithPadding(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Menu_alignItemsHorizontally(JNIEnv* env, jobject obj) {
    cocos2d::Menu* ptr = (cocos2d::Menu*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->alignItemsHorizontally();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItem_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::MenuItem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItem::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItem_activate(JNIEnv* env, jobject obj) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->activate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_MenuItem_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItem_selected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->selected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItem_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_MenuItem_isSelected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isSelected();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItem_rect(JNIEnv* env, jobject obj) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Rect(ptr->rect());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Rect_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItem_unselected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItem* ptr = (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unselected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemAtlasFont_create(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jint arg2, jint arg3, jchar arg4) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jobject rarg = NULL;
    cocos2d::MenuItemAtlasFont* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemAtlasFont::create(ptr0, ptr1, arg2, arg3, arg4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 143);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemFont_create(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    cocos2d::MenuItemFont* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemFont::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 144);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_MenuItemFont_fontSize(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = cocos2d::MenuItemFont::fontSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_MenuItemFont_getFontSizeObj(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemFont* ptr = (cocos2d::MenuItemFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getFontSizeObj();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemFont_setFontSizeObj(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::MenuItemFont* ptr = (cocos2d::MenuItemFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFontSizeObj(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_MenuItemFont_getFontNameObj(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemFont* ptr = (cocos2d::MenuItemFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getFontNameObj());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_MenuItemFont_getFontSize(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = cocos2d::MenuItemFont::getFontSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_MenuItemFont_getFontName(JNIEnv* env, jclass cls) {
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(cocos2d::MenuItemFont::getFontName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemFont_setFontName(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        cocos2d::MenuItemFont::setFontName(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_MenuItemFont_fontSizeObj(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemFont* ptr = (cocos2d::MenuItemFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->fontSizeObj();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_MenuItemFont_fontName(JNIEnv* env, jclass cls) {
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(cocos2d::MenuItemFont::fontName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemFont_setFontNameObj(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::MenuItemFont* ptr = (cocos2d::MenuItemFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setFontNameObj((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemFont_setFontSize(JNIEnv* env, jclass cls, jint arg0) {
    jthrowable exc = NULL;
    try {
        cocos2d::MenuItemFont::setFontSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemImage_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::MenuItemImage* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemImage::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 145);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemImage_create__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jobject rarg = NULL;
    cocos2d::MenuItemImage* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemImage::create(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 145);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemLabel_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::MenuItemLabel* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemLabel::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 146);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemLabel_activate(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->activate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemLabel_selected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->selected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemLabel_getLabel(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLabel();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemLabel_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemLabel_setString(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setString(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemLabel_unselected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unselected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemLabel_setLabel(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MenuItemLabel* ptr = (cocos2d::MenuItemLabel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setLabel(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemSprite_create(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Node* ptr1 = arg1 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Node* ptr2 = arg2 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::MenuItemSprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemSprite::create(ptr0, ptr1, ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 147);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemSprite_selected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->selected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemSprite_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemSprite_setNormalImage(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setNormalImage(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemSprite_setSelectedImage(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setSelectedImage(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemSprite_setDisabledImage(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setDisabledImage(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemSprite_unselected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unselected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemSprite_getNormalImage(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getNormalImage();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemSprite_getDisabledImage(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getDisabledImage();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemSprite_getSelectedImage(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemSprite* ptr = (cocos2d::MenuItemSprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSelectedImage();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemToggle_create__Lorg_ccj_d2_MenuItem_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::MenuItem* ptr0 = arg0 == NULL ? NULL : (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::MenuItemToggle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemToggle::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 148);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemToggle_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::MenuItemToggle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MenuItemToggle::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 148);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemToggle_activate(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->activate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemToggle_selected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->selected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemToggle_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemToggle_addSubItem(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::MenuItem* ptr0 = arg0 == NULL ? NULL : (cocos2d::MenuItem*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addSubItem(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemToggle_unselected(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unselected();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemToggle_getSelectedItem(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MenuItem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSelectedItem();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MenuItemToggle_selectedItem(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MenuItem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->selectedItem();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MenuItemToggle_setSelectedIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSelectedIndex(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_MenuItemToggle_getSelectedIndex(JNIEnv* env, jobject obj) {
    cocos2d::MenuItemToggle* ptr = (cocos2d::MenuItemToggle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getSelectedIndex();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d2_MotionStreak_reset(JNIEnv* env, jobject obj) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reset();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MotionStreak_create__FFFLorg_ccj_base_Color3B_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jobject arg3, jstring arg4) {
    cocos2d::Color3B* ptr3 = arg3 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    const char* ptr4 = arg4 == NULL ? NULL : env->GetStringUTFChars(arg4, NULL);
    jint size4 = 0;
    StringAdapter adapter4(ptr4, size4);
    jobject rarg = NULL;
    cocos2d::MotionStreak* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MotionStreak::create(arg0, arg1, arg2, *(const cocos2d::Color3B*)ptr3, (std::string&)adapter4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 149);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg4 != NULL) env->ReleaseStringUTFChars(arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MotionStreak_create__FFFLorg_ccj_base_Color3B_2Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jobject arg3, jobject arg4) {
    cocos2d::Color3B* ptr3 = arg3 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    cocos2d::Texture2D* ptr4 = arg4 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::MotionStreak* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::MotionStreak::create(arg0, arg1, arg2, *(const cocos2d::Color3B*)ptr3, ptr4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 149);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_MotionStreak_getTexture(JNIEnv* env, jobject obj) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTexture();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MotionStreak_setTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MotionStreak_setFastMode(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFastMode(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MotionStreak_tintWithColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->tintWithColor(*(const cocos2d::Color3B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_MotionStreak_isFastMode(JNIEnv* env, jobject obj) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFastMode();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_MotionStreak_setStartingPositionInitialized(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartingPositionInitialized(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_MotionStreak_isStartingPositionInitialized(JNIEnv* env, jobject obj) {
    cocos2d::MotionStreak* ptr = (cocos2d::MotionStreak*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isStartingPositionInitialized();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jstring JNICALL Java_org_ccj_d2_Node_getName(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getParent(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getParent();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_resume(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resume();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setParent(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setParent(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setColor(*(const cocos2d::Color3B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Node* rptr = cocos2d::Node::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Node::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_cleanup(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->cleanup();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getPosition(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPosition();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getChildren(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vector<cocos2d::Node*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->getChildren();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 150);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_addComponent(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Component* ptr0 = arg0 == NULL ? NULL : (cocos2d::Component*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->addComponent(ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_Node_getDescription(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getDescription());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_isVisible(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isVisible();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_visit(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->visit();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getComponent(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Component* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getComponent((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 151);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_addChild__Lorg_ccj_d2_Node_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_addChild__Lorg_ccj_d2_Node_2II(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jint arg2) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_addChild__Lorg_ccj_d2_Node_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeChild(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeChild(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setScale__FF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setScale__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_isRunning(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isRunning();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getTag(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getActionByTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Action* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getActionByTag(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPosition__Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPosition__FF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getActionManager(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ActionManager* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getActionManager();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 152);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getBoundingBox(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Rect(ptr->getBoundingBox());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Rect_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getPositionX(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPositionX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setRotation(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotation(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setSkewX(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSkewX(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setRotation3D(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotation3D(*(const cocos2d::Vec3*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getScaleX(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScaleX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getRotation(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotation();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getChildByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getChildByName(ptr0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getPositionZ(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPositionZ();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getRotation3D(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)new cocos2d::Vec3(ptr->getRotation3D());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getSkewY(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSkewY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getRotationSkewX(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotationSkewX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getContentSize(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getContentSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getRotationSkewY(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotationSkewY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setRotationSkewX(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotationSkewX(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPositionX(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionX(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getPositionY(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPositionY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getGLServerState(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getGLServerState();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeChildByTag(JNIEnv* env, jobject obj, jint arg0, jboolean arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeChildByTag(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getScaleY(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScaleY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPositionY(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionY(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getUserObject(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Ref* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getUserObject();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getScale(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScale();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_stopAllActions(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopAllActions();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_stopActionByTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopActionByTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getSkewX(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSkewX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setGLServerState(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGLServerState(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPositionZ(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionZ(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setAnchorPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnchorPoint(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeFromParent(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeFromParent();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_runAction(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Action* ptr0 = arg0 == NULL ? NULL : (cocos2d::Action*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Action* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->runAction(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setLocalZOrder(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLocalZOrder(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setScaleX(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScaleX(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_Node_getGlobalZOrder(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getGlobalZOrder();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setSkewY(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSkewY(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getAnchorPoint(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getAnchorPoint();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setRotationSkewY(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotationSkewY(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getChildByTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getChildByTag(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setGlobalZOrder(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGlobalZOrder(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setScaleY(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScaleY(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getPosition3D(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)new cocos2d::Vec3(ptr->getPosition3D());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getLocalZOrder(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getLocalZOrder();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setContentSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setContentSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getChildrenCount(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getChildrenCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_reorderChild(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->reorderChild(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_sortAllChildren(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->sortAllChildren();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setVisible(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVisible((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPosition3D(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition3D(*(const cocos2d::Vec3*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setUserObject(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Ref* ptr0 = arg0 == NULL ? NULL : (cocos2d::Ref*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setUserObject(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_draw(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->draw();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getScene(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getScene();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 153);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_pause(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pause();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setOpacity(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOpacity((GLubyte)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_unscheduleUpdate(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unscheduleUpdate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getColor(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getPhysicsBody(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsBody();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getOpacity(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getOpacity();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_removeComponent(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->removeComponent((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getScheduler(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Scheduler* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getScheduler();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 154);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setPhysicsBody(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setPhysicsBody(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getGLProgram(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLProgram* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGLProgram();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 155);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setGLProgram(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::GLProgram* ptr0 = arg0 == NULL ? NULL : (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setGLProgram(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getAnchorPointInPoints(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getAnchorPointInPoints();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setOrderOfArrival(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOrderOfArrival(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getOrderOfArrival(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getOrderOfArrival();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_ignoreAnchorPointForPosition(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->ignoreAnchorPointForPosition((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_isIgnoreAnchorPointForPosition(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isIgnoreAnchorPointForPosition();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_resumeSchedulerAndActions(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resumeSchedulerAndActions();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setCascadeOpacityEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCascadeOpacityEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setOpacityModifyRGB(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOpacityModifyRGB((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_scheduleUpdateWithPriorityLua(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scheduleUpdateWithPriorityLua(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_convertToNodeSpaceAR(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->convertToNodeSpaceAR(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_isCascadeColorEnabled(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isCascadeColorEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Node_getDisplayedOpacity(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getDisplayedOpacity();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeFromParentAndCleanup(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeFromParentAndCleanup((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setGLProgramState(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::GLProgramState* ptr0 = arg0 == NULL ? NULL : (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setGLProgramState(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_convertToWorldSpace(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->convertToWorldSpace(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeAllChildrenWithCleanup(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllChildrenWithCleanup((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getGLProgramState(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLProgramState* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGLProgramState();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 156);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_isCascadeOpacityEnabled(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isCascadeOpacityEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_pauseSchedulerAndActions(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pauseSchedulerAndActions();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_getDisplayedColor(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getDisplayedColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_updateDisplayedOpacity(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateDisplayedOpacity((GLubyte)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeAllComponents(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllComponents();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Node_isOpacityModifyRGB(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isOpacityModifyRGB();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_removeAllChildren(JNIEnv* env, jobject obj) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllChildren();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_scheduleUpdateWithPriority(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scheduleUpdateWithPriority(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_convertToNodeSpace(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->convertToNodeSpace(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Node_convertToWorldSpaceAR(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->convertToWorldSpaceAR(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_updateDisplayedColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateDisplayedColor(*(const cocos2d::Color3B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Node_setCascadeColorEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Node* ptr = (cocos2d::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCascadeColorEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_ParallaxNode_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParallaxNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParallaxNode::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 157);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ParallaxNode_addChild(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jobject arg2, jobject arg3) {
    cocos2d::ParallaxNode* ptr = (cocos2d::ParallaxNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0, arg1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jint JNICALL Java_org_ccj_d2_ProgressTimer_getType(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_ProgressTimer_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::ProgressTimer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ProgressTimer::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 158);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setType((cocos2d::ProgressTimer::Type)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setBarChangeRate(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBarChangeRate(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_ProgressTimer_getBarChangeRate(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getBarChangeRate());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_ProgressTimer_getMidpoint(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getMidpoint());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setPercentage(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPercentage(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setSprite(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setSprite(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setMidpoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMidpoint(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d2_ProgressTimer_getPercentage(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPercentage();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_ProgressTimer_getSprite(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSprite();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setReverseProgress(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setReverseProgress(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_ProgressTimer_setReverseDirection(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setReverseDirection(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_ProgressTimer_isReverseDirection(JNIEnv* env, jobject obj) {
    cocos2d::ProgressTimer* ptr = (cocos2d::ProgressTimer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isReverseDirection();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_create__Ljava_lang_String_2Lorg_ccj_math_Rect_2(JNIEnv* env, jclass cls, jstring arg0, jobject arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::create((std::string&)adapter0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_create__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Sprite_isDirty(JNIEnv* env, jobject obj) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isDirty();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setTexture(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Sprite_isFlippedX(JNIEnv* env, jobject obj) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFlippedX();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setFlippedY(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFlippedY((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setVertexRect(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVertexRect(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setTextureRect__Lorg_ccj_math_Rect_2ZLorg_ccj_math_Size_2(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1, jobject arg2) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Size* ptr2 = arg2 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextureRect(*ptr0, arg1, *ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setTextureRect__Lorg_ccj_math_Rect_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextureRect(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setSpriteFrame(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setSpriteFrame(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setFlipX(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFlipX((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setDirty(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDirty((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_getTextureRect(JNIEnv* env, jobject obj) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Rect*)&ptr->getTextureRect();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Sprite_isFlipX(JNIEnv* env, jobject obj) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFlipX();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Sprite_setFlippedX(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFlippedX((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Sprite_isFlippedY(JNIEnv* env, jobject obj) {
    cocos2d::Sprite* ptr = (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFlippedY();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_createWithSpriteFrameName(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::createWithSpriteFrameName(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_createWithSpriteFrame(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::SpriteFrame* ptr0 = arg0 == NULL ? NULL : (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::createWithSpriteFrame(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_createWithTexture__Lorg_ccj_d2_Texture2D_2Lorg_ccj_math_Rect_2Z(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jboolean arg2) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::createWithTexture(ptr0, *ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Sprite_createWithTexture__Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite::createWithTexture(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteBatchNode_create__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::SpriteBatchNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteBatchNode::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 159);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteBatchNode_create__Ljava_lang_String_2I(JNIEnv* env, jclass cls, jstring arg0, jint arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::SpriteBatchNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteBatchNode::create((std::string&)adapter0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 159);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteBatchNode_getTexture(JNIEnv* env, jobject obj) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTexture();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_setTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_appendChild(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->appendChild(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_reorderBatch(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reorderBatch((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_removeChildAtIndex(JNIEnv* env, jobject obj, jint arg0, jboolean arg1) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeChildAtIndex(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_SpriteBatchNode_rebuildIndexInOrder(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->rebuildIndexInOrder(ptr0, arg1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_removeSpriteFromAtlas(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeSpriteFromAtlas(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_increaseAtlasCapacity(JNIEnv* env, jobject obj) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->increaseAtlasCapacity();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteBatchNode_createWithTexture__Lorg_ccj_d2_Texture2D_2I(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::SpriteBatchNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteBatchNode::createWithTexture(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 159);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteBatchNode_createWithTexture__Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::SpriteBatchNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteBatchNode::createWithTexture(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 159);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_SpriteBatchNode_atlasIndexForChild(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->atlasIndexForChild(ptr0, arg1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_SpriteBatchNode_lowestAtlasIndexInChild(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->lowestAtlasIndexInChild(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteBatchNode_insertQuadFromSprite(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->insertQuadFromSprite(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteBatchNode_addSpriteWithoutQuad(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jint arg2) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::SpriteBatchNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->addSpriteWithoutQuad(ptr0, arg1, arg2);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 159);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_SpriteBatchNode_highestAtlasIndexInChild(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteBatchNode* ptr = (cocos2d::SpriteBatchNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Sprite* ptr0 = arg0 == NULL ? NULL : (cocos2d::Sprite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->highestAtlasIndexInChild(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_clone(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SpriteFrame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 160);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getOffset(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getOffset();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setOffset(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOffset(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_create__Ljava_lang_String_2Lorg_ccj_math_Rect_2(JNIEnv* env, jclass cls, jstring arg0, jobject arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SpriteFrame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteFrame::create(ptr0, *(const cocos2d::Rect*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 160);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_create__Ljava_lang_String_2Lorg_ccj_math_Rect_2ZLorg_ccj_math_Vec2_2Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jstring arg0, jobject arg1, jboolean arg2, jobject arg3, jobject arg4) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    cocos2d::Size* ptr4 = arg4 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SpriteFrame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteFrame::create(ptr0, *(const cocos2d::Rect*)ptr1, arg2, *(const cocos2d::Vec2*)ptr3, *(const cocos2d::Size*)ptr4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 160);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getTexture(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTexture();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setOriginalSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOriginalSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setRectInPixels(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRectInPixels(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_SpriteFrame_isRotated(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isRotated();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setRotated(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotated((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setRect(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRect(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getOriginalSize(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getOriginalSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getRect(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Rect*)&ptr->getRect();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getRectInPixels(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Rect*)&ptr->getRectInPixels();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_createWithTexture__Lorg_ccj_d2_Texture2D_2Lorg_ccj_math_Rect_2ZLorg_ccj_math_Vec2_2Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jboolean arg2, jobject arg3, jobject arg4) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    cocos2d::Size* ptr4 = arg4 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SpriteFrame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteFrame::createWithTexture(ptr0, *(const cocos2d::Rect*)ptr1, arg2, *(const cocos2d::Vec2*)ptr3, *(const cocos2d::Size*)ptr4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 160);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_createWithTexture__Lorg_ccj_d2_Texture2D_2Lorg_ccj_math_Rect_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::SpriteFrame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteFrame::createWithTexture(ptr0, *(const cocos2d::Rect*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 160);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getOffsetInPixels(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getOffsetInPixels();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setOffsetInPixels(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOffsetInPixels(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrame_getOriginalSizeInPixels(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getOriginalSizeInPixels();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrame_setOriginalSizeInPixels(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrame* ptr = (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOriginalSizeInPixels(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrameCache_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::SpriteFrameCache* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::SpriteFrameCache::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 161);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_addSpriteFrame(JNIEnv* env, jobject obj, jobject arg0, jstring arg1) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::SpriteFrame* ptr0 = arg0 == NULL ? NULL : (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFrame(ptr0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::SpriteFrameCache::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_removeSpriteFrames(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeSpriteFrames();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_addSpriteFramesWithFile__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFramesWithFile((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_addSpriteFramesWithFile__Ljava_lang_String_2Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Texture2D* ptr1 = arg1 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFramesWithFile((std::string&)adapter0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_addSpriteFramesWithFile__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->addSpriteFramesWithFile((std::string&)adapter0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_removeSpriteFramesFromFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeSpriteFramesFromFile((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_SpriteFrameCache_getSpriteFrameByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::SpriteFrame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSpriteFrameByName((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 160);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_removeSpriteFrameByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeSpriteFrameByName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_removeSpriteFramesFromTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeSpriteFramesFromTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_SpriteFrameCache_removeUnusedSpriteFrames(JNIEnv* env, jobject obj) {
    cocos2d::SpriteFrameCache* ptr = (cocos2d::SpriteFrameCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeUnusedSpriteFrames();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jboolean JNICALL Java_org_ccj_d2_TextFieldTTF_attachWithIME(JNIEnv* env, jobject obj) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->attachWithIME();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_TextFieldTTF_getCharCount(JNIEnv* env, jobject obj) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCharCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_TextFieldTTF_detachWithIME(JNIEnv* env, jobject obj) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->detachWithIME();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_TextFieldTTF_initWithPlaceHolder__Ljava_lang_String_2Lorg_ccj_math_Size_2ILjava_lang_String_2F(JNIEnv* env, jobject obj, jstring arg0, jobject arg1, jint arg2, jstring arg3, jfloat arg4) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithPlaceHolder((std::string&)adapter0, *(const cocos2d::Size*)ptr1, (cocos2d::TextHAlignment)arg2, (std::string&)adapter3, arg4);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_TextFieldTTF_initWithPlaceHolder__Ljava_lang_String_2Ljava_lang_String_2F(JNIEnv* env, jobject obj, jstring arg0, jstring arg1, jfloat arg2) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithPlaceHolder((std::string&)adapter0, (std::string&)adapter1, arg2);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TextFieldTTF_getColorSpaceHolder(JNIEnv* env, jobject obj) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getColorSpaceHolder();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TextFieldTTF_textFieldWithPlaceHolder__Ljava_lang_String_2Ljava_lang_String_2F(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jfloat arg2) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::TextFieldTTF* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TextFieldTTF::textFieldWithPlaceHolder((std::string&)adapter0, (std::string&)adapter1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 162);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TextFieldTTF_textFieldWithPlaceHolder__Ljava_lang_String_2Lorg_ccj_math_Size_2ILjava_lang_String_2F(JNIEnv* env, jclass cls, jstring arg0, jobject arg1, jint arg2, jstring arg3, jfloat arg4) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Size* ptr1 = arg1 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    jobject rarg = NULL;
    cocos2d::TextFieldTTF* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TextFieldTTF::textFieldWithPlaceHolder((std::string&)adapter0, *(const cocos2d::Size*)ptr1, (cocos2d::TextHAlignment)arg2, (std::string&)adapter3, arg4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 162);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TextFieldTTF_setColorSpaceHolder(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TextFieldTTF* ptr = (cocos2d::TextFieldTTF*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setColorSpaceHolder(*(const cocos2d::Color3B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jstring JNICALL Java_org_ccj_d2_Texture2D_getDescription(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getDescription());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Texture2D_getContentSize(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Size(ptr->getContentSize());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Size_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Texture2D_drawAtPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawAtPoint(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Texture2D_drawInRect(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawInRect(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Texture2D_generateMipmap(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->generateMipmap();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Texture2D_getPixelsWide(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPixelsWide();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Texture2D_hasMipmaps(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->hasMipmaps();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Texture2D_getPixelsHigh(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPixelsHigh();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Texture2D_setAliasTexParameters(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAliasTexParameters();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_Texture2D_hasPremultipliedAlpha(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->hasPremultipliedAlpha();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_Texture2D_getBitsPerPixelForFormat(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getBitsPerPixelForFormat();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_Texture2D_getContentSizeInPixels(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getContentSizeInPixels();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_Texture2D_setAntiAliasTexParameters(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAntiAliasTexParameters();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_Texture2D_getStringForFormat(JNIEnv* env, jobject obj) {
    cocos2d::Texture2D* ptr = (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->getStringForFormat();
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_TextureCache_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::TextureCache* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TextureCache::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 163);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TextureCache_addImage(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->addImage((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d2_TextureCache_reloadTexture(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->reloadTexture((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TextureCache_removeTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TextureCache_getTextureForKey(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTextureForKey((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TextureCache_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::TextureCache::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TextureCache_removeTextureForKey(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeTextureForKey((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TextureCache_removeUnusedTextures(JNIEnv* env, jobject obj) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeUnusedTextures();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TextureCache_removeAllTextures(JNIEnv* env, jobject obj) {
    cocos2d::TextureCache* ptr = (cocos2d::TextureCache*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllTextures();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_TileMapAtlas_create(JNIEnv* env, jclass cls, jstring arg0, jstring arg1, jint arg2, jint arg3) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::TileMapAtlas* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TileMapAtlas::create((std::string&)adapter0, (std::string&)adapter1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 164);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TileMapAtlas_setTile(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::TileMapAtlas* ptr = (cocos2d::TileMapAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTile(*(const cocos2d::Color3B*)ptr0, *(const cocos2d::Vec2*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TileMapAtlas_getTileAt(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TileMapAtlas* ptr = (cocos2d::TileMapAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Color3B(ptr->getTileAt(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Color3B_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TileMapAtlas_releaseMap(JNIEnv* env, jobject obj) {
    cocos2d::TileMapAtlas* ptr = (cocos2d::TileMapAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->releaseMap();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXLayer_getProperty(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Value* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Value(ptr->getProperty((std::string&)adapter0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Value_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_TMXLayer_getDescription(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getDescription());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_addChild(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jint arg2) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_removeChild(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeChild(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXLayer_getTileAt(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTileAt(*ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_releaseMap(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->releaseMap();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_setTileGID(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTileGID(arg0, *(const cocos2d::Vec2*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_removeTileAt(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeTileAt(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXLayer_getPositionAt(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPositionAt(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_setLayerName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setLayerName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_setMapTileSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMapTileSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_setupTiles(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setupTiles();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_TMXLayer_getLayerName(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getLayerName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXLayer_getLayerSize(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getLayerSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXLayer_getMapTileSize(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getMapTileSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_setLayerSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLayerSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXLayer_setLayerOrientation(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLayerOrientation(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_TMXLayer_getLayerOrientation(JNIEnv* env, jobject obj) {
    cocos2d::TMXLayer* ptr = (cocos2d::TMXLayer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getLayerOrientation();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXObjectGroup_getProperty(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    const cocos2d::Value* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Value*)new cocos2d::Value(ptr->getProperty((std::string&)adapter0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Value_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXObjectGroup_getObject(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::ValueMap* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::ValueMap(ptr->getObject((std::string&)adapter0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_ValueMap_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 165);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXObjectGroup_getProperties(JNIEnv* env, jobject obj) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::ValueMap* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::ValueMap*)&ptr->getProperties();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 165);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXObjectGroup_setProperties(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ValueMap* ptr0 = arg0 == NULL ? NULL : (cocos2d::ValueMap*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setProperties(*(const cocos2d::ValueMap*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXObjectGroup_setGroupName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setGroupName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXObjectGroup_getObjects(JNIEnv* env, jobject obj) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::ValueVector* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::ValueVector*)&ptr->getObjects();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 166);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXObjectGroup_setObjects(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ValueVector* ptr0 = arg0 == NULL ? NULL : (cocos2d::ValueVector*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setObjects(*(const cocos2d::ValueVector*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_d2_TMXObjectGroup_getGroupName(JNIEnv* env, jobject obj) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getGroupName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXObjectGroup_getPositionOffset(JNIEnv* env, jobject obj) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPositionOffset();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXObjectGroup_setPositionOffset(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXObjectGroup* ptr = (cocos2d::TMXObjectGroup*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionOffset(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getProperty(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Value* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Value(ptr->getProperty((std::string&)adapter0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Value_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getProperties(JNIEnv* env, jobject obj) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::ValueMap* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::ValueMap*)&ptr->getProperties();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 165);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXTiledMap_setProperties(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ValueMap* ptr0 = arg0 == NULL ? NULL : (cocos2d::ValueMap*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setProperties(*(const cocos2d::ValueMap*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_create(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::TMXTiledMap* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TMXTiledMap::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 167);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXTiledMap_setTileSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTileSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getTileSize(JNIEnv* env, jobject obj) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getTileSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getObjectGroups(JNIEnv* env, jobject obj) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vector<cocos2d::TMXObjectGroup*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vector<cocos2d::TMXObjectGroup*>*)&ptr->getObjectGroups();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 168);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getMapSize(JNIEnv* env, jobject obj) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getMapSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_createWithXML(JNIEnv* env, jclass cls, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::TMXTiledMap* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TMXTiledMap::createWithXML((std::string&)adapter0, (std::string&)adapter1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 167);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXTiledMap_setMapSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMapSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getLayer(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::TMXLayer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLayer((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 169);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXTiledMap_setObjectGroups(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vector<cocos2d::TMXObjectGroup*>* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vector<cocos2d::TMXObjectGroup*>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setObjectGroups(*(const cocos2d::Vector<cocos2d::TMXObjectGroup*>*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getObjectGroup(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::TMXObjectGroup* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getObjectGroup((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 170);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d2_TMXTiledMap_getPropertiesForGID(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Value* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Value(ptr->getPropertiesForGID(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_Value_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d2_TMXTiledMap_setMapOrientation(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMapOrientation(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d2_TMXTiledMap_getMapOrientation(JNIEnv* env, jobject obj) {
    cocos2d::TMXTiledMap* ptr = (cocos2d::TMXTiledMap*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMapOrientation();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_d3_AABB_isEmpty(JNIEnv* env, jobject obj) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEmpty();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_AABB_merge(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::AABB* ptr0 = arg0 == NULL ? NULL : (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->merge(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_AABB_set(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_AABB_reset(JNIEnv* env, jobject obj) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reset();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_AABB_intersects(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::AABB* ptr0 = arg0 == NULL ? NULL : (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->intersects(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_AABB_transform(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->transform(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_AABB_getCenter(JNIEnv* env, jobject obj) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec3(ptr->getCenter());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_AABB_getCorners(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getCorners(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_AABB_containPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->containPoint(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_AABB_updateMinMax(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::AABB* ptr = (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->updateMinMax(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d3_Animate3D_clone(JNIEnv* env, jobject obj) {
    cocos2d::Animate3D* ptr = (cocos2d::Animate3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Animate3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 171);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Animate3D_reverse(JNIEnv* env, jobject obj) {
    cocos2d::Animate3D* ptr = (cocos2d::Animate3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Animate3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->reverse();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 171);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Animate3D_create__Lorg_ccj_d3_Animation3D_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Animation3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Animation3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Animate3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Animate3D::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 171);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Animate3D_create__Lorg_ccj_d3_Animation3D_2FF(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Animation3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Animation3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Animate3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Animate3D::create(ptr0, arg1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 171);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d3_Animate3D_getSpeed(JNIEnv* env, jobject obj) {
    cocos2d::Animate3D* ptr = (cocos2d::Animate3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSpeed();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Animate3D_setSpeed(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Animate3D* ptr = (cocos2d::Animate3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSpeed(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d3_Animate3D_getWeight(JNIEnv* env, jobject obj) {
    cocos2d::Animate3D* ptr = (cocos2d::Animate3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getWeight();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Animate3D_setWeight(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Animate3D* ptr = (cocos2d::Animate3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setWeight(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d3_Animation3D_create__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Animation3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Animation3D::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 172);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Animation3D_create__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::Animation3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Animation3D::create((std::string&)adapter0, (std::string&)adapter1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 172);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_d3_Animation3D_getDuration(JNIEnv* env, jobject obj) {
    cocos2d::Animation3D* ptr = (cocos2d::Animation3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDuration();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jobject JNICALL Java_org_ccj_d3_AttachNode_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Bone3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::AttachNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::AttachNode::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 173);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_AttachNode_getWorldToNodeTransform(JNIEnv* env, jobject obj) {
    cocos2d::AttachNode* ptr = (cocos2d::AttachNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Mat4(ptr->getWorldToNodeTransform());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Mat4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_d3_BillBoard_create__Ljava_lang_String_2Lorg_ccj_math_Rect_2I(JNIEnv* env, jclass cls, jstring arg0, jobject arg1, jint arg2) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::BillBoard* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::BillBoard::create(ptr0, *(const cocos2d::Rect*)ptr1, (cocos2d::BillBoard::Mode)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 174);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_BillBoard_create__Ljava_lang_String_2I(JNIEnv* env, jclass cls, jstring arg0, jint arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    cocos2d::BillBoard* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::BillBoard::create(ptr0, (cocos2d::BillBoard::Mode)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 174);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_BillBoard_create__I(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::BillBoard* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::BillBoard::create((cocos2d::BillBoard::Mode)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 174);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_BillBoard_setMode(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::BillBoard* ptr = (cocos2d::BillBoard*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMode((cocos2d::BillBoard::Mode)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_BillBoard_getMode(JNIEnv* env, jobject obj) {
    cocos2d::BillBoard* ptr = (cocos2d::BillBoard*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getMode();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_BillBoard_createWithTexture(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::BillBoard* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::BillBoard::createWithTexture(ptr0, (cocos2d::BillBoard::Mode)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 174);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jstring JNICALL Java_org_ccj_d3_Bone3D_getName(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Bone3D_create(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Bone3D::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_resetPose(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resetPose();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_updateWorldMat(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateWorldMat();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_addChildBone(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Bone3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChildBone(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_removeChildBone(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Bone3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeChildBone(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Bone3D_getParentBone(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getParentBone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_setOriPose(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOriPose(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Bone3D_getWorldMat(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Mat4*)&ptr->getWorldMat();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Bone3D_getInverseBindPose(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Mat4*)&ptr->getInverseBindPose();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Bone3D_getChildBoneByIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getChildBoneByIndex(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_removeChildBoneByIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeChildBoneByIndex(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_removeAllChildBone(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllChildBone();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Bone3D_getChildBoneCount(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getChildBoneCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_setInverseBindPose(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setInverseBindPose(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_setAnimationValue(JNIEnv* env, jobject obj, jfloatArray arg0, jfloatArray arg1, jfloatArray arg2, jintArray arg3, jfloat arg4) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr0 = arg0 == NULL ? NULL : env->GetFloatArrayElements(arg0, NULL);
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    float* ptr2 = arg2 == NULL ? NULL : env->GetFloatArrayElements(arg2, NULL);
    int* ptr3 = arg3 == NULL ? NULL : env->GetIntArrayElements(arg3, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setAnimationValue(ptr0, ptr1, ptr2, ptr3, arg4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseFloatArrayElements(arg0, (jfloat*)ptr0, 0);
    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (arg2 != NULL) env->ReleaseFloatArrayElements(arg2, (jfloat*)ptr2, 0);
    if (arg3 != NULL) env->ReleaseIntArrayElements(arg3, (jint*)ptr3, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_clearBoneBlendState(JNIEnv* env, jobject obj) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->clearBoneBlendState();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bone3D_updateJointMatrix(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bone3D* ptr = (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->updateJointMatrix(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_d3_Bundle3D_clear(JNIEnv* env, jobject obj) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_load(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->load((std::string&)adapter0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Bundle3D_destroyBundle(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Bundle3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Bundle3D::destroyBundle(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_loadMeshDatas(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::MeshDatas* ptr0 = arg0 == NULL ? NULL : (cocos2d::MeshDatas*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->loadMeshDatas(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_loadObj(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jstring arg3, jstring arg4) {
    cocos2d::MeshDatas* ptr0 = arg0 == NULL ? NULL : (cocos2d::MeshDatas*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::MaterialDatas* ptr1 = arg1 == NULL ? NULL : (cocos2d::MaterialDatas*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::NodeDatas* ptr2 = arg2 == NULL ? NULL : (cocos2d::NodeDatas*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    const char* ptr4 = arg4 == NULL ? NULL : env->GetStringUTFChars(arg4, NULL);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = cocos2d::Bundle3D::loadObj(*ptr0, *ptr1, *ptr2, (std::string&)adapter3, ptr4);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (arg4 != NULL) env->ReleaseStringUTFChars(arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_loadNodes(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::NodeDatas* ptr0 = arg0 == NULL ? NULL : (cocos2d::NodeDatas*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->loadNodes(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Bundle3D_createBundle(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Bundle3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Bundle3D::createBundle();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 176);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_loadSkinData(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::SkinData* ptr1 = arg1 == NULL ? NULL : (cocos2d::SkinData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->loadSkinData((std::string&)adapter0, ptr1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_loadMaterials(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::MaterialDatas* ptr0 = arg0 == NULL ? NULL : (cocos2d::MaterialDatas*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->loadMaterials(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Bundle3D_loadAnimationData(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::Bundle3D* ptr = (cocos2d::Bundle3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Animation3DData* ptr1 = arg1 == NULL ? NULL : (cocos2d::Animation3DData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->loadAnimationData((std::string&)adapter0, ptr1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_d3_IndexBuffer_getType(JNIEnv* env, jobject obj) {
    cocos2d::IndexBuffer* ptr = (cocos2d::IndexBuffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_IndexBuffer_getSize(JNIEnv* env, jobject obj) {
    cocos2d::IndexBuffer* ptr = (cocos2d::IndexBuffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_IndexBuffer_create(JNIEnv* env, jclass cls, jint arg0, jint arg1) {
    jobject rarg = NULL;
    cocos2d::IndexBuffer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::IndexBuffer::create((cocos2d::IndexBuffer::IndexType)arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 177);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_IndexBuffer_getIndexNumber(JNIEnv* env, jobject obj) {
    cocos2d::IndexBuffer* ptr = (cocos2d::IndexBuffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getIndexNumber();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_IndexBuffer_getSizePerIndex(JNIEnv* env, jobject obj) {
    cocos2d::IndexBuffer* ptr = (cocos2d::IndexBuffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getSizePerIndex();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_ccj_d3_IndexBuffer_getVBO(JNIEnv* env, jobject obj) {
    cocos2d::IndexBuffer* ptr = (cocos2d::IndexBuffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->getVBO();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jstring JNICALL Java_org_ccj_d3_Mesh_getName(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Mesh_create(JNIEnv* env, jclass cls, jstring arg0, jobject arg1, jobject arg2) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::MeshIndexData* ptr1 = arg1 == NULL ? NULL : (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::MeshSkin* ptr2 = arg2 == NULL ? NULL : (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Mesh* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Mesh::create((std::string&)adapter0, ptr1, ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Mesh_isVisible(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isVisible();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Mesh_setVisible(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVisible(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Mesh_getTexture(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTexture();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Mesh_setTexture__Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Mesh_setTexture__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setTexture((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jshort JNICALL Java_org_ccj_d3_Mesh_getVertexBuffer(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jshort rarg = 0;
    jthrowable exc = NULL;
    try {
        short rvalue = ptr->getVertexBuffer();
        rarg = (jshort)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_ccj_d3_Mesh_getPrimitiveType(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->getPrimitiveType();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Mesh_getAABB(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::AABB* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::AABB*)&ptr->getAABB();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 178);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Mesh_getSkin(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MeshSkin* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSkin();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 179);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Mesh_getMeshIndexData(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MeshIndexData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMeshIndexData();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 180);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Mesh_hasVertexAttrib(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->hasVertexAttrib(arg0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_ccj_d3_Mesh_getIndexBuffer(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->getIndexBuffer();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Mesh_getIndexCount(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getIndexCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_ccj_d3_Mesh_getIndexFormat(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->getIndexFormat();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Mesh_getMeshVertexAttribCount(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMeshVertexAttribCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Mesh_getVertexSizeInBytes(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getVertexSizeInBytes();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Mesh_getGLProgramState(JNIEnv* env, jobject obj) {
    cocos2d::Mesh* ptr = (cocos2d::Mesh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLProgramState* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGLProgramState();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 156);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d3_MeshDatas_resetData(JNIEnv* env, jobject obj) {
    cocos2d::MeshDatas* ptr = (cocos2d::MeshDatas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resetData();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jstring JNICALL Java_org_ccj_d3_MeshIndexData_getId(JNIEnv* env, jobject obj) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getId());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_MeshIndexData_setId(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setId((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_org_ccj_d3_MeshIndexData_getPrimitiveType(JNIEnv* env, jobject obj) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->getPrimitiveType();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshIndexData_getAABB(JNIEnv* env, jobject obj) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::AABB* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::AABB*)&ptr->getAABB();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 178);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshIndexData_getIndexBuffer(JNIEnv* env, jobject obj) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::IndexBuffer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::IndexBuffer*)ptr->getIndexBuffer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 177);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_MeshIndexData_setAABB(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::AABB* ptr0 = arg0 == NULL ? NULL : (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAABB(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_MeshIndexData_setPrimitiveType(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPrimitiveType(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshIndexData_getMeshVertexData(JNIEnv* env, jobject obj) {
    cocos2d::MeshIndexData* ptr = (cocos2d::MeshIndexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::MeshVertexData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::MeshVertexData*)ptr->getMeshVertexData();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 181);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_d3_MeshSkin_getBoneIndex(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Bone3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getBoneIndex(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshSkin_getBoneByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBoneByName((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshSkin_getBoneByIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBoneByIndex(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_MeshSkin_getBoneCount(JNIEnv* env, jobject obj) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getBoneCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshSkin_getRootBone(JNIEnv* env, jobject obj) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getRootBone();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshSkin_getMatrixPalette(JNIEnv* env, jobject obj) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMatrixPalette();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_MeshSkin_getMatrixPaletteSize(JNIEnv* env, jobject obj) {
    cocos2d::MeshSkin* ptr = (cocos2d::MeshSkin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMatrixPaletteSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_d3_MeshVertexData_getMeshVertexAttribCount(JNIEnv* env, jobject obj) {
    cocos2d::MeshVertexData* ptr = (cocos2d::MeshVertexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        const int rvalue = (const int)ptr->getMeshVertexAttribCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_MeshVertexData_getMeshIndexDataByIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::MeshVertexData* ptr = (cocos2d::MeshVertexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MeshIndexData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMeshIndexDataByIndex(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 180);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_MeshVertexData_getMeshIndexDataCount(JNIEnv* env, jobject obj) {
    cocos2d::MeshVertexData* ptr = (cocos2d::MeshVertexData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMeshIndexDataCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT void JNICALL Java_org_ccj_d3_NodeDatas_resetData(JNIEnv* env, jobject obj) {
    cocos2d::NodeDatas* ptr = (cocos2d::NodeDatas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resetData();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_d3_OBB_set(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    cocos2d::OBB* ptr = (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr4 = arg4 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0, *ptr1, *ptr2, *ptr3, *ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_OBB_reset(JNIEnv* env, jobject obj) {
    cocos2d::OBB* ptr = (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reset();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_OBB_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::AABB* ptr0 = arg0 == NULL ? NULL : (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::OBB* rptr = new cocos2d::OBB(*(const cocos2d::AABB*)ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_d3_OBB_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_OBB_intersects(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::OBB* ptr = (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::OBB* ptr0 = arg0 == NULL ? NULL : (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->intersects(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_OBB_transform(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::OBB* ptr = (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->transform(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_OBB_getCorners(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::OBB* ptr = (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getCorners(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_OBB_containPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::OBB* ptr = (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->containPoint(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d3_Ray_set(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Ray* ptr = (cocos2d::Ray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Ray_intersects__Lorg_ccj_d3_OBB_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Ray* ptr = (cocos2d::Ray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::OBB* ptr0 = arg0 == NULL ? NULL : (cocos2d::OBB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->intersects(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_d3_Ray_intersects__Lorg_ccj_d3_AABB_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Ray* ptr = (cocos2d::Ray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::AABB* ptr0 = arg0 == NULL ? NULL : (cocos2d::AABB*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->intersects(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Ray_transform(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Ray* ptr = (cocos2d::Ray*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->transform(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_d3_Skeleton3D_create(JNIEnv* env, jclass cls, jobject arg0) {
    std::vector<NodeData*>* ptr0 = arg0 == NULL ? NULL : (std::vector<NodeData*>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Skeleton3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Skeleton3D::create(*ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 183);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Skeleton3D_updateBoneMatrix(JNIEnv* env, jobject obj) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateBoneMatrix();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Skeleton3D_getBoneIndex(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Bone3D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Bone3D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getBoneIndex(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Skeleton3D_getBoneByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBoneByName((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Skeleton3D_getBoneByIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBoneByIndex(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Skeleton3D_getRootCount(JNIEnv* env, jobject obj) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getRootCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Skeleton3D_getBoneCount(JNIEnv* env, jobject obj) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getBoneCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Skeleton3D_getRootBone(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Skeleton3D* ptr = (cocos2d::Skeleton3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Bone3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getRootBone(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 175);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d3_SkinData_resetData(JNIEnv* env, jobject obj) {
    cocos2d::SkinData* ptr = (cocos2d::SkinData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resetData();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_SkinData_addSkinBoneNames(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SkinData* ptr = (cocos2d::SkinData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->addSkinBoneNames((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_SkinData_getBoneNameIndex(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SkinData* ptr = (cocos2d::SkinData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getBoneNameIndex((std::string&)adapter0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_SkinData_addNodeBoneNames(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SkinData* ptr = (cocos2d::SkinData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->addNodeBoneNames((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_SkinData_getSkinBoneNameIndex(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::SkinData* ptr = (cocos2d::SkinData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getSkinBoneNameIndex((std::string&)adapter0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_allocate__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        cocos2d::Sprite3D* rptr = cocos2d::Sprite3D::create((std::string&)adapter0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_allocate__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        cocos2d::Sprite3D* rptr = cocos2d::Sprite3D::create((std::string&)adapter0, (std::string&)adapter1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_create__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Sprite3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite3D::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 184);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_create__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::Sprite3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Sprite3D::create((std::string&)adapter0, (std::string&)adapter1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 184);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getBoundingBox(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Rect*)new cocos2d::Rect(ptr->getBoundingBox());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Rect_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_setTexture__Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_setTexture__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setTexture((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getAABB(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::AABB* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::AABB*)&ptr->getAABB();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 178);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getMeshByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Mesh* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMeshByName((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getAttachNode(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::AttachNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getAttachNode((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 173);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_removeAttachNode(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeAttachNode((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Sprite3D_getLightMask(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getLightMask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_d3_Sprite3D_getMeshCount(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMeshCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_setLightMask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLightMask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getSkeleton(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Skeleton3D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSkeleton();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 183);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getMesh(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mesh* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMesh();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_setCullFace(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCullFace(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getMeshByIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mesh* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMeshByIndex(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_setCullFaceEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCullFaceEnabled(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_d3_Sprite3D_removeAllAttachNode(JNIEnv* env, jobject obj) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllAttachNode();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_d3_Sprite3D_getMeshArrayByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Sprite3D* ptr = (cocos2d::Sprite3D*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    std::vector<Mesh*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->getMeshArrayByName((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 185);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jint JNICALL Java_org_ccj_Device_getDPI(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = cocos2d::Device::getDPI();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Device_setKeepScreenOn(JNIEnv* env, jclass cls, jboolean arg0) {
    jthrowable exc = NULL;
    try {
        cocos2d::Device::setKeepScreenOn(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Device_setAccelerometerInterval(JNIEnv* env, jclass cls, jfloat arg0) {
    jthrowable exc = NULL;
    try {
        cocos2d::Device::setAccelerometerInterval(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Device_setAccelerometerEnabled(JNIEnv* env, jclass cls, jboolean arg0) {
    jthrowable exc = NULL;
    try {
        cocos2d::Device::setAccelerometerEnabled(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_Director_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Director* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Director::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 186);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Director_init(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_resume(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resume();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_end(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->end();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getEventDispatcher(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::EventDispatcher* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getEventDispatcher();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 187);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_pause(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pause();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getScheduler(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Scheduler* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getScheduler();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 154);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getOpenGLView(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLViewImpl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (cocos2d::GLViewImpl*)ptr->getOpenGLView();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 188);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_Director_getZEye(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getZEye();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getTextureCache(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TextureCache* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTextureCache();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 163);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_stopAnimation(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopAnimation();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setDisplayStats(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDisplayStats((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setDefaultValues(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDefaultValues();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getConsole(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Console* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getConsole();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 189);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_popScene(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->popScene();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_pushScene(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Scene* ptr0 = arg0 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->pushScene(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setAlphaBlending(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAlphaBlending((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setScheduler(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Scheduler* ptr0 = arg0 == NULL ? NULL : (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setScheduler(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setOpenGLView(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::GLViewImpl* ptr0 = arg0 == NULL ? NULL : (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setOpenGLView(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_runWithScene(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Scene* ptr0 = arg0 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->runWithScene(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getRunningScene(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getRunningScene();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 153);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_popToRootScene(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->popToRootScene();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_purgeCachedData(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->purgeCachedData();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_startAnimation(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->startAnimation();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_Director_getTotalFrames(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTotalFrames();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_drawScene(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->drawScene();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_convertToGL(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->convertToGL(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_mainLoop(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->mainLoop();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_replaceScene(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Scene* ptr0 = arg0 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->replaceScene(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_Director_getDeltaTime(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDeltaTime();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getVisibleOrigin(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getVisibleOrigin());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Director_isDisplayStats(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isDisplayStats();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setDepthTest(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDepthTest((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Director_isPaused(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isPaused();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getVisibleSize(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Size(ptr->getVisibleSize());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Size_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getWinSize(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getWinSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_Director_getFrameRate(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getFrameRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setContentScaleFactor(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setContentScaleFactor(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_Director_getContentScaleFactor(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getContentScaleFactor();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Director_getWinSizeInPixels(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Size(ptr->getWinSizeInPixels());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Size_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setEventDispatcher(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::EventDispatcher* ptr0 = arg0 == NULL ? NULL : (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setEventDispatcher(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Director_isNextDeltaTimeZero(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isNextDeltaTimeZero();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setNextDeltaTimeZero(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setNextDeltaTimeZero((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_popToSceneStackLevel(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->popToSceneStackLevel(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setGLDefaultValues(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGLDefaultValues();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Director_isSendCleanupToScene(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isSendCleanupToScene();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_ccj_Director_getAnimationInterval(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jdouble rarg = 0;
    jthrowable exc = NULL;
    try {
        double rvalue = ptr->getAnimationInterval();
        rarg = (jdouble)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_Director_getSecondsPerFrame(JNIEnv* env, jobject obj) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSecondsPerFrame();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Director_setAnimationInterval(JNIEnv* env, jobject obj, jdouble arg0) {
    cocos2d::Director* ptr = (cocos2d::Director*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnimationInterval(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}


JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEAnimation_createActions(JNIEnv* env, jobject obj) {
    cce::CCEAnimation* ptr = (cce::CCEAnimation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Spawn* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->createActions();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 113);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEController_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cce::CCEController* rptr = cce::CCEController::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_editor_cce_CCEController_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_editor_cce_CCEController_isTouchEnabled(JNIEnv* env, jobject obj) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isTouchEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEController_setTouchEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->setTouchEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEController_setTouchMode(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->setTouchMode((cocos2d::Touch::DispatchMode)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_editor_cce_CCEController_getTouchMode(JNIEnv* env, jobject obj) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getTouchMode();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_editor_cce_CCEController_getTouchPriority(JNIEnv* env, jobject obj) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTouchPriority();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEController_setTouchPriority(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->setTouchPriority(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEController_setKeypadEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->setKeypadEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_editor_cce_CCEController_isKeypadEnabled(JNIEnv* env, jobject obj) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isKeypadEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEController_setAccelerometerEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->setAccelerometerEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_editor_cce_CCEController_isAccelerometerEnabled(JNIEnv* env, jobject obj) {
    cce::CCEController* ptr = (cce::CCEController*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
   jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isAccelerometerEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_read(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Ref* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->read((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getNode(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getNode(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getRef__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Ref* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getRef((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getRef__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Ref* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getRef(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cce::CCEReader* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cce::CCEReader::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 190);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getComponentNames(JNIEnv* env, jobject obj) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>(ptr->getComponentNames());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_VectorString_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 8);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getComponentNodes(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Vector<cocos2d::Node*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->getComponentNodes((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 150);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointGear(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointGear* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointGear(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 191);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointGroove(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointGroove* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointGroove(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 192);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointLimit(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointLimit* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointLimit(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 193);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointPin(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointPin* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointPin(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 194);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointDistance(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointDistance* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointDistance(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 195);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointRotaryLimit(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointRotaryLimit* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointRotaryLimit(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 196);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointRotarySpring(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointRotarySpring* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointRotarySpring(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 197);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointSpring(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointSpring* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointSpring(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 198);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapeBox(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapeBox(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 199);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapeCircle(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeCircle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapeCircle(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 200);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointRatchet(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointRatchet* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointRatchet(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 201);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapeEdgeBox(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapeEdgeBox(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 202);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointMotor(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointMotor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointMotor(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 203);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJointFixed(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointFixed* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJointFixed(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 204);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEReader_playAutoAnimations(JNIEnv* env, jobject obj) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->playAutoAnimations();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapeEdgeChain(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeChain* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapeEdgeChain(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 205);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapePolygon(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapePolygon(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 206);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapeEdgeSegment(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeSegment* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapeEdgeSegment(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 207);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShapeEdgePolygon(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShapeEdgePolygon(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 208);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getLabel__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLabel((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getLabel__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Label* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLabel(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 134);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getAnimation__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cce::CCEAnimation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getAnimation((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 209);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getAnimation__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cce::CCEAnimation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getAnimation(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 209);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getScene__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getScene((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 153);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getScene__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getScene(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 153);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsBody(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsBody(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getSprite__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSprite((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getSprite__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Sprite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getSprite(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getLayer__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Layer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLayer(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getLayer__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Layer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getLayer((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getMenu__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Menu* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMenu(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getMenu__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::Menu* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMenu((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEReader_stopAllAnimation(JNIEnv* env, jobject obj) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopAllAnimation();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEReader_playAnimation__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->playAnimation(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEReader_playAnimation__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->playAnimation((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getWidget__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getWidget(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getWidget__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getWidget((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsJoint(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJoint* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsJoint(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 211);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getPhysicsShape(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsShape(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getMenuItem__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::MenuItem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMenuItem((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_editor_cce_CCEReader_getMenuItem__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::MenuItem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getMenuItem(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEReader_stopAnimation__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->stopAnimation((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_editor_cce_CCEReader_stopAnimation__I(JNIEnv* env, jobject obj, jint arg0) {
    cce::CCEReader* ptr = (cce::CCEReader*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopAnimation(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jint JNICALL Java_org_ccj_event_Event_getType(JNIEnv* env, jobject obj) {
    cocos2d::Event* ptr = (cocos2d::Event*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_event_Event_isStopped(JNIEnv* env, jobject obj) {
    cocos2d::Event* ptr = (cocos2d::Event*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isStopped();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_event_Event_getSourceId(JNIEnv* env, jobject obj) {
    cocos2d::Event* ptr = (cocos2d::Event*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getSourceId());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_Event_setSourceId(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::Event* ptr = (cocos2d::Event*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setSourceId((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_Event_stopPropagation(JNIEnv* env, jobject obj) {
    cocos2d::Event* ptr = (cocos2d::Event*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopPropagation();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_Event_getCurrentTarget(JNIEnv* env, jobject obj) {
    cocos2d::Event* ptr = (cocos2d::Event*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getCurrentTarget();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventAcceleration_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Acceleration* ptr0 = arg0 == NULL ? NULL : (cocos2d::Acceleration*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::EventAcceleration* rptr = new cocos2d::EventAcceleration(*(const cocos2d::Acceleration*)ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_event_EventAcceleration_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventAcceleration_getAcceleration(JNIEnv* env, jobject obj) {
    cocos2d::EventAcceleration* ptr = (cocos2d::EventAcceleration*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Acceleration* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getAcceleration();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 212);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventCustom_allocate(JNIEnv* env, jobject obj, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        cocos2d::EventCustom* rptr = new cocos2d::EventCustom((std::string&)adapter0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_event_EventCustom_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_event_EventCustom_getEventName(JNIEnv* env, jobject obj) {
    cocos2d::EventCustom* ptr = (cocos2d::EventCustom*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getEventName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventCustom_getUserData(JNIEnv* env, jobject obj) {
    cocos2d::EventCustom* ptr = (cocos2d::EventCustom*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getUserData();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventCustom_setUserData(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::EventCustom* ptr = (cocos2d::EventCustom*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->setUserData(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_setPriority(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::EventListener* ptr0 = arg0 == NULL ? NULL : (cocos2d::EventListener*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setPriority(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_dispatchEvent(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Event* ptr0 = arg0 == NULL ? NULL : (cocos2d::Event*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->dispatchEvent(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_event_EventDispatcher_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_removeEventListenersForTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeEventListenersForTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_removeAllEventListeners(JNIEnv* env, jobject obj) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllEventListeners();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_removeCustomEventListeners(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeCustomEventListeners((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_resumeEventListenersForTarget(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->resumeEventListenersForTarget(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_dispatchCustomEvent(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Ref* ptr1 = arg1 == NULL ? NULL : (cocos2d::Ref*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->dispatchCustomEvent((std::string&)adapter0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_removeEventListenersForType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeEventListenersForType((cocos2d::EventListener::Type)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_pauseEventListenersForTarget(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->pauseEventListenersForTarget(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_addEventListenerWithSceneGraphPriority(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::EventListener* ptr0 = arg0 == NULL ? NULL : (cocos2d::EventListener*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Node* ptr1 = arg1 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerWithSceneGraphPriority(ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_addEventListenerWithFixedPriority(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::EventListener* ptr0 = arg0 == NULL ? NULL : (cocos2d::EventListener*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerWithFixedPriority(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventDispatcher_removeEventListener(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::EventDispatcher* ptr = (cocos2d::EventDispatcher*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::EventListener* ptr0 = arg0 == NULL ? NULL : (cocos2d::EventListener*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeEventListener(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventFocus_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::ui::Widget* ptr1 = arg1 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::EventFocus* rptr = new cocos2d::EventFocus(ptr0, ptr1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_event_EventFocus_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventKeyboard_allocate(JNIEnv* env, jobject obj, jint arg0, jboolean arg1) {
    jthrowable exc = NULL;
    try {
        cocos2d::EventKeyboard* rptr = new cocos2d::EventKeyboard((cocos2d::EventKeyboard::KeyCode)arg0, arg1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_event_EventKeyboard_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_event_EventKeyboard_getKeyCode(JNIEnv* env, jobject obj) {
    cocos2d::EventKeyboard* ptr = (cocos2d::EventKeyboard*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getKeyCode();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_event_EventListener_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::EventListener* ptr = (cocos2d::EventListener*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventListener_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::EventListener* ptr = (cocos2d::EventListener*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventListenerJava_allocate(JNIEnv* env, jobject obj, jint arg0, jstring arg1) {
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ccj::JavaEventListener* rptr = ccj::JavaEventListener::create((cocos2d::EventListener::Type)arg0, (std::string&)adapter1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_event_EventListenerJava_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_event_EventListenerTouchAllAtOnce_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ccj::JavaEventListenerTouchAllAtOnce* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ccj::JavaEventListenerTouchAllAtOnce::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 213);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_event_EventListenerTouchOneByOne_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ccj::JavaEventListenerTouchOneByOne* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ccj::JavaEventListenerTouchOneByOne::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 214);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getLocation(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getLocation());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_event_EventMouse_getCursorY(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getCursorY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_event_EventMouse_getMouseButton(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMouseButton();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventMouse_setScrollData(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScrollData(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_event_EventMouse_getScrollX(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScrollX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventMouse_setMouseButton(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMouseButton(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_event_EventMouse_getScrollY(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScrollY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_event_EventMouse_getCursorX(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getCursorX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventMouse_setCursorPosition(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCursorPosition(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getStartLocation(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getStartLocation());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getDelta(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getDelta());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getLocationInView(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getLocationInView());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getStartLocationInView(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getStartLocationInView());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getPreviousLocation(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getPreviousLocation());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventMouse_getPreviousLocationInView(JNIEnv* env, jobject obj) {
    cocos2d::EventMouse* ptr = (cocos2d::EventMouse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)new cocos2d::Vec2(ptr->getPreviousLocationInView());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_event_EventTouch_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::EventTouch* rptr = new cocos2d::EventTouch();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_event_EventTouch_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_event_EventTouch_getEventCode(JNIEnv* env, jobject obj) {
    cocos2d::EventTouch* ptr = (cocos2d::EventTouch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getEventCode();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_event_EventTouch_setEventCode(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::EventTouch* ptr = (cocos2d::EventTouch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEventCode((cocos2d::EventTouch::EventCode)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_event_EventTouch_getTouches(JNIEnv* env, jobject obj) {
    cocos2d::EventTouch* ptr = (cocos2d::EventTouch*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const std::vector<cocos2d::Touch*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const std::vector<cocos2d::Touch*>*)&ptr->getTouches();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_GLView_create(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::GLViewImpl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLViewImpl::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 188);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_end(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->end();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_handleTouchesCancel(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jfloatArray arg2, jfloatArray arg3) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    float* ptr2 = arg2 == NULL ? NULL : env->GetFloatArrayElements(arg2, NULL);
    float* ptr3 = arg3 == NULL ? NULL : env->GetFloatArrayElements(arg3, NULL);
    jthrowable exc = NULL;
    try {
        ptr->handleTouchesCancel(arg0, ptr1, ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (arg2 != NULL) env->ReleaseFloatArrayElements(arg2, (jfloat*)ptr2, 0);
    if (arg3 != NULL) env->ReleaseFloatArrayElements(arg3, (jfloat*)ptr3, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_GLView_getResolutionPolicy(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getResolutionPolicy();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_setIMEKeyboardState(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setIMEKeyboardState((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_setScissorInPoints(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScissorInPoints(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_handleTouchesBegin(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jfloatArray arg2, jfloatArray arg3) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    float* ptr2 = arg2 == NULL ? NULL : env->GetFloatArrayElements(arg2, NULL);
    float* ptr3 = arg3 == NULL ? NULL : env->GetFloatArrayElements(arg3, NULL);
    jthrowable exc = NULL;
    try {
        ptr->handleTouchesBegin(arg0, ptr1, ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (arg2 != NULL) env->ReleaseFloatArrayElements(arg2, (jfloat*)ptr2, 0);
    if (arg3 != NULL) env->ReleaseFloatArrayElements(arg3, (jfloat*)ptr3, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_setDesignResolutionSize(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jint arg2) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDesignResolutionSize(arg0, arg1, (ResolutionPolicy)arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getDesignResolutionSize(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getDesignResolutionSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_createWithFullScreen(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::GLViewImpl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLViewImpl::createWithFullScreen((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 188);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_setViewPortInPoints(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setViewPortInPoints(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_handleTouchesMove(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jfloatArray arg2, jfloatArray arg3) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    float* ptr2 = arg2 == NULL ? NULL : env->GetFloatArrayElements(arg2, NULL);
    float* ptr3 = arg3 == NULL ? NULL : env->GetFloatArrayElements(arg3, NULL);
    jthrowable exc = NULL;
    try {
        ptr->handleTouchesMove(arg0, ptr1, ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (arg2 != NULL) env->ReleaseFloatArrayElements(arg2, (jfloat*)ptr2, 0);
    if (arg3 != NULL) env->ReleaseFloatArrayElements(arg3, (jfloat*)ptr3, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_GLView_getScaleX(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScaleX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_GLView_getScaleY(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getScaleY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_handleTouchesEnd(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jfloatArray arg2, jfloatArray arg3) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    float* ptr2 = arg2 == NULL ? NULL : env->GetFloatArrayElements(arg2, NULL);
    float* ptr3 = arg3 == NULL ? NULL : env->GetFloatArrayElements(arg3, NULL);
    jthrowable exc = NULL;
    try {
        ptr->handleTouchesEnd(arg0, ptr1, ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (arg2 != NULL) env->ReleaseFloatArrayElements(arg2, (jfloat*)ptr2, 0);
    if (arg3 != NULL) env->ReleaseFloatArrayElements(arg3, (jfloat*)ptr3, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getScissorRect(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Rect(ptr->getScissorRect());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Rect_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_GLView_isScissorEnabled(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isScissorEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getViewPortRect(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Rect*)&ptr->getViewPortRect();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getVisibleRect(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Rect(ptr->getVisibleRect());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Rect_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_GLView_getViewName(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getViewName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_setViewName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setViewName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_swapBuffers(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->swapBuffers();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_pollInputEvents(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pollInputEvents();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_GLView_isOpenGLReady(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isOpenGLReady();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_createWithRect__Ljava_lang_String_2Lorg_ccj_math_Rect_2F(JNIEnv* env, jclass cls, jstring arg0, jobject arg1, jfloat arg2) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLViewImpl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLViewImpl::createWithRect((std::string&)adapter0, *ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 188);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_createWithRect__Ljava_lang_String_2Lorg_ccj_math_Rect_2(JNIEnv* env, jclass cls, jstring arg0, jobject arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLViewImpl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLViewImpl::createWithRect((std::string&)adapter0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 188);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getFrameSize(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getFrameSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_GLView_setFrameSize(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFrameSize(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getVisibleOrigin(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getVisibleOrigin());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_GLView_getVisibleSize(JNIEnv* env, jobject obj) {
    cocos2d::GLViewImpl* ptr = (cocos2d::GLViewImpl*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Size(ptr->getVisibleSize());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Size_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_add__FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->add(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_add__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->add(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_add__Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->add(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_add__Lorg_ccj_math_Mat4_2Lorg_ccj_math_Mat4_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr2 = arg2 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::add(*ptr0, *ptr1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_set__FFFFFFFFFFFFFFFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3, jfloat arg4, jfloat arg5, jfloat arg6, jfloat arg7, jfloat arg8, jfloat arg9, jfloat arg10, jfloat arg11, jfloat arg12, jfloat arg13, jfloat arg14, jfloat arg15) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_set___3F(JNIEnv* env, jobject obj, jfloatArray arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr0 = arg0 == NULL ? NULL : env->GetFloatArrayElements(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->set(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseFloatArrayElements(arg0, (jfloat*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_set__Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotate__Lorg_ccj_math_Vec3_2FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1, jobject arg2) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr2 = arg2 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->rotate(*ptr0, arg1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotate__Lorg_ccj_math_Vec3_2F(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->rotate(*ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_scale__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->scale(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_scale__FFFLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jobject arg3) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr3 = arg3 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->scale(arg0, arg1, arg2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_scale__FFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scale(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_scale__FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->scale(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_scale__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scale(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_subtract__Lorg_ccj_math_Mat4_2Lorg_ccj_math_Mat4_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr2 = arg2 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::subtract(*ptr0, *ptr1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_subtract__Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->subtract(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_multiply__FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->multiply(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_multiply__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->multiply(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_multiply__Lorg_ccj_math_Mat4_2Lorg_ccj_math_Mat4_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr2 = arg2 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::multiply(*ptr0, *ptr1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_multiply__Lorg_ccj_math_Mat4_2FLorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jobject arg2) {
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr2 = arg2 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::multiply(*ptr0, arg1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_multiply__Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->multiply(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_negate(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->negate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Mat4_inverse(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->inverse();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createOrthographicOffCenter(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3, jfloat arg4, jfloat arg5, jobject arg6) {
    cocos2d::Mat4* ptr6 = arg6 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createOrthographicOffCenter(arg0, arg1, arg2, arg3, arg4, arg5, ptr6);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createTranslation__FFFLorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jobject arg3) {
    cocos2d::Mat4* ptr3 = arg3 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createTranslation(arg0, arg1, arg2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createTranslation__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createTranslation(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getScale(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getScale(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createLookAt__FFFFFFFFFLorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3, jfloat arg4, jfloat arg5, jfloat arg6, jfloat arg7, jfloat arg8, jobject arg9) {
    cocos2d::Mat4* ptr9 = arg9 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg9, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createLookAt(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, ptr9);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createLookAt__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr3 = arg3 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createLookAt(*ptr0, *ptr1, *ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createBillboard__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr3 = arg3 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createBillboard(*ptr0, *ptr1, *ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createBillboard__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr4 = arg4 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createBillboard(*ptr0, *ptr1, *ptr2, *ptr3, ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createScale__FFFLorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jobject arg3) {
    cocos2d::Mat4* ptr3 = arg3 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createScale(arg0, arg1, arg2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createScale__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createScale(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createRotationZ(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createRotationZ(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Mat4_getInversed(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Mat4(ptr->getInversed());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Mat4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createRotation(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jobject arg2) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr2 = arg2 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createRotation(*ptr0, arg1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getDownVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getDownVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transpose(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->transpose();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createRotationX(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createRotationX(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createRotationY(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createRotationY(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotateY__FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->rotateY(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotateY__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->rotateY(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getUpVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getUpVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotateZ__FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->rotateZ(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotateZ__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->rotateZ(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotateX__F(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->rotateX(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_rotateX__FLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->rotateX(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_setIdentity(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setIdentity();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getTranslation(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getTranslation(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getRightVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getRightVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getLeftVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getLeftVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformVector__FFFFLorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3, jobject arg4) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr4 = arg4 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformVector(arg0, arg1, arg2, arg3, ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformVector__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformVector(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformVector__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformVector__Lorg_ccj_math_Vec4_2Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformVector(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformVector__Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getBackVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getBackVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Mat4_getNegated(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Mat4(ptr->getNegated());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Mat4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_getForwardVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->getForwardVector(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_setZero(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setZero();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Mat4_determinant(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->determinant();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformPoint__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformPoint(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_transformPoint__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->transformPoint(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_translate__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->translate(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_translate__FFFLorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jobject arg3) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr3 = arg3 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->translate(arg0, arg1, arg2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_translate__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->translate(*ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_translate__FFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->translate(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Mat4_getTransposed(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Mat4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Mat4(ptr->getTransposed());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Mat4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Mat4_isIdentity(JNIEnv* env, jobject obj) {
    cocos2d::Mat4* ptr = (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isIdentity();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createOrthographic(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3, jobject arg4) {
    cocos2d::Mat4* ptr4 = arg4 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createOrthographic(arg0, arg1, arg2, arg3, ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Mat4_createPerspective(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3, jobject arg4) {
    cocos2d::Mat4* ptr4 = arg4 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        cocos2d::Mat4::createPerspective(arg0, arg1, arg2, arg3, ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jboolean JNICALL Java_org_ccj_math_Rect_equals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->equals(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Rect_getSize(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    rptr = &ptr->size;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 110);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Rect_allocate__FFFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::Rect* rptr = new cocos2d::Rect(arg0, arg1, arg2, arg3);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Rect_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Rect_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Rect* rptr = new cocos2d::Rect();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Rect_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Rect_allocate__Lorg_ccj_math_Rect_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::Rect* rptr = new cocos2d::Rect(*ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Rect_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Rect_assign(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->operator=(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Rect_setRect(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRect(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Rect_getMinX(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMinX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Rect_getMidX(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMidX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Rect_getOrigin(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    rptr = &ptr->origin;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 10);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Rect_containsPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->containsPoint(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Rect_getMaxY(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMaxY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Rect_intersectsRect(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->intersectsRect(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Rect_unionWithRect(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Rect* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Rect(ptr->unionWithRect(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Rect_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 142);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Rect_getMidY(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMidY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Rect_getMaxX(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMaxX();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Rect_getMinY(JNIEnv* env, jobject obj) {
    cocos2d::Rect* ptr = (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMinY();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_math_Size_equals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Size* ptr = (cocos2d::Size*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->equals(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Size_setSize(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::Size* ptr = (cocos2d::Size*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSize(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Size_allocate(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    jthrowable exc = NULL;
    try {
        cocos2d::Size* rptr = new cocos2d::Size(arg0, arg1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Size_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Size_getWidth(JNIEnv* env, jobject obj) {
    cocos2d::Size* ptr = (cocos2d::Size*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->width;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Size_getHeight(JNIEnv* env, jobject obj) {
    cocos2d::Size* ptr = (cocos2d::Size*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->height;
    rarg = (jfloat)rvalue;
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_equals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->equals(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getLength(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLength();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_rotate(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->rotate(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec2_allocate__Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::Vec2* rptr = new cocos2d::Vec2(*ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec2_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec2_allocate__FF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    jthrowable exc = NULL;
    try {
        cocos2d::Vec2* rptr = new cocos2d::Vec2(arg0, arg1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec2_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_equal(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator==(*(const cocos2d::Vec2*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_project(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->project(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getX(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->x;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_assign__Lorg_ccj_math_Size_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->operator=(*(const cocos2d::Size*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_assign__Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->operator=(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_isSegmentIntersect(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = cocos2d::Vec2::isSegmentIntersect(*ptr0, *ptr1, *ptr2, *ptr3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_getIntersectPoint(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(cocos2d::Vec2::getIntersectPoint(*ptr0, *ptr1, *ptr2, *ptr3));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_minus(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->operator-(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_getMidpoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getMidpoint(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_plus(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->operator+(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_notEqual(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator!=(*(const cocos2d::Vec2*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_fuzzyEquals(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->fuzzyEquals(*ptr0, arg1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getLengthSq(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLengthSq();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getAngle__(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngle();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getAngle__Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngle(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_dot(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->dot(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_cross(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->cross(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_getPerp(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPerp());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec2_setPoint(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPoint(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getDistanceSq(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDistanceSq(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getDistance(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDistance(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_lerp(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->lerp(*ptr0, arg1));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_isLineOverlap(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = cocos2d::Vec2::isLineOverlap(*ptr0, *ptr1, *ptr2, *ptr3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_getRPerp(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getRPerp());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_getClampPoint(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getClampPoint(*ptr0, *ptr1));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec2_isLineParallel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = cocos2d::Vec2::isLineParallel(*ptr0, *ptr1, *ptr2, *ptr3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_rotateByAngle(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->rotateByAngle(*ptr0, arg1));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_unrotate(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->unrotate(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec2_forAngle(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->forAngle(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec2_getY(JNIEnv* env, jobject obj) {
    cocos2d::Vec2* ptr = (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->y;
    rarg = (jfloat)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_add(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->add(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec3_equals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator==(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_length(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->length();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_set___3F(JNIEnv* env, jobject obj, jfloatArray arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr0 = arg0 == NULL ? NULL : env->GetFloatArrayElements(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->set(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseFloatArrayElements(arg0, (jfloat*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_set__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_set__FFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_set__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_normalize(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->normalize();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_divide(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec3(ptr->operator/(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_scale(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scale(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_allocate__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::Vec3* rptr = new cocos2d::Vec3(*ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec3_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_allocate___3F(JNIEnv* env, jobject obj, jfloatArray arg0) {
    float* ptr0 = arg0 == NULL ? NULL : env->GetFloatArrayElements(arg0, NULL);
    jthrowable exc = NULL;
    try {
        cocos2d::Vec3* rptr = new cocos2d::Vec3(ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec3_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseFloatArrayElements(arg0, (jfloat*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Vec3* rptr = new cocos2d::Vec3();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec3_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_allocate__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::Vec3* rptr = new cocos2d::Vec3(*ptr0, *ptr1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec3_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_allocate__FFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2) {
    jthrowable exc = NULL;
    try {
        cocos2d::Vec3* rptr = new cocos2d::Vec3(arg0, arg1, arg2);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec3_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_subtract(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->subtract(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec3_isOne(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isOne();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec3_isZero(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isZero();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_multiply(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec3(ptr->operator*(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_negate(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->negate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_minus__(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec3(ptr->operator-());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_minus__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec3(ptr->operator-(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_plus(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)new cocos2d::Vec3(ptr->operator+(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_dot__Lorg_ccj_math_Vec3_2Lorg_ccj_math_Vec3_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::Vec3::dot(*ptr0, *ptr1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_dot__Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->dot(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_cross(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->cross(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_distance(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->distance(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec3_lessThan(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator<(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_minusEquals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator-=(*ptr0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_getNormalized(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec3*)new cocos2d::Vec3(ptr->getNormalized());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_lengthSquared(JNIEnv* env, jobject obj) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->lengthSquared();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_distanceSquared(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->distanceSquared(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_fromColor(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec3(cocos2d::Vec3::fromColor(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec3_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_smooth(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1, jfloat arg2) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->smooth(*ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_plusEquals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator+=(*ptr0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec3_clamp(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->clamp(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec3_notEquals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator!=(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec3_angle(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::Vec3::angle(*ptr0, *ptr1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec3_multiplyEquals(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec3* ptr = (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec3* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator*=(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_add(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->add(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec4_equals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator==(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_length(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->length();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_set__Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_set__FFFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_set___3F(JNIEnv* env, jobject obj, jfloatArray arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr0 = arg0 == NULL ? NULL : env->GetFloatArrayElements(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->set(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseFloatArrayElements(arg0, (jfloat*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_set__Lorg_ccj_math_Vec4_2Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->set(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_normalize(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->normalize();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_divide(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator/(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_scale(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scale(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Vec4* rptr = new cocos2d::Vec4();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec4_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_allocate___3F(JNIEnv* env, jobject obj, jfloatArray arg0) {
    float* ptr0 = arg0 == NULL ? NULL : env->GetFloatArrayElements(arg0, NULL);
    jthrowable exc = NULL;
    try {
        cocos2d::Vec4* rptr = new cocos2d::Vec4(ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec4_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseFloatArrayElements(arg0, (jfloat*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_allocate__FFFF(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::Vec4* rptr = new cocos2d::Vec4(arg0, arg1, arg2, arg3);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec4_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_allocate__Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::Vec4* rptr = new cocos2d::Vec4(*ptr0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec4_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_allocate__Lorg_ccj_math_Vec4_2Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::Vec4* rptr = new cocos2d::Vec4(*ptr0, *ptr1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_math_Vec4_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_subtract(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->subtract(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec4_isOne(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isOne();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec4_isZero(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isZero();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_multiply(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator*(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_negate(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->negate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_minus__Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator-(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_minus__(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator-());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_plus(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator+(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_dot__Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->dot(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_dot__Lorg_ccj_math_Vec4_2Lorg_ccj_math_Vec4_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::Vec4::dot(*ptr0, *ptr1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_distance(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->distance(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec4_lessThan(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator<(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_minusEquals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator-=(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_getNormalized(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->getNormalized());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_lengthSquared(JNIEnv* env, jobject obj) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->lengthSquared();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_distanceSquared(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->distanceSquared(*ptr0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_fromColor(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(cocos2d::Vec4::fromColor(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_plusEquals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator+=(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_math_Vec4_clamp(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->clamp(*ptr0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_math_Vec4_notEquals(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->operator!=(*ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_math_Vec4_angle(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::Vec4::angle(*ptr0, *ptr1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_math_Vec4_multiplyEquals(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Vec4* ptr = (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec4* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec4(ptr->operator*=(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec4_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 182);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_net_HttpClient_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::network::HttpClient* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::network::HttpClient::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 216);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_net_HttpClient_getTimeoutForRead(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpClient* ptr = (cocos2d::network::HttpClient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTimeoutForRead();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpClient_setTimeoutForRead(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::network::HttpClient* ptr = (cocos2d::network::HttpClient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTimeoutForRead(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpClient_setTimeoutForConnect(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::network::HttpClient* ptr = (cocos2d::network::HttpClient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTimeoutForConnect(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_net_HttpClient_getTimeoutForConnect(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpClient* ptr = (cocos2d::network::HttpClient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTimeoutForConnect();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpClient_enableCookies(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::network::HttpClient* ptr = (cocos2d::network::HttpClient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->enableCookies(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpClient_send(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::network::HttpClient* ptr = (cocos2d::network::HttpClient*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::network::HttpRequest* ptr0 = arg0 == NULL ? NULL : (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->send(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpClient_destroyInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        cocos2d::network::HttpClient::destroyInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_00024HttpResponseCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.net.HttpRequest.HttpResponseCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback_deallocate);
        //JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback::call (cocos2d::network::HttpClient* arg0, cocos2d::network::HttpResponse* arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::network::HttpClient* ptr0 = NULL;
    ptr0 = (cocos2d::network::HttpClient*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 216);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = NULL;
    cocos2d::network::HttpResponse* ptr1 = NULL;
    ptr1 = (cocos2d::network::HttpResponse*)arg1;
    if (ptr1 != NULL) { 
        obj1 = JavaCPP_createPointer(env, 217);
    }
    if (obj1 != NULL) { 
        env->SetLongField(obj1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    }
    args[1].l = obj1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 218));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.net.HttpRequest.HttpResponseCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 218, "call", "(Lorg/ccj/net/HttpClient;Lorg/ccj/net/HttpResponse;)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.net.HttpRequest.HttpResponseCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"private void org.ccj.net.HttpRequest$HttpResponseCallback.call(org.ccj.net.HttpClient,org.ccj.net.HttpResponse)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::network::HttpRequest* rptr = new cocos2d::network::HttpRequest();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_net_HttpRequest_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_net_HttpRequest_getHeaders(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>(ptr->getHeaders());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_VectorString_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 8);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_net_HttpRequest_getUrl(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->getUrl();
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_setUrl(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUrl(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_net_HttpRequest_getRequestDataSize(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getRequestDataSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_setResponseCallback(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_net_HttpRequest_00024HttpResponseCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->setResponseCallback((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_net_HttpRequest_getRequestType(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        cocos2d::network::HttpRequest::Type rvalue = (cocos2d::network::HttpRequest::Type)ptr->getRequestType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_setRequestType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRequestType((cocos2d::network::HttpRequest::Type)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_setHeaders(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    std::vector<std::string>* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setHeaders(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_net_HttpRequest_getTag(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->getTag();
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_setTag(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setTag(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_net_HttpRequest_getRequestData(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->getRequestData();
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_HttpRequest_setRequestData(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::network::HttpRequest* ptr = (cocos2d::network::HttpRequest*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setRequestData(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jlong JNICALL Java_org_ccj_net_HttpResponse_getResponseCode(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpResponse* ptr = (cocos2d::network::HttpResponse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->getResponseCode();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_net_HttpResponse_getResponseHeader(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpResponse* ptr = (cocos2d::network::HttpResponse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    std::vector<char>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getResponseHeader();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 219);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_net_HttpResponse_getResponseData(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpResponse* ptr = (cocos2d::network::HttpResponse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    std::vector<char>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getResponseData();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 219);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_net_HttpResponse_getErrorBuffer(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpResponse* ptr = (cocos2d::network::HttpResponse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->getErrorBuffer();
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_net_HttpResponse_isSucceed(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpResponse* ptr = (cocos2d::network::HttpResponse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isSucceed();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_net_HttpResponse_getHttpRequest(JNIEnv* env, jobject obj) {
    cocos2d::network::HttpResponse* ptr = (cocos2d::network::HttpResponse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::network::HttpRequest* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getHttpRequest();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 220);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_net_WebSocket_init(JNIEnv* env, jobject obj, jobject arg0, jstring arg1) {
    cocos2d::network::WebSocket* ptr = (cocos2d::network::WebSocket*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    ccj::JavaWebSocketDelegate* ptr0 = arg0 == NULL ? NULL : (ccj::JavaWebSocketDelegate*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init((cocos2d::network::WebSocket::Delegate&)*ptr0, (std::string&)adapter1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_net_WebSocket_close(JNIEnv* env, jobject obj) {
    cocos2d::network::WebSocket* ptr = (cocos2d::network::WebSocket*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->close();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_WebSocket_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::network::WebSocket* rptr = new cocos2d::network::WebSocket();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_net_WebSocket_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_WebSocket_send___3BI(JNIEnv* env, jobject obj, jbyteArray arg0, jint arg1) {
    cocos2d::network::WebSocket* ptr = (cocos2d::network::WebSocket*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    signed char* ptr0 = arg0 == NULL ? NULL : env->GetByteArrayElements(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->send((const unsigned char *)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseByteArrayElements(arg0, (jbyte*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_net_WebSocket_send__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::network::WebSocket* ptr = (cocos2d::network::WebSocket*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->send((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_net_WebSocket_getReadyState(JNIEnv* env, jobject obj) {
    cocos2d::network::WebSocket* ptr = (cocos2d::network::WebSocket*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        cocos2d::network::WebSocket::State rvalue = (cocos2d::network::WebSocket::State)ptr->getReadyState();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_net_WebSocketDelegate_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ccj::JavaWebSocketDelegate* rptr = new ccj::JavaWebSocketDelegate();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_net_WebSocketDelegate_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleExplosion_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleExplosion* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleExplosion::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 221);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleExplosion_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleExplosion* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleExplosion::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 221);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleFire_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleFire* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleFire::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 222);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleFire_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleFire* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleFire::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 222);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleFireworks_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleFireworks* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleFireworks::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 223);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleFireworks_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleFireworks* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleFireworks::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 223);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleFlower_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleFlower* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleFlower::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 224);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleFlower_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleFlower* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleFlower::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 224);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleGalaxy_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleGalaxy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleGalaxy::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 225);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleGalaxy_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleGalaxy* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleGalaxy::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 225);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleMeteor_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleMeteor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleMeteor::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 226);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleMeteor_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleMeteor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleMeteor::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 226);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleRain_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleRain* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleRain::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 227);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleRain_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleRain* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleRain::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 227);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSmoke_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleSmoke* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSmoke::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 228);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSmoke_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleSmoke* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSmoke::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 228);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSnow_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleSnow* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSnow::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 229);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSnow_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleSnow* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSnow::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 229);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSpiral_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleSpiral* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSpiral::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 230);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSpiral_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleSpiral* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSpiral::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 230);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSun_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleSun* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSun::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 231);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSun_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleSun* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSun::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 231);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_create(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::ParticleSystem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSystem::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 232);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_isActive(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isActive();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleSystem* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSystem::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 232);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getRotatePerSecondVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotatePerSecondVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setTotalParticles(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTotalParticles(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setRotatePerSecond(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotatePerSecond(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setRadialAccelVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRadialAccelVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getTangentialAccel(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getTangentialAccel();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setSourcePosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSourcePosition(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartRadiusVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartRadiusVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getRadialAccelVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRadialAccelVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setAutoRemoveOnFinish(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAutoRemoveOnFinish((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_isAutoRemoveOnFinish(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isAutoRemoveOnFinish();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setTangentialAccelVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTangentialAccelVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getStartRadiusVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStartRadiusVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_particle_ParticleSystem_getTotalParticles(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTotalParticles();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setRotatePerSecondVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotatePerSecondVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getTangentialAccelVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getTangentialAccelVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getSourcePosition(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getSourcePosition();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getRotatePerSecond(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotatePerSecond();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setTangentialAccel(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTangentialAccel(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setScale(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getDuration(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDuration();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setDuration(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDuration(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getSpeed(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSpeed();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setSpeed(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSpeed(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setRotation(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotation(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setScaleX(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScaleX(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setScaleY(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScaleY(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getTexture(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Texture2D* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getTexture();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 130);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getStartColor(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color4F* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color4F*)&ptr->getStartColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 233);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4F* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartColor(*(const cocos2d::Color4F*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4F* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndColor(*(const cocos2d::Color4F*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getEndColor(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color4F* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color4F*)&ptr->getEndColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 233);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getAngle(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngle();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getAngleVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngleVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_particle_ParticleSystem_getEmitterMode(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getEmitterMode();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEndRadius(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEndRadius();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_isFull(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFull();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setRotationIsDir(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotationIsDir((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setAngleVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAngleVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setBlendAdditive(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBlendAdditive((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getLifeVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLifeVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_updateWithNoTime(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateWithNoTime();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartSize(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartSizeVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartSizeVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEndSize(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEndSize();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndRadius(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndRadius(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndSize(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEndSizeVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEndSizeVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_addParticle(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->addParticle();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_isBlendAdditive(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isBlendAdditive();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_resetSystem(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resetSystem();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getStartSize(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStartSize();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndSizeVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndSizeVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getStartColorVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color4F* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color4F*)&ptr->getStartColorVar();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 233);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartColorVar(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4F* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartColorVar(*(const cocos2d::Color4F*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEmitterMode(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEmitterMode((cocos2d::ParticleSystem::Mode)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getEndColorVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color4F* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color4F*)&ptr->getEndColorVar();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 233);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndColorVar(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color4F* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color4F*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndColorVar(*(const cocos2d::Color4F*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getStartSpin(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStartSpin();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setRadialAccel(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRadialAccel(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getStartSizeVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStartSizeVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getGravity(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getGravity();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setGravity(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGravity(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartRadius(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartRadius(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEndRadiusVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEndRadiusVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setAtlasIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAtlasIndex(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_stopSystem(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->stopSystem();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setPosVar(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosVar(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getSpeedVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSpeedVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_postStep(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->postStep();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setSpeedVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSpeedVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getRadialAccel(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRadialAccel();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_particle_ParticleSystem_getAtlasIndex(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getAtlasIndex();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndRadiusVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndRadiusVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_particle_ParticleSystem_getParticleCount(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getParticleCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_getRotationIsDir(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getRotationIsDir();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getStartRadius(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStartRadius();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getPosVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPosVar();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getLife(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLife();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setLife(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLife(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setLifeVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLifeVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setAngle(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAngle(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_particle_ParticleSystem_getPositionType(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getPositionType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndSpin(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndSpin(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystem_getBlendFunc(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::BlendFunc* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::BlendFunc*)&ptr->getBlendFunc();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 234);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEmissionRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEmissionRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartSpin(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartSpin(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setBlendFunc(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::BlendFunc* ptr0 = arg0 == NULL ? NULL : (cocos2d::BlendFunc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBlendFunc(*(const cocos2d::BlendFunc*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEndSpinVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEndSpinVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEndSpin(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEndSpin();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setEndSpinVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEndSpinVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setStartSpinVar(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStartSpinVar(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getStartSpinVar(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStartSpinVar();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_particle_ParticleSystem_getEmissionRate(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getEmissionRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setPositionType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionType((cocos2d::ParticleSystem::PositionType)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystem_setOpacityModifyRGB(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setOpacityModifyRGB((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_particle_ParticleSystem_isOpacityModifyRGB(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystem* ptr = (cocos2d::ParticleSystem*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isOpacityModifyRGB();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystemQuad_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ParticleSystemQuad* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSystemQuad::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 235);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystemQuad_create__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::ParticleSystemQuad* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSystemQuad::create((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 235);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_particle_ParticleSystemQuad_createWithTotalParticles(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    cocos2d::ParticleSystemQuad* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ParticleSystemQuad::createWithTotalParticles(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 235);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystemQuad_setTextureWithRect(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ParticleSystemQuad* ptr = (cocos2d::ParticleSystemQuad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Rect* ptr1 = arg1 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextureWithRect(ptr0, *(const cocos2d::Rect*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystemQuad_setTotalParticles(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ParticleSystemQuad* ptr = (cocos2d::ParticleSystemQuad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTotalParticles(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystemQuad_setTexture(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystemQuad* ptr = (cocos2d::ParticleSystemQuad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr0 = arg0 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setTexture(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystemQuad_postStep(JNIEnv* env, jobject obj) {
    cocos2d::ParticleSystemQuad* ptr = (cocos2d::ParticleSystemQuad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->postStep();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_particle_ParticleSystemQuad_setDisplayFrame(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ParticleSystemQuad* ptr = (cocos2d::ParticleSystemQuad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::SpriteFrame* ptr0 = arg0 == NULL ? NULL : (cocos2d::SpriteFrame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setDisplayFrame(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getNode(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getNode();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_create__FF(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1) {
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::create(arg0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_create__F(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_create__(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getPosition(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPosition());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getWorld(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsWorld* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getWorld();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 236);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsBody_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgeSegment__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2Lorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jfloat arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgeSegment(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1, *ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgeSegment__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgeSegment(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getVelocityAtLocalPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getVelocityAtLocalPoint(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setAngularVelocity(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAngularVelocity(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getVelocityAtWorldPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getVelocityAtWorldPoint(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getAngularVelocity(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngularVelocity();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgePolygon___3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgePolygon(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgePolygon___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2, jfloat arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgePolygon(ptr0, arg1, *ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getAngularVelocityLimit(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngularVelocityLimit();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setRotationOffset(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotationOffset(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setAngularDamping(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAngularDamping(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setContactTestBitmask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setContactTestBitmask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setCollisionBitmask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCollisionBitmask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsBody_getCategoryBitmask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCategoryBitmask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setCategoryBitmask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCategoryBitmask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setAngularVelocityLimit(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAngularVelocityLimit(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getAngularDamping(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngularDamping();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsBody_getContactTestBitmask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getContactTestBitmask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsBody_getCollisionBitmask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCollisionBitmask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsBody_isRotationEnabled(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isRotationEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setRotationEnable(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRotationEnable(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getRotationOffset(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotationOffset();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsBody_getGroup(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getGroup();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setGroup(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGroup(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsBody_getTag(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getRotation(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRotation();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createBox__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createBox(*(const cocos2d::Size*)ptr0, *ptr1, *(const cocos2d::Vec2*)ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createBox__Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createBox(*(const cocos2d::Size*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createPolygon___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createPolygon(ptr0, arg1, *ptr2, *(const cocos2d::Vec2*)ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createPolygon___3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createPolygon(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createCircle__FLorg_ccj_physics_PhysicsMaterial_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jobject arg2) {
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createCircle(arg0, *ptr1, *(const cocos2d::Vec2*)ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createCircle__F(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createCircle(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_applyImpulse__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyImpulse(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_applyImpulse__Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyImpulse(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_applyTorque(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyTorque(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getMoment(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMoment();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_removeFromWorld(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeFromWorld();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_addMoment(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->addMoment(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getLinearDamping(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLinearDamping();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsBody_isResting(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isResting();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setGravityEnable(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGravityEnable(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_removeShape__Lorg_ccj_physics_PhysicsShape_2Z(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PhysicsShape* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeShape(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_removeShape__IZ(JNIEnv* env, jobject obj, jint arg0, jboolean arg1) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeShape(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsBody_isGravityEnabled(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isGravityEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setResting(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setResting(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getVelocityLimit(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getVelocityLimit();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_removeAllShapes(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllShapes(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setMoment(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMoment(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_local2World(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->local2World(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_applyForce__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyForce(*(const cocos2d::Vec2*)ptr0, *(const cocos2d::Vec2*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_applyForce__Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyForce(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgeBox__Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgeBox(*(const cocos2d::Size*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgeBox__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2FLorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2, jobject arg3) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgeBox(*(const cocos2d::Size*)ptr0, *ptr1, arg2, *(const cocos2d::Vec2*)ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsBody_getMass(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMass();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_addMass(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->addMass(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setVelocity(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVelocity(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setLinearDamping(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLinearDamping(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getShape(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getShape(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setDynamic(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDynamic(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setEnable(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnable(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_world2Local(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->world2Local(*(const cocos2d::Vec2*)ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setMass(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMass(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsBody_isDynamic(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isDynamic();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getFirstShape(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getFirstShape();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_resetForces(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->resetForces();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgeChain___3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgeChain(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_createEdgeChain___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2, jfloat arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsBody::createEdgeChain(ptr0, arg1, *ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getVelocity(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getVelocity());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_addShape(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::PhysicsShape* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->addShape(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setVelocityLimit(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVelocityLimit(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsBody_getPositionOffset(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPositionOffset());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsBody_setPositionOffset(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsBody* ptr = (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionOffset(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsContact_getEventCode(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContact* ptr = (cocos2d::PhysicsContact*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getEventCode();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContact_getPreContactData(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContact* ptr = (cocos2d::PhysicsContact*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::PhysicsContactData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::PhysicsContactData*)ptr->getPreContactData();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 237);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContact_getShapeB(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContact* ptr = (cocos2d::PhysicsContact*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getShapeB();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContact_getContactData(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContact* ptr = (cocos2d::PhysicsContact*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::PhysicsContactData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::PhysicsContactData*)ptr->getContactData();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 237);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContact_getShapeA(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContact* ptr = (cocos2d::PhysicsContact*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getShapeA();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsContactData_getCount(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactData* ptr = (cocos2d::PhysicsContactData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    int rvalue = ptr->count;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContactData_getNormal(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactData* ptr = (cocos2d::PhysicsContactData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->normal);
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsContactListener_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ccj::JavaPhysicsContactListener* rptr = ccj::JavaPhysicsContactListener::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsContactListener_regContactSeperate(JNIEnv* env, jobject obj) {
    ccj::JavaPhysicsContactListener* ptr = (ccj::JavaPhysicsContactListener*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->regContactSeperate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsContactListener_regContactPreSolve(JNIEnv* env, jobject obj) {
    ccj::JavaPhysicsContactListener* ptr = (ccj::JavaPhysicsContactListener*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->regContactPreSolve();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsContactListener_regContactPostSolve(JNIEnv* env, jobject obj) {
    ccj::JavaPhysicsContactListener* ptr = (ccj::JavaPhysicsContactListener*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->regContactPostSolve();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsContactListener_regContactBegin(JNIEnv* env, jobject obj) {
    ccj::JavaPhysicsContactListener* ptr = (ccj::JavaPhysicsContactListener*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->regContactBegin();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContactPostSolve_getSurfaceVelocity(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPostSolve* ptr = (cocos2d::PhysicsContactPostSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getSurfaceVelocity());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsContactPostSolve_getRestitution(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPostSolve* ptr = (cocos2d::PhysicsContactPostSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRestitution();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsContactPostSolve_getFriction(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPostSolve* ptr = (cocos2d::PhysicsContactPostSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getFriction();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsContactPreSolve_ignore(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPreSolve* ptr = (cocos2d::PhysicsContactPreSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->ignore();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsContactPreSolve_getSurfaceVelocity(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPreSolve* ptr = (cocos2d::PhysicsContactPreSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getSurfaceVelocity());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsContactPreSolve_getRestitution(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPreSolve* ptr = (cocos2d::PhysicsContactPreSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRestitution();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsContactPreSolve_getFriction(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsContactPreSolve* ptr = (cocos2d::PhysicsContactPreSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getFriction();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJoint_getWorld(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsWorld* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getWorld();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 236);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsJoint_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsJoint_isCollisionEnabled(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isCollisionEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJoint_setCollisionEnable(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCollisionEnable(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsJoint_getTag(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJoint_setTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJoint_setEnable(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnable(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJoint_getBodyA(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBodyA();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJoint_setMaxForce(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMaxForce(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJoint_getBodyB(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBodyB();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJoint_getMaxForce(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMaxForce();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJoint_removeFormWorld(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJoint* ptr = (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeFormWorld();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointDistance_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointDistance* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointDistance::construct(ptr0, ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 195);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointDistance_getDistance(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointDistance* ptr = (cocos2d::PhysicsJointDistance*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDistance();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointDistance_setDistance(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointDistance* ptr = (cocos2d::PhysicsJointDistance*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDistance(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointFixed_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointFixed* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointFixed::construct(ptr0, ptr1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 204);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointGear_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2, jfloat arg3) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsJointGear* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointGear::construct(ptr0, ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 191);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointGear_setPhase(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointGear* ptr = (cocos2d::PhysicsJointGear*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPhase(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointGear_getPhase(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointGear* ptr = (cocos2d::PhysicsJointGear*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPhase();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointGear_setRatio(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointGear* ptr = (cocos2d::PhysicsJointGear*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRatio(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointGear_getRatio(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointGear* ptr = (cocos2d::PhysicsJointGear*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRatio();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointGroove_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr4 = arg4 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointGroove* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointGroove::construct(ptr0, ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3, *(const cocos2d::Vec2*)ptr4);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 192);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointGroove_getAnchr2(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointGroove* ptr = (cocos2d::PhysicsJointGroove*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getAnchr2());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointGroove_setGrooveA(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointGroove* ptr = (cocos2d::PhysicsJointGroove*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGrooveA(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointGroove_setAnchr2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointGroove* ptr = (cocos2d::PhysicsJointGroove*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnchr2(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointGroove_getGrooveA(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointGroove* ptr = (cocos2d::PhysicsJointGroove*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getGrooveA());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointGroove_getGrooveB(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointGroove* ptr = (cocos2d::PhysicsJointGroove*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getGrooveB());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointGroove_setGrooveB(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointGroove* ptr = (cocos2d::PhysicsJointGroove*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGrooveB(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointLimit_construct__Lorg_ccj_physics_PhysicsBody_2Lorg_ccj_physics_PhysicsBody_2Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2FF(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jfloat arg4, jfloat arg5) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointLimit* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointLimit::construct(ptr0, ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3, arg4, arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 193);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointLimit_construct__Lorg_ccj_physics_PhysicsBody_2Lorg_ccj_physics_PhysicsBody_2Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointLimit* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointLimit::construct(ptr0, ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 193);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointLimit_getAnchr2(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getAnchr2());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointLimit_setMax(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMax(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointLimit_getMax(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMax();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointLimit_setAnchr2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnchr2(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointLimit_getAnchr1(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getAnchr1());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointLimit_setAnchr1(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnchr1(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointLimit_getMin(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMin();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointLimit_setMin(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointLimit* ptr = (cocos2d::PhysicsJointLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMin(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointMotor_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsJointMotor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointMotor::construct(ptr0, ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 203);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointMotor_setRate(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointMotor* ptr = (cocos2d::PhysicsJointMotor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointMotor_getRate(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointMotor* ptr = (cocos2d::PhysicsJointMotor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRate();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointPin_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointPin* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointPin::construct(ptr0, ptr1, *(const cocos2d::Vec2*)ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 194);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRatchet_getRatchet(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRatchet* ptr = (cocos2d::PhysicsJointRatchet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRatchet();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRatchet_setRatchet(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRatchet* ptr = (cocos2d::PhysicsJointRatchet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRatchet(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointRatchet_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2, jfloat arg3) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsJointRatchet* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointRatchet::construct(ptr0, ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 201);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRatchet_setPhase(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRatchet* ptr = (cocos2d::PhysicsJointRatchet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPhase(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRatchet_getPhase(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRatchet* ptr = (cocos2d::PhysicsJointRatchet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getPhase();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRatchet_getAngle(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRatchet* ptr = (cocos2d::PhysicsJointRatchet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getAngle();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRatchet_setAngle(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRatchet* ptr = (cocos2d::PhysicsJointRatchet*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAngle(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointRotaryLimit_construct__Lorg_ccj_physics_PhysicsBody_2Lorg_ccj_physics_PhysicsBody_2FF(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2, jfloat arg3) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsJointRotaryLimit* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointRotaryLimit::construct(ptr0, ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 196);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointRotaryLimit_construct__Lorg_ccj_physics_PhysicsBody_2Lorg_ccj_physics_PhysicsBody_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsJointRotaryLimit* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointRotaryLimit::construct(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 196);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRotaryLimit_setMax(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRotaryLimit* ptr = (cocos2d::PhysicsJointRotaryLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMax(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRotaryLimit_getMax(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRotaryLimit* ptr = (cocos2d::PhysicsJointRotaryLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMax();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRotaryLimit_getMin(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRotaryLimit* ptr = (cocos2d::PhysicsJointRotaryLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMin();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRotaryLimit_setMin(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRotaryLimit* ptr = (cocos2d::PhysicsJointRotaryLimit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMin(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_getRestAngle(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRotarySpring* ptr = (cocos2d::PhysicsJointRotarySpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRestAngle();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_getDamping(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRotarySpring* ptr = (cocos2d::PhysicsJointRotarySpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDamping();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_setDamping(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRotarySpring* ptr = (cocos2d::PhysicsJointRotarySpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDamping(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_setRestAngle(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRotarySpring* ptr = (cocos2d::PhysicsJointRotarySpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRestAngle(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_getStiffness(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointRotarySpring* ptr = (cocos2d::PhysicsJointRotarySpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStiffness();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_setStiffness(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointRotarySpring* ptr = (cocos2d::PhysicsJointRotarySpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStiffness(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointRotarySpring_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2, jfloat arg3) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::PhysicsJointRotarySpring* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointRotarySpring::construct(ptr0, ptr1, arg2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 197);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointSpring_setRestLength(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRestLength(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointSpring_getDamping(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDamping();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointSpring_setDamping(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDamping(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointSpring_getRestLength(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRestLength();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsJointSpring_getStiffness(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getStiffness();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointSpring_setStiffness(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setStiffness(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointSpring_construct(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jfloat arg4, jfloat arg5) {
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::PhysicsBody* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsJointSpring* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsJointSpring::construct(ptr0, ptr1, *(const cocos2d::Vec2*)ptr2, *(const cocos2d::Vec2*)ptr3, arg4, arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 198);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointSpring_getAnchr2(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getAnchr2());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointSpring_setAnchr2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnchr2(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsJointSpring_getAnchr1(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getAnchr1());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsJointSpring_setAnchr1(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsJointSpring* ptr = (cocos2d::PhysicsJointSpring*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAnchr1(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsMaterial_allocate(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2) {
    jthrowable exc = NULL;
    try {
        cocos2d::PhysicsMaterial* rptr = new PhysicsMaterial(arg0, arg1, arg2);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsScene_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Scene* rptr = cocos2d::Scene::createWithPhysics();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsScene_getPhysicsWorld(JNIEnv* env, jobject obj) {
    cocos2d::Scene* ptr = (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsWorld* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsWorld();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 236);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsScene_createWithPhysics(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Scene::createWithPhysics();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 238);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShape_getType(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShape_getOffset(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getOffset());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShape_getMaterial(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::PhysicsMaterial* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::PhysicsMaterial*)&ptr->getMaterial();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 239);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_recenterPoints(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        cocos2d::PhysicsShape::recenterPoints(ptr0, arg1, *(const cocos2d::Vec2*)ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setRestitution(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setRestitution(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setDensity(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDensity(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_getDensity(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getDensity();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShape_getPolyonCenter(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(cocos2d::PhysicsShape::getPolyonCenter(ptr0, arg1));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setMaterial(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PhysicsMaterial* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMaterial(*(const cocos2d::PhysicsMaterial*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_getArea(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getArea();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setFriction(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFriction(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_calculateDefaultMoment(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->calculateDefaultMoment();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setContactTestBitmask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setContactTestBitmask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setCollisionBitmask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCollisionBitmask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShape_getCategoryBitmask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCategoryBitmask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setCategoryBitmask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCategoryBitmask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShape_getContactTestBitmask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getContactTestBitmask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShape_getCollisionBitmask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCollisionBitmask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShape_getGroup(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getGroup();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setGroup(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGroup(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShape_getTag(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getTag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShape_getCenter(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getCenter());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_physics_PhysicsShape_containsPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->containsPoint(*(const cocos2d::Vec2*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_getMoment(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMoment();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setMoment(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMoment(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_getMass(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getMass();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShape_getBody(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBody();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsShape_setMass(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMass(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_getRestitution(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRestitution();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShape_getFriction(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShape* ptr = (cocos2d::PhysicsShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getFriction();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeBox_getSize(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeBox* ptr = (cocos2d::PhysicsShapeBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Size(ptr->getSize());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Size_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeBox_getOffset(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeBox* ptr = (cocos2d::PhysicsShapeBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getOffset());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeBox_create__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeBox::create(*ptr0, *ptr1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 199);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeBox_create__Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeBox::create(*ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 199);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeBox_create__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeBox::create(*ptr0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 199);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShapeBox_getPointsCount(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeBox* ptr = (cocos2d::PhysicsShapeBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPointsCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeCircle_getOffset(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeCircle* ptr = (cocos2d::PhysicsShapeCircle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getOffset());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeCircle_create__FLorg_ccj_physics_PhysicsMaterial_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeCircle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeCircle::create(arg0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 200);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeCircle_create__FLorg_ccj_physics_PhysicsMaterial_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jobject arg2) {
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeCircle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeCircle::create(arg0, *ptr1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 200);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeCircle_create__F(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    cocos2d::PhysicsShapeCircle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeCircle::create(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 200);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapeCircle_calculateMoment(JNIEnv* env, jclass cls, jfloat arg0, jfloat arg1, jobject arg2) {
    cocos2d::Vec2* ptr2 = arg2 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::PhysicsShapeCircle::calculateMoment(arg0, arg1, *ptr2);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapeCircle_getRadius(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeCircle* ptr = (cocos2d::PhysicsShapeCircle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRadius();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapeCircle_calculateArea(JNIEnv* env, jclass cls, jfloat arg0) {
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::PhysicsShapeCircle::calculateArea(arg0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapeCircle_calculateDefaultMoment(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeCircle* ptr = (cocos2d::PhysicsShapeCircle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->calculateDefaultMoment();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeBox_create__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2FLorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2, jobject arg3) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeBox::create(*ptr0, *ptr1, arg2, *ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 202);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeBox_create__Lorg_ccj_math_Size_2(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeBox::create(*ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 202);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeBox_create__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jfloat arg2) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeBox::create(*ptr0, *ptr1, arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 202);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeBox_create__Lorg_ccj_math_Size_2Lorg_ccj_physics_PhysicsMaterial_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr1 = arg1 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeBox::create(*ptr0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 202);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShapeEdgeBox_getPointsCount(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeEdgeBox* ptr = (cocos2d::PhysicsShapeEdgeBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPointsCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeChain_create___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2, jfloat arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeChain* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeChain::create(ptr0, arg1, *ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 205);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeChain_create___3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeChain* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeChain::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 205);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShapeEdgeChain_getPointsCount(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeEdgeChain* ptr = (cocos2d::PhysicsShapeEdgeChain*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPointsCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgePolygon_create___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2, jfloat arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgePolygon::create(ptr0, arg1, *ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 208);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgePolygon_create___3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgePolygon::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 208);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgePolygon_create___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgePolygon::create(ptr0, arg1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 208);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShapeEdgePolygon_getPointsCount(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeEdgePolygon* ptr = (cocos2d::PhysicsShapeEdgePolygon*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPointsCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeSegment_create__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2Lorg_ccj_physics_PhysicsMaterial_2F(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jfloat arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeSegment* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeSegment::create(*ptr0, *ptr1, *ptr2, arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 207);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeSegment_create__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeSegment* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeSegment::create(*ptr0, *ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 207);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeSegment_create__Lorg_ccj_math_Vec2_2Lorg_ccj_math_Vec2_2Lorg_ccj_physics_PhysicsMaterial_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapeEdgeSegment* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapeEdgeSegment::create(*ptr0, *ptr1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 207);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeSegment_getPointB(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeEdgeSegment* ptr = (cocos2d::PhysicsShapeEdgeSegment*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPointB());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapeEdgeSegment_getPointA(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapeEdgeSegment* ptr = (cocos2d::PhysicsShapeEdgeSegment*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPointA());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapePolygon_create___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2, jobject arg3) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapePolygon::create(ptr0, arg1, *ptr2, *ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 206);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapePolygon_create___3Lorg_ccj_math_Vec2_2ILorg_ccj_physics_PhysicsMaterial_2(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1, jobject arg2) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    cocos2d::PhysicsMaterial* ptr2 = arg2 == NULL ? NULL : (cocos2d::PhysicsMaterial*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShapePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapePolygon::create(ptr0, arg1, *ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 206);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapePolygon_create___3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jobject rarg = NULL;
    cocos2d::PhysicsShapePolygon* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::PhysicsShapePolygon::create(ptr0, arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 206);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapePolygon_calculateMoment__F_3Lorg_ccj_math_Vec2_2I(JNIEnv* env, jclass cls, jfloat arg0, jobjectArray arg1, jint arg2) {
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg1)];
 for(int i=0;i<env->GetArrayLength(arg1);i++){
ptr1[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg1,i), JavaCPP_addressFID)));
}
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::PhysicsShapePolygon::calculateMoment(arg0, ptr1, arg2);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapePolygon_calculateMoment__F_3Lorg_ccj_math_Vec2_2ILorg_ccj_math_Vec2_2(JNIEnv* env, jclass cls, jfloat arg0, jobjectArray arg1, jint arg2, jobject arg3) {
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg1)];
 for(int i=0;i<env->GetArrayLength(arg1);i++){
ptr1[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg1,i), JavaCPP_addressFID)));
}
    cocos2d::Vec2* ptr3 = arg3 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::PhysicsShapePolygon::calculateMoment(arg0, ptr1, arg2, *ptr3);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsShapePolygon_getPoint(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsShapePolygon* ptr = (cocos2d::PhysicsShapePolygon*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getPoint(arg0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsShapePolygon_getPointsCount(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsShapePolygon* ptr = (cocos2d::PhysicsShapePolygon*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPointsCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsShapePolygon_calculateArea(JNIEnv* env, jclass cls, jobjectArray arg0, jint arg1) {
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : new cocos2d::Vec2[env->GetArrayLength(arg0)];
 for(int i=0;i<env->GetArrayLength(arg0);i++){
ptr0[i] = *((cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(env->GetObjectArrayElement(arg0,i), JavaCPP_addressFID)));
}
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = cocos2d::PhysicsShapePolygon::calculateArea(ptr0, arg1);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_removeAllBodies(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllBodies();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsWorld_getShapes(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vector<cocos2d::PhysicsShape*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vector<cocos2d::PhysicsShape*>(ptr->getShapes(*ptr0));
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_VectorPhysicsShape_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 240);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_setUpdateRate(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUpdateRate(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_removeJoint(JNIEnv* env, jobject obj, jobject arg0, jboolean arg1) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PhysicsJoint* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeJoint(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsWorld_getUpdateRate(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getUpdateRate();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_setDebugDrawMask(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDebugDrawMask(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_removeAllJoints(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllJoints(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsWorld_getAllBodies(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vector<cocos2d::PhysicsBody*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vector<cocos2d::PhysicsBody*>(ptr->getAllBodies());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_base_VectorPhysicsBody_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 241);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_addJoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PhysicsJoint* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsJoint*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addJoint(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_removeBody__I(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeBody(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_removeBody__Lorg_ccj_physics_PhysicsBody_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::PhysicsBody* ptr0 = arg0 == NULL ? NULL : (cocos2d::PhysicsBody*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeBody(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_physics_PhysicsWorld_getDebugDrawMask(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getDebugDrawMask();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_physics_PhysicsWorld_getSpeed(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getSpeed();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_setSpeed(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSpeed(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsWorld_getScene(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->getScene();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 153);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsWorld_getGravity(JNIEnv* env, jobject obj) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getGravity());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_physics_PhysicsWorld_setGravity(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGravity(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsWorld_getBody(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsBody* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getBody(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_physics_PhysicsWorld_getShape(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::PhysicsWorld* ptr = (cocos2d::PhysicsWorld*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getShape(*(const cocos2d::Vec2*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_reset(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->reset();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jshort JNICALL Java_org_ccj_renderer_GLProgram_getProgram(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jshort rarg = 0;
    jthrowable exc = NULL;
    try {
        short rvalue = ptr->getProgram();
        rarg = (jshort)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_updateUniforms(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateUniforms();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_renderer_GLProgram_getProgramLog(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getProgramLog());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_use(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->use();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith3i(JNIEnv* env, jobject obj, jint arg0, jint arg1, jint arg2, jint arg3) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith3i(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith4i(JNIEnv* env, jobject obj, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith4i(arg0, arg1, arg2, arg3, arg4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith1fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith1fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith2f(JNIEnv* env, jobject obj, jint arg0, jfloat arg1, jfloat arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith2f(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_renderer_GLProgram_initWithFilenames(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithFilenames((std::string&)adapter0, (std::string&)adapter1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith4iv(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith4iv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_renderer_GLProgram_getAttribLocation(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getAttribLocation((std::string&)adapter0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith3iv(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith3iv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith1f(JNIEnv* env, jobject obj, jint arg0, jfloat arg1) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith1f(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformsForBuiltins(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformsForBuiltins();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith1i(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith1i(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith3fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith3fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith2iv(JNIEnv* env, jobject obj, jint arg0, jintArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith2iv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith4fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith4fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_renderer_GLProgram_getUniformLocationForName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getUniformLocationForName(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith2fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith2fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith4f(JNIEnv* env, jobject obj, jint arg0, jfloat arg1, jfloat arg2, jfloat arg3, jfloat arg4) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith4f(arg0, arg1, arg2, arg3, arg4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWithMatrix2fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWithMatrix2fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_bindAttribLocation(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->bindAttribLocation((std::string&)adapter0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWithMatrix3fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWithMatrix3fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWithMatrix4fv(JNIEnv* env, jobject obj, jint arg0, jfloatArray arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    float* ptr1 = arg1 == NULL ? NULL : env->GetFloatArrayElements(arg1, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWithMatrix4fv(arg0, ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseFloatArrayElements(arg1, (jfloat*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_renderer_GLProgram_getUniformLocation(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getUniformLocation((std::string&)adapter0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith2i(JNIEnv* env, jobject obj, jint arg0, jint arg1, jint arg2) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith2i(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgram_setUniformLocationWith3f(JNIEnv* env, jobject obj, jint arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformLocationWith3f(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_renderer_GLProgram_getFragmentShaderLog(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getFragmentShaderLog());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_renderer_GLProgram_createWithFilenames(JNIEnv* env, jclass cls, jstring arg0, jstring arg1) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jobject rarg = NULL;
    cocos2d::GLProgram* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLProgram::createWithFilenames((std::string&)adapter0, (std::string&)adapter1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 155);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_renderer_GLProgram_getVertexShaderLog(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getVertexShaderLog());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_renderer_GLProgram_link(JNIEnv* env, jobject obj) {
    cocos2d::GLProgram* ptr = (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->link();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_apply(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->apply(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_renderer_GLProgramState_create(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::GLProgram* ptr0 = arg0 == NULL ? NULL : (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::GLProgramState* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLProgramState::create(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 156);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_applyGLProgram(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyGLProgram(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_applyAttributes(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyAttributes(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformVec2__Ljava_lang_String_2Lorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformVec2((std::string&)adapter0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformVec2__ILorg_ccj_math_Vec2_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformVec2(arg0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformVec3__Ljava_lang_String_2Lorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformVec3((std::string&)adapter0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformVec3__ILorg_ccj_math_Vec3_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformVec3(arg0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_applyUniforms(JNIEnv* env, jobject obj) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->applyUniforms();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformFloat__Ljava_lang_String_2F(JNIEnv* env, jobject obj, jstring arg0, jfloat arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setUniformFloat((std::string&)adapter0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformFloat__IF(JNIEnv* env, jobject obj, jint arg0, jfloat arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformFloat(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_renderer_GLProgramState_getUniformCount(JNIEnv* env, jobject obj) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getUniformCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformInt__II(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformInt(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformInt__Ljava_lang_String_2I(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setUniformInt((std::string&)adapter0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformVec4__Ljava_lang_String_2Lorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformVec4((std::string&)adapter0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformVec4__ILorg_ccj_math_Vec4_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformVec4(arg0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformMat4__Ljava_lang_String_2Lorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformMat4((std::string&)adapter0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformMat4__ILorg_ccj_math_Mat4_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr1 = arg1 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformMat4(arg0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_renderer_GLProgramState_getVertexAttribCount(JNIEnv* env, jobject obj) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getVertexAttribCount();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_renderer_GLProgramState_getOrCreateWithGLProgramName(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jobject rarg = NULL;
    cocos2d::GLProgramState* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLProgramState::getOrCreateWithGLProgramName((std::string&)adapter0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 156);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_renderer_GLProgramState_getOrCreateWithGLProgram(JNIEnv* env, jclass cls, jobject arg0) {
    cocos2d::GLProgram* ptr0 = arg0 == NULL ? NULL : (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::GLProgramState* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::GLProgramState::getOrCreateWithGLProgram(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 156);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_renderer_GLProgramState_getVertexAttribsFlags(JNIEnv* env, jobject obj) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getVertexAttribsFlags();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformTexture__IS(JNIEnv* env, jobject obj, jint arg0, jshort arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setUniformTexture(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformTexture__ILorg_ccj_d2_Texture2D_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Texture2D* ptr1 = arg1 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setUniformTexture(arg0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformTexture__Ljava_lang_String_2Lorg_ccj_d2_Texture2D_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    cocos2d::Texture2D* ptr1 = arg1 == NULL ? NULL : (cocos2d::Texture2D*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setUniformTexture((std::string&)adapter0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setUniformTexture__Ljava_lang_String_2S(JNIEnv* env, jobject obj, jstring arg0, jshort arg1) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setUniformTexture((std::string&)adapter0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_renderer_GLProgramState_getGLProgram(JNIEnv* env, jobject obj) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::GLProgram* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getGLProgram();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 155);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_GLProgramState_setGLProgram(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::GLProgramState* ptr = (cocos2d::GLProgramState*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::GLProgram* ptr0 = arg0 == NULL ? NULL : (cocos2d::GLProgram*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setGLProgram(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_apply(JNIEnv* env, jobject obj) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->apply();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setFloat(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFloat(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setInt(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setInt(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setVec3(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec3* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec3*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVec3(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setMat4(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Mat4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Mat4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMat4(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setVec2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVec2(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setVec4(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec4* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec4*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVec4(*ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_renderer_UniformValue_setTexture(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    cocos2d::UniformValue* ptr = (cocos2d::UniformValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTexture(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_renderer_VertexAttribValue_apply(JNIEnv* env, jobject obj) {
    cocos2d::VertexAttribValue* ptr = (cocos2d::VertexAttribValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->apply();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_Scene_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        cocos2d::Scene* rptr = cocos2d::Scene::create();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_Scene_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::Scene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::Scene::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 153);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_Scene_getPhysicsWorld(JNIEnv* env, jobject obj) {
    cocos2d::Scene* ptr = (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::PhysicsWorld* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPhysicsWorld();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 236);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Scene_initWithPhysics(JNIEnv* env, jobject obj) {
    cocos2d::Scene* ptr = (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->initWithPhysics();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_Scheduler_00024SchedulerCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.Scheduler.SchedulerCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_Scheduler_00024SchedulerCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_Scheduler_00024SchedulerCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_Scheduler_00024SchedulerCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_Scheduler_00024SchedulerCallback_deallocate);
        //JavaCPP_org_ccj_Scheduler_00024SchedulerCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_Scheduler_00024SchedulerCallback::call (float arg0) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[1];
    args[0].f = (jfloat)arg0;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 242));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.Scheduler.SchedulerCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_Scheduler_00024SchedulerCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 242, "call", "(F)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.Scheduler.SchedulerCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"private void org.ccj.Scheduler$SchedulerCallback.call(float)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_Scheduler_setTimeScale(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTimeScale(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Scheduler_isTargetPaused(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isTargetPaused(ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_Scheduler_getTimeScale(JNIEnv* env, jobject obj) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getTimeScale();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_Scheduler_isScheduled(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    JavaCPP_org_ccj_Scheduler_00024SchedulerCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_Scheduler_00024SchedulerCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isScheduled((ptr0 == NULL ? NULL : ptr0->ptr), (cocos2d::Ref *)ptr1);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_unscheduleAll(JNIEnv* env, jobject obj) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unscheduleAll();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_schedule(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jfloat arg2, jint arg3, jfloat arg4, jboolean arg5) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_Scheduler_00024SchedulerCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->schedule((ptr0 == NULL ? NULL : ptr0->ptr), (cocos2d::Ref *)ptr1, arg2, arg3, arg4, arg5);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_Scheduler_scheduleScriptFunc(JNIEnv* env, jobject obj, jint arg0, jfloat arg1, jboolean arg2) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->scheduleScriptFunc(arg0, arg1, arg2);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_unscheduleScriptEntry(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unscheduleScriptEntry(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_unscheduleAllWithMinPriority(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->unscheduleAllWithMinPriority(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_resumeTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->resumeTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_pauseTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->pauseTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_unscheduleUpdate(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->unscheduleUpdate(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_unschedule(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_Scheduler_00024SchedulerCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_Scheduler_00024SchedulerCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_Scheduler_00024SchedulerCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->unschedule((ptr0 == NULL ? NULL : ptr0->ptr), (cocos2d::Ref *)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_Scheduler_unscheduleAllForTarget(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::Scheduler* ptr = (cocos2d::Scheduler*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->unscheduleAllForTarget(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_storage_Storage_getInstance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ccj::JavaStorageClass* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ccj::JavaStorageClass::getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 243);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_storage_Storage_init__(JNIEnv* env, jobject obj) {
    ccj::JavaStorageClass* ptr = (ccj::JavaStorageClass*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->init();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_storage_Storage_init__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    ccj::JavaStorageClass* ptr = (ccj::JavaStorageClass*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->init((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_storage_Storage_removeItem(JNIEnv* env, jobject obj, jstring arg0) {
    ccj::JavaStorageClass* ptr = (ccj::JavaStorageClass*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->removeItem((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_storage_Storage_getItem(JNIEnv* env, jobject obj, jstring arg0) {
    ccj::JavaStorageClass* ptr = (ccj::JavaStorageClass*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getItem((std::string&)adapter0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_storage_Storage_setItem(JNIEnv* env, jobject obj, jstring arg0, jstring arg1) {
    ccj::JavaStorageClass* ptr = (ccj::JavaStorageClass*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->setItem((std::string&)adapter0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_storage_Storage_free(JNIEnv* env, jobject obj) {
    ccj::JavaStorageClass* ptr = (ccj::JavaStorageClass*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->free();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionCrossFade_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionCrossFade* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionCrossFade::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 244);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFade_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFade* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFade::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 245);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFade_create__FLorg_ccj_Scene_2Lorg_ccj_base_Color3B_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jobject arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    cocos2d::Color3B* ptr2 = arg2 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::TransitionFade* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFade::create(arg0, ptr1, *(const cocos2d::Color3B*)ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 245);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFadeBL_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFadeBL* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFadeBL::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 246);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFadeDown_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFadeDown* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFadeDown::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 247);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFadeTR_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFadeTR* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFadeTR::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 248);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFadeUp_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFadeUp* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFadeUp::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 249);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFlipAngular_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFlipAngular* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFlipAngular::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 250);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFlipAngular_create__FLorg_ccj_Scene_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFlipAngular* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFlipAngular::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 250);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFlipX_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFlipX::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 251);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFlipX_create__FLorg_ccj_Scene_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFlipX::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 251);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFlipY_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFlipY::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 252);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionFlipY_create__FLorg_ccj_Scene_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionFlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionFlipY::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 252);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionJumpZoom_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionJumpZoom* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionJumpZoom::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 253);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionMoveInB_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionMoveInB* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionMoveInB::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 254);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionMoveInL_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionMoveInL* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionMoveInL::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 255);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionMoveInR_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionMoveInR* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionMoveInR::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 256);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionMoveInT_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionMoveInT* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionMoveInT::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 257);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionRotoZoom_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionRotoZoom* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionRotoZoom::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 258);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionScene_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionScene* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionScene::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 259);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSceneOriented_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSceneOriented* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSceneOriented::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 260);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionShrinkGrow_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionShrinkGrow* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionShrinkGrow::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 261);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSlideInB_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSlideInB* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSlideInB::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 262);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSlideInL_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSlideInL* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSlideInL::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 263);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSlideInR_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSlideInR* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSlideInR::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 264);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSlideInT_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSlideInT* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSlideInT::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 265);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSplitCols_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSplitCols* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSplitCols::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 266);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionSplitRows_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionSplitRows* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionSplitRows::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 267);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionTurnOffTiles_create(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionTurnOffTiles* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionTurnOffTiles::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 268);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionZoomFlipAngular_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionZoomFlipAngular* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionZoomFlipAngular::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 269);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionZoomFlipAngular_create__FLorg_ccj_Scene_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionZoomFlipAngular* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionZoomFlipAngular::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 269);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionZoomFlipX_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionZoomFlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionZoomFlipX::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 270);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionZoomFlipX_create__FLorg_ccj_Scene_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionZoomFlipX* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionZoomFlipX::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 270);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionZoomFlipY_create__FLorg_ccj_Scene_2(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionZoomFlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionZoomFlipY::create(arg0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 271);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_transition_TransitionZoomFlipY_create__FLorg_ccj_Scene_2I(JNIEnv* env, jclass cls, jfloat arg0, jobject arg1, jint arg2) {
    cocos2d::Scene* ptr1 = arg1 == NULL ? NULL : (cocos2d::Scene*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::TransitionZoomFlipY* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::TransitionZoomFlipY::create(arg0, ptr1, (cocos2d::TransitionScene::Orientation)arg2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 271);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_Button_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::Button* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Button::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 272);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setTitleText(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setTitleText((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setCapInsets(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsets(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setTitleFontName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setTitleFontName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_Button_getTitleText(JNIEnv* env, jobject obj) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getTitleText());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setTitleColor(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTitleColor(*(const cocos2d::Color3B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Button_getTitleFontSize(JNIEnv* env, jobject obj) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getTitleFontSize();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setScale9Enabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale9Enabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setTitleFontSize(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTitleFontSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_Button_getTitleFontName(JNIEnv* env, jobject obj) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getTitleFontName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Button_getTitleColor(JNIEnv* env, jobject obj) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Color3B* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Color3B*)&ptr->getTitleColor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 139);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_loadTextures(JNIEnv* env, jobject obj, jstring arg0, jstring arg1, jstring arg2, jint arg3) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    const char* ptr2 = arg2 == NULL ? NULL : env->GetStringUTFChars(arg2, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextures(ptr0, ptr1, ptr2, (cocos2d::ui::Widget::TextureResType)arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (arg2 != NULL) env->ReleaseStringUTFChars(arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_loadTextureDisabled(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureDisabled(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setCapInsetsNormalRenderer(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsetsNormalRenderer(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setCapInsetsDisabledRenderer(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsetsDisabledRenderer(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_loadTextureNormal(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureNormal(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setPressedActionEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPressedActionEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_setCapInsetsPressedRenderer(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsetsPressedRenderer(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Button_loadTexturePressed(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Button* ptr = (cocos2d::ui::Button*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTexturePressed(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_00024CheckBoxCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.ui.CheckBox.CheckBoxCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback_deallocate);
        //JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback::call (cocos2d::Ref* arg0, cocos2d::ui::CheckBoxEventType arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::Ref* ptr0 = NULL;
    ptr0 = (cocos2d::Ref*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 11);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].i = (jint)arg1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 273));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.ui.CheckBox.CheckBoxCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 273, "call", "(Lorg/ccj/base/Ref;I)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.ui.CheckBox.CheckBoxCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public void org.ccj.ui.CheckBox$CheckBoxCallback.call(org.ccj.base.Ref,int)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_CheckBox_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::CheckBox* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::CheckBox::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 274);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_loadTextures(JNIEnv* env, jobject obj, jstring arg0, jstring arg1, jstring arg2, jstring arg3, jstring arg4, jint arg5) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    const char* ptr2 = arg2 == NULL ? NULL : env->GetStringUTFChars(arg2, NULL);
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    const char* ptr4 = arg4 == NULL ? NULL : env->GetStringUTFChars(arg4, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextures(ptr0, ptr1, ptr2, ptr3, ptr4, (cocos2d::ui::Widget::TextureResType)arg5);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (arg2 != NULL) env->ReleaseStringUTFChars(arg2, ptr2);
    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (arg4 != NULL) env->ReleaseStringUTFChars(arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_CheckBox_getSelectedState(JNIEnv* env, jobject obj) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getSelectedState();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_setSelectedState(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSelectedState((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_loadTextureBackGround(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureBackGround(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_loadTextureFrontCross(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureFrontCross(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_addEventListenerCheckBox(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_ui_CheckBox_00024CheckBoxCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerCheckBox((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_loadTextureBackGroundDisabled(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureBackGroundDisabled(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_loadTextureFrontCrossDisabled(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureFrontCrossDisabled(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_CheckBox_loadTextureBackGroundSelected(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::CheckBox* ptr = (cocos2d::ui::CheckBox*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTextureBackGroundSelected(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_Helper_seekWidgetByTag(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Helper::seekWidgetByTag(ptr0, arg1);
        if (rptr == ptr0) {
            rarg = arg0;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Helper_seekWidgetByName(JNIEnv* env, jclass cls, jobject arg0, jstring arg1) {
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Helper::seekWidgetByName(ptr0, ptr1);
        if (rptr == ptr0) {
            rarg = arg0;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Helper_seekActionWidgetByActionTag(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Helper::seekActionWidgetByActionTag(ptr0, arg1);
        if (rptr == ptr0) {
            rarg = arg0;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_ImageView_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::ImageView* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::ImageView::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 275);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ImageView_setCapInsets(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ImageView* ptr = (cocos2d::ui::ImageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsets(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ImageView_setScale9Enabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::ImageView* ptr = (cocos2d::ui::ImageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale9Enabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ImageView_loadTexture(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::ImageView* ptr = (cocos2d::ui::ImageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTexture(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ImageView_setTextureRect(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ImageView* ptr = (cocos2d::ui::ImageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextureRect(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_Layout_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::Layout* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Layout::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 276);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_Layout_getLayoutType(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getLayoutType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setLayoutType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLayoutType((cocos2d::ui::Layout::Type)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Layout_hitTest(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->hitTest(*(const cocos2d::Vec2*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setClippingType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setClippingType((cocos2d::ui::Layout::ClippingType)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_addChild__Lorg_ccj_d2_Node_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_addChild__Lorg_ccj_d2_Node_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_addChild__Lorg_ccj_d2_Node_2II(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jint arg2) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Node* ptr0 = arg0 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addChild(ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Layout_getBackGroundImageTextureSize(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getBackGroundImageTextureSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundColorVector(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundColorVector(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_removeBackGroundImage(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeBackGroundImage();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Layout_isClippingEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isClippingEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setClippingEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setClippingEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundImage(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundImage(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundColor__Lorg_ccj_base_Color3B_2Lorg_ccj_base_Color3B_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundColor(*(const cocos2d::Color3B*)ptr0, *(const cocos2d::Color3B*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundColor__Lorg_ccj_base_Color3B_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Color3B* ptr0 = arg0 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundColor(*(const cocos2d::Color3B*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundColorOpacity(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundColorOpacity(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundColorType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundColorType((cocos2d::ui::Layout::BackGroundColorType)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundImageCapInsets(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundImageCapInsets(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_setBackGroundImageScale9Enabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBackGroundImageScale9Enabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_onEnter(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->onEnter();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_onExit(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->onExit();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Layout_sortAllChildren(JNIEnv* env, jobject obj) {
    cocos2d::ui::Layout* ptr = (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->sortAllChildren();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_LayoutParameter_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::LayoutParameter* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::LayoutParameter::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 277);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LayoutParameter_setMargin(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::LayoutParameter* ptr = (cocos2d::ui::LayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Margin* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Margin*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMargin(*(const cocos2d::ui::Margin*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_LayoutParameter_getLayoutType(JNIEnv* env, jobject obj) {
    cocos2d::ui::LayoutParameter* ptr = (cocos2d::ui::LayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getLayoutType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_LayoutParameter_getMargin(JNIEnv* env, jobject obj) {
    cocos2d::ui::LayoutParameter* ptr = (cocos2d::ui::LayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::ui::Margin* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::ui::Margin*)&ptr->getMargin();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 278);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_LayoutParameterLinear_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::LinearLayoutParameter* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::LinearLayoutParameter::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 279);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_LayoutParameterLinear_getGravity(JNIEnv* env, jobject obj) {
    cocos2d::ui::LinearLayoutParameter* ptr = (cocos2d::ui::LinearLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getGravity();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LayoutParameterLinear_setGravity(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::LinearLayoutParameter* ptr = (cocos2d::ui::LinearLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGravity((cocos2d::ui::LinearLayoutParameter::LinearGravity)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_LayoutParameterRelative_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::RelativeLayoutParameter* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::RelativeLayoutParameter::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 280);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_LayoutParameterRelative_getRelativeToWidgetName(JNIEnv* env, jobject obj) {
    cocos2d::ui::RelativeLayoutParameter* ptr = (cocos2d::ui::RelativeLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getRelativeToWidgetName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LayoutParameterRelative_setRelativeToWidgetName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::RelativeLayoutParameter* ptr = (cocos2d::ui::RelativeLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setRelativeToWidgetName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LayoutParameterRelative_setAlign(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::RelativeLayoutParameter* ptr = (cocos2d::ui::RelativeLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAlign((cocos2d::ui::RelativeLayoutParameter::RelativeAlign)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_LayoutParameterRelative_getAlign(JNIEnv* env, jobject obj) {
    cocos2d::ui::RelativeLayoutParameter* ptr = (cocos2d::ui::RelativeLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getAlign();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_LayoutParameterRelative_getRelativeName(JNIEnv* env, jobject obj) {
    cocos2d::ui::RelativeLayoutParameter* ptr = (cocos2d::ui::RelativeLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getRelativeName());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LayoutParameterRelative_setRelativeName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::RelativeLayoutParameter* ptr = (cocos2d::ui::RelativeLayoutParameter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setRelativeName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jlong JNICALL Java_org_ccj_ui_LayoutVector_size(JNIEnv* env, jobject obj) {
    cocos2d::Vector<cocos2d::ui::Layout*>* ptr = (cocos2d::Vector<cocos2d::ui::Layout*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->size();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_LayoutVector_at(JNIEnv* env, jobject obj, jlong arg0) {
    cocos2d::Vector<cocos2d::ui::Layout*>* ptr = (cocos2d::Vector<cocos2d::ui::Layout*>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ui::Layout* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->at(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 276);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_00024ListViewCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.ui.ListView.ListViewCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_ui_ListView_00024ListViewCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_ui_ListView_00024ListViewCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_ui_ListView_00024ListViewCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_ui_ListView_00024ListViewCallback_deallocate);
        //JavaCPP_org_ccj_ui_ListView_00024ListViewCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_ui_ListView_00024ListViewCallback::call (cocos2d::Ref* arg0, cocos2d::ui::ListViewEventType arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::Ref* ptr0 = NULL;
    ptr0 = (cocos2d::Ref*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 11);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].i = (jint)arg1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 281));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.ui.ListView.ListViewCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_ui_ListView_00024ListViewCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 281, "call", "(Lorg/ccj/base/Ref;I)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.ui.ListView.ListViewCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public void org.ccj.ui.ListView$ListViewCallback.call(org.ccj.base.Ref,int)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_ListView_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::ListView* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::ListView::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 282);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_ListView_getIndex(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getIndex(ptr0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_removeItem(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeItem(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_ListView_getItem(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getItem(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_insertDefaultItem(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->insertDefaultItem(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_pushBackDefaultItem(JNIEnv* env, jobject obj) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->pushBackDefaultItem();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_pushBackCustomItem(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->pushBackCustomItem(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_requestRefreshView(JNIEnv* env, jobject obj) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->requestRefreshView();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_addEventListenerListView(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_ui_ListView_00024ListViewCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_ui_ListView_00024ListViewCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_ui_ListView_00024ListViewCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_ui_ListView_00024ListViewCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerListView((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_ListView_getCurSelectedIndex(JNIEnv* env, jobject obj) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCurSelectedIndex();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_setGravity(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setGravity((cocos2d::ui::ListView::Gravity)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_removeAllItems(JNIEnv* env, jobject obj) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllItems();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_removeLastItem(JNIEnv* env, jobject obj) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeLastItem();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_setItemsMargin(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setItemsMargin(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_setItemModel(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setItemModel(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ListView_insertCustomItem(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::ui::ListView* ptr = (cocos2d::ui::ListView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->insertCustomItem(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_LoadingBar_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::LoadingBar* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::LoadingBar::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 283);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LoadingBar_setCapInsets(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsets(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LoadingBar_setScale9Enabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale9Enabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LoadingBar_loadTexture(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadTexture(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_LoadingBar_getPercent(JNIEnv* env, jobject obj) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPercent();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LoadingBar_setPercent(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPercent(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_LoadingBar_getDirection(JNIEnv* env, jobject obj) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getDirection();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_LoadingBar_setDirection(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::LoadingBar* ptr = (cocos2d::ui::LoadingBar*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDirection((cocos2d::ui::LoadingBar::Direction)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_ui_Margin_allocate(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    jthrowable exc = NULL;
    try {
        cocos2d::ui::Margin* rptr = new cocos2d::ui::Margin(arg0, arg1, arg2, arg3);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_ccj_ui_Margin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Margin_setMargin(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jfloat arg2, jfloat arg3) {
    cocos2d::ui::Margin* ptr = (cocos2d::ui::Margin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMargin(arg0, arg1, arg2, arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Margin_getLeft(JNIEnv* env, jobject obj) {
    cocos2d::ui::Margin* ptr = (cocos2d::ui::Margin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->left;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Margin_getRight(JNIEnv* env, jobject obj) {
    cocos2d::ui::Margin* ptr = (cocos2d::ui::Margin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->right;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Margin_getBottom(JNIEnv* env, jobject obj) {
    cocos2d::ui::Margin* ptr = (cocos2d::ui::Margin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->bottom;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Margin_getTop(JNIEnv* env, jobject obj) {
    cocos2d::ui::Margin* ptr = (cocos2d::ui::Margin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    float rvalue = ptr->top;
    rarg = (jfloat)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_00024PageViewCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.ui.PageView.PageViewCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_ui_PageView_00024PageViewCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_ui_PageView_00024PageViewCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_ui_PageView_00024PageViewCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_ui_PageView_00024PageViewCallback_deallocate);
        //JavaCPP_org_ccj_ui_PageView_00024PageViewCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_ui_PageView_00024PageViewCallback::call (cocos2d::Ref* arg0, cocos2d::ui::PageViewEventType arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::Ref* ptr0 = NULL;
    ptr0 = (cocos2d::Ref*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 11);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].i = (jint)arg1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 284));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.ui.PageView.PageViewCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_ui_PageView_00024PageViewCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 284, "call", "(Lorg/ccj/base/Ref;I)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.ui.PageView.PageViewCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public void org.ccj.ui.PageView$PageViewCallback.call(org.ccj.base.Ref,int)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_PageView_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::PageView* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::PageView::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 285);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_removePageAtIndex(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removePageAtIndex(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_addEventListenerPageView(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_ui_PageView_00024PageViewCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_ui_PageView_00024PageViewCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_ui_PageView_00024PageViewCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_ui_PageView_00024PageViewCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerPageView((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_addPage(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Layout* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addPage(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_insertPage(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Layout* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->insertPage(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_PageView_getCurPageIndex(JNIEnv* env, jobject obj) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getCurPageIndex();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_scrollToPage(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToPage(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_addWidgetToPage(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jboolean arg2) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Widget* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->addWidgetToPage(ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_removePage(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::Layout* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::Layout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removePage(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_PageView_removeAllPages(JNIEnv* env, jobject obj) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeAllPages();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_PageView_getPage(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ui::Layout* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getPage(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 276);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_PageView_getPages(JNIEnv* env, jobject obj) {
    cocos2d::ui::PageView* ptr = (cocos2d::ui::PageView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vector<cocos2d::ui::Layout*>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->getPages();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 286);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


JNIEXPORT jboolean JNICALL Java_org_ccj_ui_RichElementImage_init(JNIEnv* env, jobject obj, jint arg0, jobject arg1, jint arg2, jstring arg3) {
    cocos2d::ui::RichElementImage* ptr = (cocos2d::ui::RichElementImage*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init(arg0, *ptr1, arg2, (std::string&)adapter3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_RichElementImage_create(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jstring arg3) {
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    jobject rarg = NULL;
    cocos2d::ui::RichElementImage* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::RichElementImage::create(arg0, *ptr1, arg2, (std::string&)adapter3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 287);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_ui_RichElementNode_init(JNIEnv* env, jobject obj, jint arg0, jobject arg1, jint arg2, jobject arg3) {
    cocos2d::ui::RichElementCustomNode* ptr = (cocos2d::ui::RichElementCustomNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Node* ptr3 = arg3 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init(arg0, *ptr1, arg2, ptr3);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_RichElementNode_create(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jobject arg3) {
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    cocos2d::Node* ptr3 = arg3 == NULL ? NULL : (cocos2d::Node*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jobject rarg = NULL;
    cocos2d::ui::RichElementCustomNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::RichElementCustomNode::create(arg0, *ptr1, arg2, ptr3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 288);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jboolean JNICALL Java_org_ccj_ui_RichElementText_init(JNIEnv* env, jobject obj, jint arg0, jobject arg1, jint arg2, jstring arg3, jstring arg4, jfloat arg5) {
    cocos2d::ui::RichElementText* ptr = (cocos2d::ui::RichElementText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    const char* ptr4 = arg4 == NULL ? NULL : env->GetStringUTFChars(arg4, NULL);
    jint size4 = 0;
    StringAdapter adapter4(ptr4, size4);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->init(arg0, *ptr1, arg2, (std::string&)adapter3, (std::string&)adapter4, arg5);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (arg4 != NULL) env->ReleaseStringUTFChars(arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_RichElementText_create(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jstring arg3, jstring arg4, jfloat arg5) {
    cocos2d::Color3B* ptr1 = arg1 == NULL ? NULL : (cocos2d::Color3B*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    const char* ptr3 = arg3 == NULL ? NULL : env->GetStringUTFChars(arg3, NULL);
    jint size3 = 0;
    StringAdapter adapter3(ptr3, size3);
    const char* ptr4 = arg4 == NULL ? NULL : env->GetStringUTFChars(arg4, NULL);
    jint size4 = 0;
    StringAdapter adapter4(ptr4, size4);
    jobject rarg = NULL;
    cocos2d::ui::RichElementText* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::RichElementText::create(arg0, *ptr1, arg2, (std::string&)adapter3, (std::string&)adapter4, arg5);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 289);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg3 != NULL) env->ReleaseStringUTFChars(arg3, ptr3);
    if (arg4 != NULL) env->ReleaseStringUTFChars(arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_removeElement__Lorg_ccj_ui_RichElement_2(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::RichElement* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::RichElement*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->removeElement(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_removeElement__I(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->removeElement(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_RichText_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::RichText* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::RichText::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 290);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_RichText_getVirtualRendererSize(JNIEnv* env, jobject obj) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getVirtualRendererSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_ignoreContentAdaptWithSize(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->ignoreContentAdaptWithSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_pushBackElement(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::RichElement* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::RichElement*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->pushBackElement(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_setVerticalSpace(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setVerticalSpace(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_formatText(JNIEnv* env, jobject obj) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->formatText();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_RichText_insertElement(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    cocos2d::ui::RichText* ptr = (cocos2d::ui::RichText*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::RichElement* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::RichElement*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->insertElement(ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_ScrollView_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::ScrollView* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::ScrollView::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 291);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_ScrollView_getLayoutType(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getLayoutType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_setLayoutType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setLayoutType((cocos2d::ui::Layout::Type)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_ScrollView_isInertiaScrollEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isInertiaScrollEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToPercentHorizontal(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToPercentHorizontal(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_ScrollView_getInnerContainer(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ui::Layout* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getInnerContainer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 276);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToPercentHorizontal(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jboolean arg2) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToPercentHorizontal(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToPercentBothDirection(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToPercentBothDirection(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_setInnerContainerSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setInnerContainerSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToBottomRight(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToBottomRight();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToBottomLeft(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToBottomLeft(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToPercentVertical(JNIEnv* env, jobject obj, jfloat arg0, jfloat arg1, jboolean arg2) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToPercentVertical(arg0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToPercentBothDirection(JNIEnv* env, jobject obj, jobject arg0, jfloat arg1, jboolean arg2) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToPercentBothDirection(*(const cocos2d::Vec2*)ptr0, arg1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToPercentVertical(JNIEnv* env, jobject obj, jfloat arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToPercentVertical(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToBottomRight(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToBottomRight(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_ScrollView_getInnerContainerSize(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getInnerContainerSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_setInertiaScrollEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setInertiaScrollEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_ScrollView_getDirection(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getDirection();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_setDirection(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDirection((cocos2d::ui::ScrollView::Direction)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToBottom(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToBottom(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToTop(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToTop(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToLeft(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToLeft(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToRight(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToRight(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToTopLeft(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToTopLeft(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToBottom(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToBottom();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_scrollToTopRight(JNIEnv* env, jobject obj, jfloat arg0, jboolean arg1) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->scrollToTopRight(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_setBounceEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBounceEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToRight(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToRight();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToTop(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToTop();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToTopRight(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToTopRight();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_ScrollView_isBounceEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isBounceEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToTopLeft(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToTopLeft();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToBottomLeft(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToBottomLeft();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_ScrollView_jumpToLeft(JNIEnv* env, jobject obj) {
    cocos2d::ui::ScrollView* ptr = (cocos2d::ui::ScrollView*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->jumpToLeft();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_00024SliderCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.ui.Slider.SliderCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_ui_Slider_00024SliderCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_ui_Slider_00024SliderCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_ui_Slider_00024SliderCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_ui_Slider_00024SliderCallback_deallocate);
        //JavaCPP_org_ccj_ui_Slider_00024SliderCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_ui_Slider_00024SliderCallback::call (cocos2d::Ref* arg0, cocos2d::ui::SliderEventType arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::Ref* ptr0 = NULL;
    ptr0 = (cocos2d::Ref*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 11);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].i = (jint)arg1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 292));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.ui.Slider.SliderCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_ui_Slider_00024SliderCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 292, "call", "(Lorg/ccj/base/Ref;I)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.ui.Slider.SliderCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public void org.ccj.ui.Slider$SliderCallback.call(org.ccj.base.Ref,int)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_Slider_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::Slider* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Slider::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 293);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_setCapInsets(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsets(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_setScale9Enabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setScale9Enabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_Slider_getPercent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getPercent();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_setPercent(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPercent(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_loadBarTexture(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadBarTexture(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_loadSlidBallTextureNormal(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadSlidBallTextureNormal(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_loadSlidBallTexturePressed(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadSlidBallTexturePressed(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_loadSlidBallTextures(JNIEnv* env, jobject obj, jstring arg0, jstring arg1, jstring arg2, jint arg3) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    const char* ptr2 = arg2 == NULL ? NULL : env->GetStringUTFChars(arg2, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadSlidBallTextures(ptr0, ptr1, ptr2, (cocos2d::ui::Widget::TextureResType)arg3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (arg2 != NULL) env->ReleaseStringUTFChars(arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_setCapInsetsBarRenderer(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsetsBarRenderer(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_setCapInsetProgressBarRebderer(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Rect* ptr0 = arg0 == NULL ? NULL : (cocos2d::Rect*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setCapInsetProgressBarRebderer(*(const cocos2d::Rect*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_loadProgressBarTexture(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadProgressBarTexture(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_loadSlidBallTextureDisabled(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->loadSlidBallTextureDisabled(ptr0, (cocos2d::ui::Widget::TextureResType)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Slider_addEventListenerSlider(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::Slider* ptr = (cocos2d::ui::Slider*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_ui_Slider_00024SliderCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_ui_Slider_00024SliderCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_ui_Slider_00024SliderCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_ui_Slider_00024SliderCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerSlider((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_Text_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::Text* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Text::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 294);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_Text_getStringLength(JNIEnv* env, jobject obj) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getStringLength();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setFontName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setFontName(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setFontSize(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFontSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setTextAreaSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextAreaSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setText(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setText((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_Text_getStringValue(JNIEnv* env, jobject obj) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringValue());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setTouchScaleChangeEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTouchScaleChangeEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setTextHorizontalAlignment(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextHorizontalAlignment((cocos2d::TextHAlignment)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Text_setTextVerticalAlignment(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTextVerticalAlignment((cocos2d::TextVAlignment)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Text_isTouchScaleChangeEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::Text* ptr = (cocos2d::ui::Text*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isTouchScaleChangeEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_ccj_ui_TextAtlas_setProperty(JNIEnv* env, jobject obj, jstring arg0, jstring arg1, jint arg2, jint arg3, jstring arg4) {
    cocos2d::ui::TextAtlas* ptr = (cocos2d::ui::TextAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    const char* ptr4 = arg4 == NULL ? NULL : env->GetStringUTFChars(arg4, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setProperty(ptr0, ptr1, arg2, arg3, ptr4);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (arg4 != NULL) env->ReleaseStringUTFChars(arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_TextAtlas_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::TextAtlas* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::TextAtlas::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 295);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_TextAtlas_getStringValue(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextAtlas* ptr = (cocos2d::ui::TextAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringValue());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextAtlas_setStringValue(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextAtlas* ptr = (cocos2d::ui::TextAtlas*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setStringValue(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_TextBMFont_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::TextBMFont* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::TextBMFont::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 296);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextBMFont_setText(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextBMFont* ptr = (cocos2d::ui::TextBMFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setText(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_TextBMFont_getStringValue(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextBMFont* ptr = (cocos2d::ui::TextBMFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringValue());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextBMFont_setFntFile(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextBMFont* ptr = (cocos2d::ui::TextBMFont*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setFntFile(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_00024TextFieldCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.ui.TextField.TextFieldCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback_deallocate);
        //JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback::call (cocos2d::Ref* arg0, cocos2d::ui::TextFiledEventType arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::Ref* ptr0 = NULL;
    ptr0 = (cocos2d::Ref*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 11);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].i = (jint)arg1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 297));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.ui.TextField.TextFieldCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 297, "call", "(Lorg/ccj/base/Ref;I)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.ui.TextField.TextFieldCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public void org.ccj.ui.TextField$TextFieldCallback.call(org.ccj.base.Ref,int)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_TextField_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::TextField* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::TextField::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 298);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setFontName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setFontName((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setFontSize(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFontSize(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_attachWithIME(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->attachWithIME();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_TextField_getMaxLength(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getMaxLength();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_didNotSelectSelf(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->didNotSelectSelf();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_TextField_getAttachWithIME(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getAttachWithIME();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setAttachWithIME(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setAttachWithIME((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_TextField_getDetachWithIME(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getDetachWithIME();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setDetachWithIME(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDetachWithIME((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_TextField_getInsertText(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getInsertText();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setText(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setText((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jstring JNICALL Java_org_ccj_ui_TextField_getStringValue(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->getStringValue());
        rptr = radapter;
        if (rptr != NULL) {
            rarg = env->NewStringUTF(rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setTouchSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTouchSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setPlaceHolder(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jint size0 = 0;
    StringAdapter adapter0(ptr0, size0);
    jthrowable exc = NULL;
    try {
        ptr->setPlaceHolder((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setMaxLength(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMaxLength(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setInsertText(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setInsertText((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setPasswordStyleText(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jthrowable exc = NULL;
    try {
        ptr->setPasswordStyleText(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_TextField_isMaxLengthEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isMaxLengthEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_addEventListenerTextField(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_ui_TextField_00024TextFieldCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->addEventListenerTextField((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_TextField_isPasswordEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isPasswordEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setDeleteBackward(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setDeleteBackward((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setPasswordEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPasswordEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_TextField_getDeleteBackward(JNIEnv* env, jobject obj) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->getDeleteBackward();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_TextField_setMaxLengthEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::TextField* ptr = (cocos2d::ui::TextField*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setMaxLengthEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_00024TouchEventCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.ccj.ui.Widget.TouchEventCallback instance for callback.");
        return;
    }
    JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback* rptr = new (std::nothrow) JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback;
    if (rptr != NULL) {
        //rptr->ptr = &JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, &JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback_deallocate);
        //JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback_allocate_callback_instance = *rptr;
    }
}
void JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback::call (cocos2d::Ref* arg0, cocos2d::ui::TouchEventType arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    cocos2d::Ref* ptr0 = NULL;
    ptr0 = (cocos2d::Ref*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 11);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].i = (jint)arg1;
    if (obj == NULL) {
        obj = env->NewGlobalRef(JavaCPP_createPointer(env, 299));
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.ccj.ui.Widget.TouchEventCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        //ptr = &JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback_call_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 299, "call", "(Lorg/ccj/base/Ref;I)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.ccj.ui.Widget.TouchEventCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public void org.ccj.ui.Widget$TouchEventCallback.call(org.ccj.base.Ref,int)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = env->GetStringUTFChars(str, NULL);
        JavaCPP_exception e(msg);
        env->ReleaseStringUTFChars(str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}

JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_clone(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getSize(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Size* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Size*)&ptr->getSize();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setSize(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Size* ptr0 = arg0 == NULL ? NULL : (cocos2d::Size*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSize(*(const cocos2d::Size*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_create(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    cocos2d::ui::Widget* rptr;
    jthrowable exc = NULL;
    try {
        rptr = cocos2d::ui::Widget::create();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 210);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setBright(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setBright((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isBright(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isBright();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isFocused(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFocused();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setFocused(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFocused((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Widget_getLeftInParent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getLeftInParent();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Widget_getRightInParent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getRightInParent();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Widget_getTopInParent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getTopInParent();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getWorldPosition(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new cocos2d::Vec2(ptr->getWorldPosition());
        jint rcapacity = 1;
        void (*deallocator)(void*) = &JavaCPP_org_ccj_math_Vec2_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setSizePercent(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setSizePercent(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isFlipY(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFlipY();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_Widget_getActionTag(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->getActionTag();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getTouchStartPos(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getTouchStartPos();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setFlipY(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFlipY((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getTouchMovePos(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getTouchMovePos();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getTouchEndPos(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getTouchEndPos();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_hitTest(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->hitTest(*(const cocos2d::Vec2*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setActionTag(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setActionTag(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getSizePercent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getSizePercent();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_addTouchEventListener(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_ccj_ui_Widget_00024TouchEventCallback*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->addTouchEventListener((cocos2d::Ref *)ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_ccj_ui_Widget_getBottomInParent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->getBottomInParent();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getPositionPercent(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    const cocos2d::Vec2* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const cocos2d::Vec2*)&ptr->getPositionPercent();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_clippingParentAreaContainPoint(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->clippingParentAreaContainPoint(*(const cocos2d::Vec2*)ptr0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setLayoutParameter(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::ui::LayoutParameter* ptr0 = arg0 == NULL ? NULL : (cocos2d::ui::LayoutParameter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        ptr->setLayoutParameter(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_ignoreContentAdaptWithSize(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->ignoreContentAdaptWithSize((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setPositionPercent(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionPercent(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isIgnoreContentAdaptWithSize(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isIgnoreContentAdaptWithSize();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getVirtualRenderer(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getVirtualRenderer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_updateSizeAndPosition(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->updateSizeAndPosition();
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setPosition(JNIEnv* env, jobject obj, jobject arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    cocos2d::Vec2* ptr0 = arg0 == NULL ? NULL : (cocos2d::Vec2*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPosition(*(const cocos2d::Vec2*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_ccj_ui_Widget_getChildByName(JNIEnv* env, jobject obj, jstring arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    cocos2d::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->getChildByName(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isTouchEnabled(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isTouchEnabled();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setTouchEnabled(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setTouchEnabled((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setFlipX(JNIEnv* env, jobject obj, jboolean arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setFlipX((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_ccj_ui_Widget_isFlipX(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rvalue = ptr->isFlipX();
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_ccj_ui_Widget_getPositionType(JNIEnv* env, jobject obj) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (int)ptr->getPositionType();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_ccj_ui_Widget_setPositionType(JNIEnv* env, jobject obj, jint arg0) {
    cocos2d::ui::Widget* ptr = (cocos2d::ui::Widget*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jthrowable exc = NULL;
    try {
        ptr->setPositionType((cocos2d::ui::Widget::PositionType)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 4);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

}

